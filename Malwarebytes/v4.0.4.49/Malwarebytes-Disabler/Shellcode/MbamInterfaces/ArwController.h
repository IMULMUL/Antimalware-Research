

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 14:14:07 2038
 */
/* Compiler settings for C:\Users\User\source\repos\MBAMExploit\Typelibs\ArwController.IDL:
    Oicf, W1, Zp8, env=Win64 (32b run), target_arch=AMD64 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __ArwController_h__
#define __ArwController_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IArwController_FWD_DEFINED__
#define __IArwController_FWD_DEFINED__
typedef interface IArwController IArwController;

#endif 	/* __IArwController_FWD_DEFINED__ */


#ifndef __IArwControllerV2_FWD_DEFINED__
#define __IArwControllerV2_FWD_DEFINED__
typedef interface IArwControllerV2 IArwControllerV2;

#endif 	/* __IArwControllerV2_FWD_DEFINED__ */


#ifndef __IArwControllerV3_FWD_DEFINED__
#define __IArwControllerV3_FWD_DEFINED__
typedef interface IArwControllerV3 IArwControllerV3;

#endif 	/* __IArwControllerV3_FWD_DEFINED__ */


#ifndef __IArwControllerEvents_FWD_DEFINED__
#define __IArwControllerEvents_FWD_DEFINED__
typedef interface IArwControllerEvents IArwControllerEvents;

#endif 	/* __IArwControllerEvents_FWD_DEFINED__ */


#ifndef __IArwControllerEventsV2_FWD_DEFINED__
#define __IArwControllerEventsV2_FWD_DEFINED__
typedef interface IArwControllerEventsV2 IArwControllerEventsV2;

#endif 	/* __IArwControllerEventsV2_FWD_DEFINED__ */


#ifndef __IArwControllerEventsV3_FWD_DEFINED__
#define __IArwControllerEventsV3_FWD_DEFINED__
typedef interface IArwControllerEventsV3 IArwControllerEventsV3;

#endif 	/* __IArwControllerEventsV3_FWD_DEFINED__ */


#ifndef __IArwControllerEventsV4_FWD_DEFINED__
#define __IArwControllerEventsV4_FWD_DEFINED__
typedef interface IArwControllerEventsV4 IArwControllerEventsV4;

#endif 	/* __IArwControllerEventsV4_FWD_DEFINED__ */


#ifndef ___IArwControllerEvents_FWD_DEFINED__
#define ___IArwControllerEvents_FWD_DEFINED__
typedef interface _IArwControllerEvents _IArwControllerEvents;

#endif 	/* ___IArwControllerEvents_FWD_DEFINED__ */


#ifndef ___IArwControllerEventsV2_FWD_DEFINED__
#define ___IArwControllerEventsV2_FWD_DEFINED__
typedef interface _IArwControllerEventsV2 _IArwControllerEventsV2;

#endif 	/* ___IArwControllerEventsV2_FWD_DEFINED__ */


#ifndef ___IArwControllerEventsV3_FWD_DEFINED__
#define ___IArwControllerEventsV3_FWD_DEFINED__
typedef interface _IArwControllerEventsV3 _IArwControllerEventsV3;

#endif 	/* ___IArwControllerEventsV3_FWD_DEFINED__ */


#ifndef ___IArwControllerEventsV4_FWD_DEFINED__
#define ___IArwControllerEventsV4_FWD_DEFINED__
typedef interface _IArwControllerEventsV4 _IArwControllerEventsV4;

#endif 	/* ___IArwControllerEventsV4_FWD_DEFINED__ */


#ifndef __ArwController_FWD_DEFINED__
#define __ArwController_FWD_DEFINED__

#ifdef __cplusplus
typedef class ArwController ArwController;
#else
typedef struct ArwController ArwController;
#endif /* __cplusplus */

#endif 	/* __ArwController_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __ArwControllerCOMLib_LIBRARY_DEFINED__
#define __ArwControllerCOMLib_LIBRARY_DEFINED__

/* library ArwControllerCOMLib */
/* [custom][custom][custom][version][uuid] */ 












typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_ArwController_0000_0000_0001
    {
        ArwStateIdle	= 0,
        ArwStateEnabled	= 1,
        ArwStateDisabled	= 2,
        ArwStateError	= 3,
        ArwStateNotAvailable	= 4,
        ArwStateNotSupported	= 5
    } 	_ArwState;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ArwController_0000_0000_0002
    {
        ExclusionByPath	= 0,
        ExclusionByFile	= 1,
        ExclusionByPid	= 2,
        ExclusionByHash	= 3
    } 	_ArwExclusionType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_ArwController_0000_0000_0003
    {
        ArwExclusionAdded	= 0,
        ArwExclusionRemoved	= 1,
        ArwExclusionUpdated	= 2,
        ArwExclusionsCleared	= 3
    } 	_ArwExclusionEventType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_ArwController_0001_0000_0001
    {
        ArwManualStop	= 0,
        ArwSystemStop	= 1
    } 	_ArwStopType;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_ArwController_0001_0001_0001
    {
        ArwStatusInactive	= 0,
        ArwStatusInitializing	= 1,
        ArwStatusStarting	= 2,
        ArwStatusStarted	= 3,
        ArwStatusStopping	= 4,
        ArwStatusStopped	= 5,
        ArwStatusError	= 6,
        ArwStatusNeedsReboot	= 7
    } 	_ArwStatus;


EXTERN_C const IID LIBID_ArwControllerCOMLib;

#ifndef __IArwController_INTERFACE_DEFINED__
#define __IArwController_INTERFACE_DEFINED__

/* interface IArwController */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwController;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4AC5360-A581-42A7-8DD6-D63A5C3AA7F1")
    IArwController : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( 
            /* [in] */ long timeoutMs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddExclusion( 
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddExclusionEx( 
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData,
            /* [out] */ BSTR *ppID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveExclusion( 
            /* [in] */ BSTR pID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateExclusion( 
            /* [in] */ BSTR pID,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNumExclusions( 
            /* [out] */ long *pNumExclusions) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetExclusionIDs( 
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetExclusion( 
            /* [in] */ BSTR pID,
            /* [out] */ _ArwExclusionType *pType,
            /* [out] */ BSTR *ppData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearExclusions( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDetectionCount( 
            /* [out] */ long *totalDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearDetectionCountTotal( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartProtection( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopProtection( void) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentState( 
            /* [retval][out] */ _ArwState *pState) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PrepareUpdate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FinishUpdate( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwController * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwController * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwController * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwController * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwController * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwController * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwController * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IArwController * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IArwController * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExclusion )( 
            IArwController * This,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExclusionEx )( 
            IArwController * This,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveExclusion )( 
            IArwController * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateExclusion )( 
            IArwController * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumExclusions )( 
            IArwController * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetExclusionIDs )( 
            IArwController * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetExclusion )( 
            IArwController * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ArwExclusionType *pType,
            /* [out] */ BSTR *ppData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExclusions )( 
            IArwController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDetectionCount )( 
            IArwController * This,
            /* [out] */ long *totalDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearDetectionCountTotal )( 
            IArwController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IArwController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IArwController * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IArwController * This,
            /* [retval][out] */ _ArwState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IArwController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IArwController * This);
        
        END_INTERFACE
    } IArwControllerVtbl;

    interface IArwController
    {
        CONST_VTBL struct IArwControllerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwController_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwController_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwController_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwController_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwController_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwController_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pCleanController,pCloudController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild,pUpdateController)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pCleanController,pCloudController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild,pUpdateController) ) 

#define IArwController_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IArwController_AddExclusion(This,type,pData)	\
    ( (This)->lpVtbl -> AddExclusion(This,type,pData) ) 

#define IArwController_AddExclusionEx(This,type,pData,ppID)	\
    ( (This)->lpVtbl -> AddExclusionEx(This,type,pData,ppID) ) 

#define IArwController_RemoveExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveExclusion(This,pID) ) 

#define IArwController_UpdateExclusion(This,pID,type,pData)	\
    ( (This)->lpVtbl -> UpdateExclusion(This,pID,type,pData) ) 

#define IArwController_GetNumExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumExclusions(This,pNumExclusions) ) 

#define IArwController_GetExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetExclusionIDs(This,ppExclusionIDs) ) 

#define IArwController_GetExclusion(This,pID,pType,ppData)	\
    ( (This)->lpVtbl -> GetExclusion(This,pID,pType,ppData) ) 

#define IArwController_ClearExclusions(This)	\
    ( (This)->lpVtbl -> ClearExclusions(This) ) 

#define IArwController_GetDetectionCount(This,totalDetections)	\
    ( (This)->lpVtbl -> GetDetectionCount(This,totalDetections) ) 

#define IArwController_ClearDetectionCountTotal(This)	\
    ( (This)->lpVtbl -> ClearDetectionCountTotal(This) ) 

#define IArwController_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IArwController_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IArwController_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IArwController_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IArwController_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwController_INTERFACE_DEFINED__ */


#ifndef __IArwControllerV2_INTERFACE_DEFINED__
#define __IArwControllerV2_INTERFACE_DEFINED__

/* interface IArwControllerV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwControllerV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EA248A19-F84E-4407-ADD3-8563AFD81269")
    IArwControllerV2 : public IArwController
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopV2( 
            /* [in] */ long timeoutMs,
            /* [in] */ _ArwStopType stopType) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwControllerV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwControllerV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwControllerV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwControllerV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwControllerV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IArwControllerV2 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IArwControllerV2 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExclusion )( 
            IArwControllerV2 * This,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExclusionEx )( 
            IArwControllerV2 * This,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveExclusion )( 
            IArwControllerV2 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateExclusion )( 
            IArwControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumExclusions )( 
            IArwControllerV2 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetExclusionIDs )( 
            IArwControllerV2 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetExclusion )( 
            IArwControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ArwExclusionType *pType,
            /* [out] */ BSTR *ppData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExclusions )( 
            IArwControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDetectionCount )( 
            IArwControllerV2 * This,
            /* [out] */ long *totalDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearDetectionCountTotal )( 
            IArwControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IArwControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IArwControllerV2 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IArwControllerV2 * This,
            /* [retval][out] */ _ArwState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IArwControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IArwControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IArwControllerV2 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ArwStopType stopType);
        
        END_INTERFACE
    } IArwControllerV2Vtbl;

    interface IArwControllerV2
    {
        CONST_VTBL struct IArwControllerV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwControllerV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwControllerV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwControllerV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwControllerV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwControllerV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwControllerV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwControllerV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwControllerV2_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pCleanController,pCloudController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild,pUpdateController)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pCleanController,pCloudController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild,pUpdateController) ) 

#define IArwControllerV2_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IArwControllerV2_AddExclusion(This,type,pData)	\
    ( (This)->lpVtbl -> AddExclusion(This,type,pData) ) 

#define IArwControllerV2_AddExclusionEx(This,type,pData,ppID)	\
    ( (This)->lpVtbl -> AddExclusionEx(This,type,pData,ppID) ) 

#define IArwControllerV2_RemoveExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveExclusion(This,pID) ) 

#define IArwControllerV2_UpdateExclusion(This,pID,type,pData)	\
    ( (This)->lpVtbl -> UpdateExclusion(This,pID,type,pData) ) 

#define IArwControllerV2_GetNumExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumExclusions(This,pNumExclusions) ) 

#define IArwControllerV2_GetExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetExclusionIDs(This,ppExclusionIDs) ) 

#define IArwControllerV2_GetExclusion(This,pID,pType,ppData)	\
    ( (This)->lpVtbl -> GetExclusion(This,pID,pType,ppData) ) 

#define IArwControllerV2_ClearExclusions(This)	\
    ( (This)->lpVtbl -> ClearExclusions(This) ) 

#define IArwControllerV2_GetDetectionCount(This,totalDetections)	\
    ( (This)->lpVtbl -> GetDetectionCount(This,totalDetections) ) 

#define IArwControllerV2_ClearDetectionCountTotal(This)	\
    ( (This)->lpVtbl -> ClearDetectionCountTotal(This) ) 

#define IArwControllerV2_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IArwControllerV2_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IArwControllerV2_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IArwControllerV2_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IArwControllerV2_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IArwControllerV2_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwControllerV2_INTERFACE_DEFINED__ */


#ifndef __IArwControllerV3_INTERFACE_DEFINED__
#define __IArwControllerV3_INTERFACE_DEFINED__

/* interface IArwControllerV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwControllerV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5250E5C8-A09C-4F87-A0DA-A46A62A0EACF")
    IArwControllerV3 : public IArwControllerV2
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentStatus( 
            /* [retval][out] */ _ArwStatus *pState) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwControllerV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwControllerV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwControllerV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwControllerV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwControllerV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IArwControllerV3 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IArwControllerV3 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExclusion )( 
            IArwControllerV3 * This,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExclusionEx )( 
            IArwControllerV3 * This,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveExclusion )( 
            IArwControllerV3 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateExclusion )( 
            IArwControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ArwExclusionType type,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumExclusions )( 
            IArwControllerV3 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetExclusionIDs )( 
            IArwControllerV3 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetExclusion )( 
            IArwControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ArwExclusionType *pType,
            /* [out] */ BSTR *ppData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExclusions )( 
            IArwControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDetectionCount )( 
            IArwControllerV3 * This,
            /* [out] */ long *totalDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearDetectionCountTotal )( 
            IArwControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IArwControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IArwControllerV3 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IArwControllerV3 * This,
            /* [retval][out] */ _ArwState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IArwControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IArwControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IArwControllerV3 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ArwStopType stopType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentStatus )( 
            IArwControllerV3 * This,
            /* [retval][out] */ _ArwStatus *pState);
        
        END_INTERFACE
    } IArwControllerV3Vtbl;

    interface IArwControllerV3
    {
        CONST_VTBL struct IArwControllerV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwControllerV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwControllerV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwControllerV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwControllerV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwControllerV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwControllerV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwControllerV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwControllerV3_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pCleanController,pCloudController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild,pUpdateController)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pCleanController,pCloudController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild,pUpdateController) ) 

#define IArwControllerV3_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IArwControllerV3_AddExclusion(This,type,pData)	\
    ( (This)->lpVtbl -> AddExclusion(This,type,pData) ) 

#define IArwControllerV3_AddExclusionEx(This,type,pData,ppID)	\
    ( (This)->lpVtbl -> AddExclusionEx(This,type,pData,ppID) ) 

#define IArwControllerV3_RemoveExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveExclusion(This,pID) ) 

#define IArwControllerV3_UpdateExclusion(This,pID,type,pData)	\
    ( (This)->lpVtbl -> UpdateExclusion(This,pID,type,pData) ) 

#define IArwControllerV3_GetNumExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumExclusions(This,pNumExclusions) ) 

#define IArwControllerV3_GetExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetExclusionIDs(This,ppExclusionIDs) ) 

#define IArwControllerV3_GetExclusion(This,pID,pType,ppData)	\
    ( (This)->lpVtbl -> GetExclusion(This,pID,pType,ppData) ) 

#define IArwControllerV3_ClearExclusions(This)	\
    ( (This)->lpVtbl -> ClearExclusions(This) ) 

#define IArwControllerV3_GetDetectionCount(This,totalDetections)	\
    ( (This)->lpVtbl -> GetDetectionCount(This,totalDetections) ) 

#define IArwControllerV3_ClearDetectionCountTotal(This)	\
    ( (This)->lpVtbl -> ClearDetectionCountTotal(This) ) 

#define IArwControllerV3_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IArwControllerV3_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IArwControllerV3_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IArwControllerV3_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IArwControllerV3_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IArwControllerV3_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IArwControllerV3_get_CurrentStatus(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentStatus(This,pState) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwControllerV3_INTERFACE_DEFINED__ */


#ifndef __IArwControllerEvents_INTERFACE_DEFINED__
#define __IArwControllerEvents_INTERFACE_DEFINED__

/* interface IArwControllerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC97FF29-5CE2-4897-8175-94672057E02D")
    IArwControllerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StateChangedCallback( 
            /* [in] */ _ArwState state) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ThreatDetectedCallback( 
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExclusionsUpdated( 
            /* [in] */ _ArwExclusionEventType eventType,
            /* [in] */ BSTR pID,
            /* [in] */ _ArwExclusionType ExclusionType,
            /* [in] */ BSTR pData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DetectionCountCallback( 
            /* [in] */ long totalDetections) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChangedCallback )( 
            IArwControllerEvents * This,
            /* [in] */ _ArwState state);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ThreatDetectedCallback )( 
            IArwControllerEvents * This,
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExclusionsUpdated )( 
            IArwControllerEvents * This,
            /* [in] */ _ArwExclusionEventType eventType,
            /* [in] */ BSTR pID,
            /* [in] */ _ArwExclusionType ExclusionType,
            /* [in] */ BSTR pData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DetectionCountCallback )( 
            IArwControllerEvents * This,
            /* [in] */ long totalDetections);
        
        END_INTERFACE
    } IArwControllerEventsVtbl;

    interface IArwControllerEvents
    {
        CONST_VTBL struct IArwControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwControllerEvents_StateChangedCallback(This,state)	\
    ( (This)->lpVtbl -> StateChangedCallback(This,state) ) 

#define IArwControllerEvents_ThreatDetectedCallback(This,ThreatName,ObjectName)	\
    ( (This)->lpVtbl -> ThreatDetectedCallback(This,ThreatName,ObjectName) ) 

#define IArwControllerEvents_ExclusionsUpdated(This,eventType,pID,ExclusionType,pData)	\
    ( (This)->lpVtbl -> ExclusionsUpdated(This,eventType,pID,ExclusionType,pData) ) 

#define IArwControllerEvents_DetectionCountCallback(This,totalDetections)	\
    ( (This)->lpVtbl -> DetectionCountCallback(This,totalDetections) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwControllerEvents_INTERFACE_DEFINED__ */


#ifndef __IArwControllerEventsV2_INTERFACE_DEFINED__
#define __IArwControllerEventsV2_INTERFACE_DEFINED__

/* interface IArwControllerEventsV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09F245DA-55E7-451E-BDF3-4EE44637DFF1")
    IArwControllerEventsV2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ThreatDetectedCallbackEx( 
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ThreatDetectedCallbackEx )( 
            IArwControllerEventsV2 * This,
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName);
        
        END_INTERFACE
    } IArwControllerEventsV2Vtbl;

    interface IArwControllerEventsV2
    {
        CONST_VTBL struct IArwControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwControllerEventsV2_ThreatDetectedCallbackEx(This,ThreatName,ObjectName)	\
    ( (This)->lpVtbl -> ThreatDetectedCallbackEx(This,ThreatName,ObjectName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwControllerEventsV2_INTERFACE_DEFINED__ */


#ifndef __IArwControllerEventsV3_INTERFACE_DEFINED__
#define __IArwControllerEventsV3_INTERFACE_DEFINED__

/* interface IArwControllerEventsV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwControllerEventsV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B860FC17-5606-4F3A-8AE5-E1C139D8BDE3")
    IArwControllerEventsV3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StatusChangedCallback( 
            /* [in] */ _ArwStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerEventsV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwControllerEventsV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwControllerEventsV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwControllerEventsV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwControllerEventsV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwControllerEventsV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StatusChangedCallback )( 
            IArwControllerEventsV3 * This,
            /* [in] */ _ArwStatus status);
        
        END_INTERFACE
    } IArwControllerEventsV3Vtbl;

    interface IArwControllerEventsV3
    {
        CONST_VTBL struct IArwControllerEventsV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwControllerEventsV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwControllerEventsV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwControllerEventsV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwControllerEventsV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwControllerEventsV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwControllerEventsV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwControllerEventsV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwControllerEventsV3_StatusChangedCallback(This,status)	\
    ( (This)->lpVtbl -> StatusChangedCallback(This,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwControllerEventsV3_INTERFACE_DEFINED__ */


#ifndef __IArwControllerEventsV4_INTERFACE_DEFINED__
#define __IArwControllerEventsV4_INTERFACE_DEFINED__

/* interface IArwControllerEventsV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IArwControllerEventsV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F1E58D1A-2918-4508-908A-601219B2CCC6")
    IArwControllerEventsV4 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ThreatDetectedCallbackV2( 
            /* [in] */ BSTR DetectionID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ThreatDetectedCallbackExV2( 
            /* [in] */ BSTR DetectionID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IArwControllerEventsV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArwControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArwControllerEventsV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArwControllerEventsV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArwControllerEventsV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArwControllerEventsV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArwControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArwControllerEventsV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ThreatDetectedCallbackV2 )( 
            IArwControllerEventsV4 * This,
            /* [in] */ BSTR DetectionID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ThreatDetectedCallbackExV2 )( 
            IArwControllerEventsV4 * This,
            /* [in] */ BSTR DetectionID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ BSTR ObjectName);
        
        END_INTERFACE
    } IArwControllerEventsV4Vtbl;

    interface IArwControllerEventsV4
    {
        CONST_VTBL struct IArwControllerEventsV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArwControllerEventsV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArwControllerEventsV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArwControllerEventsV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArwControllerEventsV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArwControllerEventsV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArwControllerEventsV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArwControllerEventsV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArwControllerEventsV4_ThreatDetectedCallbackV2(This,DetectionID,ThreatName,ObjectName)	\
    ( (This)->lpVtbl -> ThreatDetectedCallbackV2(This,DetectionID,ThreatName,ObjectName) ) 

#define IArwControllerEventsV4_ThreatDetectedCallbackExV2(This,DetectionID,ThreatName,ObjectName)	\
    ( (This)->lpVtbl -> ThreatDetectedCallbackExV2(This,DetectionID,ThreatName,ObjectName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArwControllerEventsV4_INTERFACE_DEFINED__ */


#ifndef ___IArwControllerEvents_DISPINTERFACE_DEFINED__
#define ___IArwControllerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IArwControllerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__IArwControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2650A9C4-A53C-4BEF-B766-7405B4D5562B")
    _IArwControllerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IArwControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IArwControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IArwControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IArwControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IArwControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IArwControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IArwControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IArwControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IArwControllerEventsVtbl;

    interface _IArwControllerEvents
    {
        CONST_VTBL struct _IArwControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IArwControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IArwControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IArwControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IArwControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IArwControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IArwControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IArwControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IArwControllerEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___IArwControllerEventsV2_DISPINTERFACE_DEFINED__
#define ___IArwControllerEventsV2_DISPINTERFACE_DEFINED__

/* dispinterface _IArwControllerEventsV2 */
/* [uuid] */ 


EXTERN_C const IID DIID__IArwControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("6357A98F-CE03-4C67-9410-00907FB21BC7")
    _IArwControllerEventsV2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IArwControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IArwControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IArwControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IArwControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IArwControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IArwControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IArwControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IArwControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IArwControllerEventsV2Vtbl;

    interface _IArwControllerEventsV2
    {
        CONST_VTBL struct _IArwControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IArwControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IArwControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IArwControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IArwControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IArwControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IArwControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IArwControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IArwControllerEventsV2_DISPINTERFACE_DEFINED__ */


#ifndef ___IArwControllerEventsV3_DISPINTERFACE_DEFINED__
#define ___IArwControllerEventsV3_DISPINTERFACE_DEFINED__

/* dispinterface _IArwControllerEventsV3 */
/* [uuid] */ 


EXTERN_C const IID DIID__IArwControllerEventsV3;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2FB37514-21FA-4B2C-94DA-1562126E9F5F")
    _IArwControllerEventsV3 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IArwControllerEventsV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IArwControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IArwControllerEventsV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IArwControllerEventsV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IArwControllerEventsV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IArwControllerEventsV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IArwControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IArwControllerEventsV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IArwControllerEventsV3Vtbl;

    interface _IArwControllerEventsV3
    {
        CONST_VTBL struct _IArwControllerEventsV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IArwControllerEventsV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IArwControllerEventsV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IArwControllerEventsV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IArwControllerEventsV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IArwControllerEventsV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IArwControllerEventsV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IArwControllerEventsV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IArwControllerEventsV3_DISPINTERFACE_DEFINED__ */


#ifndef ___IArwControllerEventsV4_DISPINTERFACE_DEFINED__
#define ___IArwControllerEventsV4_DISPINTERFACE_DEFINED__

/* dispinterface _IArwControllerEventsV4 */
/* [uuid] */ 


EXTERN_C const IID DIID__IArwControllerEventsV4;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A0EB1521-C843-47D5-88D2-5449A2F5F40B")
    _IArwControllerEventsV4 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IArwControllerEventsV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IArwControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IArwControllerEventsV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IArwControllerEventsV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IArwControllerEventsV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IArwControllerEventsV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IArwControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IArwControllerEventsV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IArwControllerEventsV4Vtbl;

    interface _IArwControllerEventsV4
    {
        CONST_VTBL struct _IArwControllerEventsV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IArwControllerEventsV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IArwControllerEventsV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IArwControllerEventsV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IArwControllerEventsV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IArwControllerEventsV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IArwControllerEventsV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IArwControllerEventsV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IArwControllerEventsV4_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ArwController;

#ifdef __cplusplus

class DECLSPEC_UUID("278637DA-FDFB-45C7-8CD8-F2D8A9199AB0")
ArwController;
#endif
#endif /* __ArwControllerCOMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


