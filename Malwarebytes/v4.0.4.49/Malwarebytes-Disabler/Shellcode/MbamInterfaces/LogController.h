

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 14:14:07 2038
 */
/* Compiler settings for C:\Users\User\source\repos\MBAMExploit\Typelibs\LogController.IDL:
    Oicf, W1, Zp8, env=Win64 (32b run), target_arch=AMD64 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __LogController_h__
#define __LogController_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ILogEntry_FWD_DEFINED__
#define __ILogEntry_FWD_DEFINED__
typedef interface ILogEntry ILogEntry;

#endif 	/* __ILogEntry_FWD_DEFINED__ */


#ifndef __ILogController_FWD_DEFINED__
#define __ILogController_FWD_DEFINED__
typedef interface ILogController ILogController;

#endif 	/* __ILogController_FWD_DEFINED__ */


#ifndef __ILogControllerEvents_FWD_DEFINED__
#define __ILogControllerEvents_FWD_DEFINED__
typedef interface ILogControllerEvents ILogControllerEvents;

#endif 	/* __ILogControllerEvents_FWD_DEFINED__ */


#ifndef ___ILogControllerEvents_FWD_DEFINED__
#define ___ILogControllerEvents_FWD_DEFINED__
typedef interface _ILogControllerEvents _ILogControllerEvents;

#endif 	/* ___ILogControllerEvents_FWD_DEFINED__ */


#ifndef __ILogControllerEntryEvents_FWD_DEFINED__
#define __ILogControllerEntryEvents_FWD_DEFINED__
typedef interface ILogControllerEntryEvents ILogControllerEntryEvents;

#endif 	/* __ILogControllerEntryEvents_FWD_DEFINED__ */


#ifndef ___ILogControllerEntryEvents_FWD_DEFINED__
#define ___ILogControllerEntryEvents_FWD_DEFINED__
typedef interface _ILogControllerEntryEvents _ILogControllerEntryEvents;

#endif 	/* ___ILogControllerEntryEvents_FWD_DEFINED__ */


#ifndef __LogController_FWD_DEFINED__
#define __LogController_FWD_DEFINED__

#ifdef __cplusplus
typedef class LogController LogController;
#else
typedef struct LogController LogController;
#endif /* __cplusplus */

#endif 	/* __LogController_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __LogControllerCOMLib_LIBRARY_DEFINED__
#define __LogControllerCOMLib_LIBRARY_DEFINED__

/* library LogControllerCOMLib */
/* [custom][custom][custom][version][uuid] */ 







typedef /* [public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_LogController_0000_0000_0001
    {
        LogLevelNone	= 0,
        LogLevelError	= 1,
        LogLevelWarning	= 2,
        LogLevelInfo	= 3,
        LogLevelDebug	= 4,
        LogLevelTrace	= 5
    } 	_LogLevel;


EXTERN_C const IID LIBID_LogControllerCOMLib;

#ifndef __ILogEntry_INTERFACE_DEFINED__
#define __ILogEntry_INTERFACE_DEFINED__

/* interface ILogEntry */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ILogEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("106E3995-72F9-458A-A317-9AFF9E45A1F0")
    ILogEntry : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DateTime( 
            /* [retval][out] */ DATE *pDateTime) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DateTime( 
            /* [in] */ DATE pDateTime) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Millisecond( 
            /* [retval][out] */ short *pMillis) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Millisecond( 
            /* [in] */ short pMillis) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TickCount( 
            /* [retval][out] */ INT64 *pTickCount) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TickCount( 
            /* [in] */ INT64 pTickCount) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ProcessId( 
            /* [retval][out] */ long *pID) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ProcessId( 
            /* [in] */ long pID) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreadId( 
            /* [retval][out] */ long *pID) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ThreadId( 
            /* [in] */ long pID) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionName( 
            /* [retval][out] */ BSTR *ppName) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FunctionName( 
            /* [in] */ BSTR ppName) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *ppName) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ BSTR ppName) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LineNumber( 
            /* [retval][out] */ long *pLineNumber) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LineNumber( 
            /* [in] */ long pLineNumber) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LogLevel( 
            /* [retval][out] */ _LogLevel *pLogLevel) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LogLevel( 
            /* [in] */ _LogLevel pLogLevel) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ContextTag( 
            /* [retval][out] */ BSTR *ppContextTag) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ContextTag( 
            /* [in] */ BSTR ppContextTag) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Message( 
            /* [retval][out] */ BSTR *ppMsg) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Message( 
            /* [in] */ BSTR ppMsg) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ILogEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILogEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILogEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILogEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILogEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILogEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILogEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILogEntry * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DateTime )( 
            ILogEntry * This,
            /* [retval][out] */ DATE *pDateTime);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DateTime )( 
            ILogEntry * This,
            /* [in] */ DATE pDateTime);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Millisecond )( 
            ILogEntry * This,
            /* [retval][out] */ short *pMillis);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Millisecond )( 
            ILogEntry * This,
            /* [in] */ short pMillis);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TickCount )( 
            ILogEntry * This,
            /* [retval][out] */ INT64 *pTickCount);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TickCount )( 
            ILogEntry * This,
            /* [in] */ INT64 pTickCount);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessId )( 
            ILogEntry * This,
            /* [retval][out] */ long *pID);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProcessId )( 
            ILogEntry * This,
            /* [in] */ long pID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadId )( 
            ILogEntry * This,
            /* [retval][out] */ long *pID);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadId )( 
            ILogEntry * This,
            /* [in] */ long pID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionName )( 
            ILogEntry * This,
            /* [retval][out] */ BSTR *ppName);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FunctionName )( 
            ILogEntry * This,
            /* [in] */ BSTR ppName);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            ILogEntry * This,
            /* [retval][out] */ BSTR *ppName);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            ILogEntry * This,
            /* [in] */ BSTR ppName);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineNumber )( 
            ILogEntry * This,
            /* [retval][out] */ long *pLineNumber);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineNumber )( 
            ILogEntry * This,
            /* [in] */ long pLineNumber);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LogLevel )( 
            ILogEntry * This,
            /* [retval][out] */ _LogLevel *pLogLevel);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LogLevel )( 
            ILogEntry * This,
            /* [in] */ _LogLevel pLogLevel);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContextTag )( 
            ILogEntry * This,
            /* [retval][out] */ BSTR *ppContextTag);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContextTag )( 
            ILogEntry * This,
            /* [in] */ BSTR ppContextTag);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Message )( 
            ILogEntry * This,
            /* [retval][out] */ BSTR *ppMsg);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Message )( 
            ILogEntry * This,
            /* [in] */ BSTR ppMsg);
        
        END_INTERFACE
    } ILogEntryVtbl;

    interface ILogEntry
    {
        CONST_VTBL struct ILogEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILogEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILogEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILogEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILogEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILogEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILogEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILogEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILogEntry_get_DateTime(This,pDateTime)	\
    ( (This)->lpVtbl -> get_DateTime(This,pDateTime) ) 

#define ILogEntry_put_DateTime(This,pDateTime)	\
    ( (This)->lpVtbl -> put_DateTime(This,pDateTime) ) 

#define ILogEntry_get_Millisecond(This,pMillis)	\
    ( (This)->lpVtbl -> get_Millisecond(This,pMillis) ) 

#define ILogEntry_put_Millisecond(This,pMillis)	\
    ( (This)->lpVtbl -> put_Millisecond(This,pMillis) ) 

#define ILogEntry_get_TickCount(This,pTickCount)	\
    ( (This)->lpVtbl -> get_TickCount(This,pTickCount) ) 

#define ILogEntry_put_TickCount(This,pTickCount)	\
    ( (This)->lpVtbl -> put_TickCount(This,pTickCount) ) 

#define ILogEntry_get_ProcessId(This,pID)	\
    ( (This)->lpVtbl -> get_ProcessId(This,pID) ) 

#define ILogEntry_put_ProcessId(This,pID)	\
    ( (This)->lpVtbl -> put_ProcessId(This,pID) ) 

#define ILogEntry_get_ThreadId(This,pID)	\
    ( (This)->lpVtbl -> get_ThreadId(This,pID) ) 

#define ILogEntry_put_ThreadId(This,pID)	\
    ( (This)->lpVtbl -> put_ThreadId(This,pID) ) 

#define ILogEntry_get_FunctionName(This,ppName)	\
    ( (This)->lpVtbl -> get_FunctionName(This,ppName) ) 

#define ILogEntry_put_FunctionName(This,ppName)	\
    ( (This)->lpVtbl -> put_FunctionName(This,ppName) ) 

#define ILogEntry_get_FileName(This,ppName)	\
    ( (This)->lpVtbl -> get_FileName(This,ppName) ) 

#define ILogEntry_put_FileName(This,ppName)	\
    ( (This)->lpVtbl -> put_FileName(This,ppName) ) 

#define ILogEntry_get_LineNumber(This,pLineNumber)	\
    ( (This)->lpVtbl -> get_LineNumber(This,pLineNumber) ) 

#define ILogEntry_put_LineNumber(This,pLineNumber)	\
    ( (This)->lpVtbl -> put_LineNumber(This,pLineNumber) ) 

#define ILogEntry_get_LogLevel(This,pLogLevel)	\
    ( (This)->lpVtbl -> get_LogLevel(This,pLogLevel) ) 

#define ILogEntry_put_LogLevel(This,pLogLevel)	\
    ( (This)->lpVtbl -> put_LogLevel(This,pLogLevel) ) 

#define ILogEntry_get_ContextTag(This,ppContextTag)	\
    ( (This)->lpVtbl -> get_ContextTag(This,ppContextTag) ) 

#define ILogEntry_put_ContextTag(This,ppContextTag)	\
    ( (This)->lpVtbl -> put_ContextTag(This,ppContextTag) ) 

#define ILogEntry_get_Message(This,ppMsg)	\
    ( (This)->lpVtbl -> get_Message(This,ppMsg) ) 

#define ILogEntry_put_Message(This,ppMsg)	\
    ( (This)->lpVtbl -> put_Message(This,ppMsg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILogEntry_INTERFACE_DEFINED__ */


#ifndef __ILogController_INTERFACE_DEFINED__
#define __ILogController_INTERFACE_DEFINED__

/* interface ILogController */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ILogController;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8C842243-BDAD-4A93-B282-93E3FCBC1CA4")
    ILogController : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddEntry( 
            /* [in] */ ILogEntry *pLogEntry) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetEmptyEntry( 
            /* [retval][out] */ ILogEntry **ppLogEntry) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddEntry2( 
            /* [in] */ DATE DateTime,
            /* [in] */ short milliseconds,
            /* [in] */ INT64 TickCount,
            /* [in] */ long ProcessId,
            /* [in] */ long ThreadId,
            /* [in] */ BSTR pFunctionName,
            /* [in] */ BSTR pFileName,
            /* [in] */ long LineNumber,
            /* [in] */ _LogLevel LogLevel,
            /* [in] */ BSTR pContextTag,
            /* [in] */ BSTR pMsg) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR pDataPath,
            /* [in] */ BSTR pFilePath,
            /* [in] */ long maxFileSize,
            /* [in] */ long maxNumBackups) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( 
            /* [in] */ long timeoutMs) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_MaxLogLevel( 
            /* [in] */ _LogLevel pLogLevel) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MaxLogLevel( 
            /* [retval][out] */ _LogLevel *pLogLevel) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LogFilePath( 
            /* [retval][out] */ BSTR *ppLogFilePath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ChangeLogFilePath( 
            /* [in] */ BSTR pNewLogFilePath) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ILogControllerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILogController * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILogController * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILogController * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILogController * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILogController * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILogController * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILogController * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddEntry )( 
            ILogController * This,
            /* [in] */ ILogEntry *pLogEntry);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEmptyEntry )( 
            ILogController * This,
            /* [retval][out] */ ILogEntry **ppLogEntry);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddEntry2 )( 
            ILogController * This,
            /* [in] */ DATE DateTime,
            /* [in] */ short milliseconds,
            /* [in] */ INT64 TickCount,
            /* [in] */ long ProcessId,
            /* [in] */ long ThreadId,
            /* [in] */ BSTR pFunctionName,
            /* [in] */ BSTR pFileName,
            /* [in] */ long LineNumber,
            /* [in] */ _LogLevel LogLevel,
            /* [in] */ BSTR pContextTag,
            /* [in] */ BSTR pMsg);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            ILogController * This,
            /* [in] */ BSTR pDataPath,
            /* [in] */ BSTR pFilePath,
            /* [in] */ long maxFileSize,
            /* [in] */ long maxNumBackups);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ILogController * This,
            /* [in] */ long timeoutMs);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxLogLevel )( 
            ILogController * This,
            /* [in] */ _LogLevel pLogLevel);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxLogLevel )( 
            ILogController * This,
            /* [retval][out] */ _LogLevel *pLogLevel);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LogFilePath )( 
            ILogController * This,
            /* [retval][out] */ BSTR *ppLogFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ChangeLogFilePath )( 
            ILogController * This,
            /* [in] */ BSTR pNewLogFilePath);
        
        END_INTERFACE
    } ILogControllerVtbl;

    interface ILogController
    {
        CONST_VTBL struct ILogControllerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILogController_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILogController_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILogController_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILogController_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILogController_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILogController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILogController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILogController_AddEntry(This,pLogEntry)	\
    ( (This)->lpVtbl -> AddEntry(This,pLogEntry) ) 

#define ILogController_GetEmptyEntry(This,ppLogEntry)	\
    ( (This)->lpVtbl -> GetEmptyEntry(This,ppLogEntry) ) 

#define ILogController_AddEntry2(This,DateTime,milliseconds,TickCount,ProcessId,ThreadId,pFunctionName,pFileName,LineNumber,LogLevel,pContextTag,pMsg)	\
    ( (This)->lpVtbl -> AddEntry2(This,DateTime,milliseconds,TickCount,ProcessId,ThreadId,pFunctionName,pFileName,LineNumber,LogLevel,pContextTag,pMsg) ) 

#define ILogController_Start(This,pDataPath,pFilePath,maxFileSize,maxNumBackups)	\
    ( (This)->lpVtbl -> Start(This,pDataPath,pFilePath,maxFileSize,maxNumBackups) ) 

#define ILogController_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define ILogController_put_MaxLogLevel(This,pLogLevel)	\
    ( (This)->lpVtbl -> put_MaxLogLevel(This,pLogLevel) ) 

#define ILogController_get_MaxLogLevel(This,pLogLevel)	\
    ( (This)->lpVtbl -> get_MaxLogLevel(This,pLogLevel) ) 

#define ILogController_get_LogFilePath(This,ppLogFilePath)	\
    ( (This)->lpVtbl -> get_LogFilePath(This,ppLogFilePath) ) 

#define ILogController_ChangeLogFilePath(This,pNewLogFilePath)	\
    ( (This)->lpVtbl -> ChangeLogFilePath(This,pNewLogFilePath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILogController_INTERFACE_DEFINED__ */


#ifndef __ILogControllerEvents_INTERFACE_DEFINED__
#define __ILogControllerEvents_INTERFACE_DEFINED__

/* interface ILogControllerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ILogControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DE35F2CA-6335-49BA-8E86-F6E246CFCEA6")
    ILogControllerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE MaxLogLevelChanged( 
            /* [in] */ _LogLevel LogLevel) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE LogFilePathChanged( 
            /* [in] */ BSTR pNewLogFilePath) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ILogControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILogControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILogControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILogControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILogControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILogControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILogControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILogControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MaxLogLevelChanged )( 
            ILogControllerEvents * This,
            /* [in] */ _LogLevel LogLevel);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *LogFilePathChanged )( 
            ILogControllerEvents * This,
            /* [in] */ BSTR pNewLogFilePath);
        
        END_INTERFACE
    } ILogControllerEventsVtbl;

    interface ILogControllerEvents
    {
        CONST_VTBL struct ILogControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILogControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILogControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILogControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILogControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILogControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILogControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILogControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILogControllerEvents_MaxLogLevelChanged(This,LogLevel)	\
    ( (This)->lpVtbl -> MaxLogLevelChanged(This,LogLevel) ) 

#define ILogControllerEvents_LogFilePathChanged(This,pNewLogFilePath)	\
    ( (This)->lpVtbl -> LogFilePathChanged(This,pNewLogFilePath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILogControllerEvents_INTERFACE_DEFINED__ */


#ifndef ___ILogControllerEvents_DISPINTERFACE_DEFINED__
#define ___ILogControllerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _ILogControllerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__ILogControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B3B24818-1CC9-4825-96A9-1DB596E079C8")
    _ILogControllerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _ILogControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ILogControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ILogControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ILogControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ILogControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ILogControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ILogControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ILogControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _ILogControllerEventsVtbl;

    interface _ILogControllerEvents
    {
        CONST_VTBL struct _ILogControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ILogControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ILogControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ILogControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ILogControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ILogControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ILogControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ILogControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___ILogControllerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __ILogControllerEntryEvents_INTERFACE_DEFINED__
#define __ILogControllerEntryEvents_INTERFACE_DEFINED__

/* interface ILogControllerEntryEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ILogControllerEntryEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40D6E119-3897-41B3-AC5D-5FE6F088C97B")
    ILogControllerEntryEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ProcessEntry( 
            /* [in] */ ILogEntry *pLogEntry) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ILogControllerEntryEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILogControllerEntryEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILogControllerEntryEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILogControllerEntryEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILogControllerEntryEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILogControllerEntryEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILogControllerEntryEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILogControllerEntryEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ProcessEntry )( 
            ILogControllerEntryEvents * This,
            /* [in] */ ILogEntry *pLogEntry);
        
        END_INTERFACE
    } ILogControllerEntryEventsVtbl;

    interface ILogControllerEntryEvents
    {
        CONST_VTBL struct ILogControllerEntryEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILogControllerEntryEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILogControllerEntryEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILogControllerEntryEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILogControllerEntryEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILogControllerEntryEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILogControllerEntryEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILogControllerEntryEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILogControllerEntryEvents_ProcessEntry(This,pLogEntry)	\
    ( (This)->lpVtbl -> ProcessEntry(This,pLogEntry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILogControllerEntryEvents_INTERFACE_DEFINED__ */


#ifndef ___ILogControllerEntryEvents_DISPINTERFACE_DEFINED__
#define ___ILogControllerEntryEvents_DISPINTERFACE_DEFINED__

/* dispinterface _ILogControllerEntryEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__ILogControllerEntryEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("F927AD37-BA5F-4B86-AE22-FE2371B12955")
    _ILogControllerEntryEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _ILogControllerEntryEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ILogControllerEntryEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ILogControllerEntryEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ILogControllerEntryEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ILogControllerEntryEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ILogControllerEntryEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ILogControllerEntryEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ILogControllerEntryEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _ILogControllerEntryEventsVtbl;

    interface _ILogControllerEntryEvents
    {
        CONST_VTBL struct _ILogControllerEntryEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ILogControllerEntryEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ILogControllerEntryEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ILogControllerEntryEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ILogControllerEntryEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ILogControllerEntryEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ILogControllerEntryEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ILogControllerEntryEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___ILogControllerEntryEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_LogController;

#ifdef __cplusplus

class DECLSPEC_UUID("251AD013-20AD-4C3F-8FE2-F66A429B4819")
LogController;
#endif
#endif /* __LogControllerCOMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


