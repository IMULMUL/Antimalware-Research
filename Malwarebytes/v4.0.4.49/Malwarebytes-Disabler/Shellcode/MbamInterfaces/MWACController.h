

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 14:14:07 2038
 */
/* Compiler settings for C:\Users\User\source\repos\MBAMExploit\Typelibs\MWACController.IDL:
    Oicf, W1, Zp8, env=Win64 (32b run), target_arch=AMD64 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#include "LicenseController.h"
#include "LogController.h"
#include "TelemetryController.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __MWACController_h__
#define __MWACController_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IMWACController_FWD_DEFINED__
#define __IMWACController_FWD_DEFINED__
typedef interface IMWACController IMWACController;

#endif 	/* __IMWACController_FWD_DEFINED__ */


#ifndef __IMWACControllerV2_FWD_DEFINED__
#define __IMWACControllerV2_FWD_DEFINED__
typedef interface IMWACControllerV2 IMWACControllerV2;

#endif 	/* __IMWACControllerV2_FWD_DEFINED__ */


#ifndef __IMWACControllerV3_FWD_DEFINED__
#define __IMWACControllerV3_FWD_DEFINED__
typedef interface IMWACControllerV3 IMWACControllerV3;

#endif 	/* __IMWACControllerV3_FWD_DEFINED__ */


#ifndef __IMWACControllerV4_FWD_DEFINED__
#define __IMWACControllerV4_FWD_DEFINED__
typedef interface IMWACControllerV4 IMWACControllerV4;

#endif 	/* __IMWACControllerV4_FWD_DEFINED__ */


#ifndef __IMWACControllerV5_FWD_DEFINED__
#define __IMWACControllerV5_FWD_DEFINED__
typedef interface IMWACControllerV5 IMWACControllerV5;

#endif 	/* __IMWACControllerV5_FWD_DEFINED__ */


#ifndef __IMWACControllerV6_FWD_DEFINED__
#define __IMWACControllerV6_FWD_DEFINED__
typedef interface IMWACControllerV6 IMWACControllerV6;

#endif 	/* __IMWACControllerV6_FWD_DEFINED__ */


#ifndef __IMWACControllerEvents_FWD_DEFINED__
#define __IMWACControllerEvents_FWD_DEFINED__
typedef interface IMWACControllerEvents IMWACControllerEvents;

#endif 	/* __IMWACControllerEvents_FWD_DEFINED__ */


#ifndef ___IMWACControllerEvents_FWD_DEFINED__
#define ___IMWACControllerEvents_FWD_DEFINED__
typedef interface _IMWACControllerEvents _IMWACControllerEvents;

#endif 	/* ___IMWACControllerEvents_FWD_DEFINED__ */


#ifndef __IMWACControllerEventsV2_FWD_DEFINED__
#define __IMWACControllerEventsV2_FWD_DEFINED__
typedef interface IMWACControllerEventsV2 IMWACControllerEventsV2;

#endif 	/* __IMWACControllerEventsV2_FWD_DEFINED__ */


#ifndef ___IMWACControllerEventsV2_FWD_DEFINED__
#define ___IMWACControllerEventsV2_FWD_DEFINED__
typedef interface _IMWACControllerEventsV2 _IMWACControllerEventsV2;

#endif 	/* ___IMWACControllerEventsV2_FWD_DEFINED__ */


#ifndef __IMWACControllerEventsV3_FWD_DEFINED__
#define __IMWACControllerEventsV3_FWD_DEFINED__
typedef interface IMWACControllerEventsV3 IMWACControllerEventsV3;

#endif 	/* __IMWACControllerEventsV3_FWD_DEFINED__ */


#ifndef ___IMWACControllerEventsV3_FWD_DEFINED__
#define ___IMWACControllerEventsV3_FWD_DEFINED__
typedef interface _IMWACControllerEventsV3 _IMWACControllerEventsV3;

#endif 	/* ___IMWACControllerEventsV3_FWD_DEFINED__ */


#ifndef __IMWACControllerEventsV4_FWD_DEFINED__
#define __IMWACControllerEventsV4_FWD_DEFINED__
typedef interface IMWACControllerEventsV4 IMWACControllerEventsV4;

#endif 	/* __IMWACControllerEventsV4_FWD_DEFINED__ */


#ifndef ___IMWACControllerEventsV4_FWD_DEFINED__
#define ___IMWACControllerEventsV4_FWD_DEFINED__
typedef interface _IMWACControllerEventsV4 _IMWACControllerEventsV4;

#endif 	/* ___IMWACControllerEventsV4_FWD_DEFINED__ */


#ifndef __MWACController_FWD_DEFINED__
#define __MWACController_FWD_DEFINED__

#ifdef __cplusplus
typedef class MWACController MWACController;
#else
typedef struct MWACController MWACController;
#endif /* __cplusplus */

#endif 	/* __MWACController_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __MWACControllerCOMLib_LIBRARY_DEFINED__
#define __MWACControllerCOMLib_LIBRARY_DEFINED__

/* library MWACControllerCOMLib */
/* [custom][custom][custom][version][uuid] */ 















typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_MWACController_0000_0000_0001
    {
        MwacStateIdle	= 0,
        MwacStateEnabled	= 1,
        MwacStateDisabled	= 2,
        MwacStateError	= 3,
        MwacStateNotAvailable	= 4,
        MwacStateNotSupported	= 5
    } 	_MwacState;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_MWACController_0000_0000_0002
    {
        MwacExclusionByProcessPath	= 0,
        MwacExclusionByDomain	= 1,
        MwacExclusionByIP	= 2
    } 	_MwacExclusionType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_MWACController_0000_0000_0003
    {
        MwacExclusionAdded	= 0,
        MwacExclusionRemoved	= 1,
        MwacExclusionUpdated	= 2,
        MwacExclusionsCleared	= 3
    } 	_ExclusionEventType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_MWACController_0001_0001_0001
    {
        MwacManualStop	= 0,
        MwacSystemStop	= 1
    } 	_MwacStopType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_MWACController_0001_0002_0001
    {
        MwacStatusInactive	= 0,
        MwacStatusInitializing	= 1,
        MwacStatusStarting	= 2,
        MwacStatusStarted	= 3,
        MwacStatusStopping	= 4,
        MwacStatusStopped	= 5,
        MwacStatusError	= 6,
        MwacStatusNeedsReboot	= 7
    } 	_MwacStatus;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_MWACController_0001_0003_0001
    {
        DisableAllFeatures	= 0,
        EnableUrlInspection	= 1
    } 	_FeatureFlagType;


EXTERN_C const IID LIBID_MWACControllerCOMLib;

#ifndef __IMWACController_INTERFACE_DEFINED__
#define __IMWACController_INTERFACE_DEFINED__

/* interface IMWACController */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACController;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B9F73DD6-F2A4-40F8-9109-67F6BB8D3704")
    IMWACController : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( 
            /* [in] */ long timeoutMs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddMwacExclusion( 
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddMwacExclusionEx( 
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveMwacExclusion( 
            /* [in] */ BSTR pID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateMwacExclusion( 
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNumMwacExclusions( 
            /* [out] */ long *pNumExclusions) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetMwacExclusionIDs( 
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetMwacExclusionID( 
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearMwacExclusions( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetBlockCounts( 
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearBlockCountTotals( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartProtection( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopProtection( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE BrowserOnlyMode( 
            /* [in] */ long bEnable) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentState( 
            /* [retval][out] */ _MwacState *pState) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PrepareUpdate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FinishUpdate( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACController * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACController * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACController * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACController * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACController * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACController * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACController * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IMWACController * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMWACController * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusion )( 
            IMWACController * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusionEx )( 
            IMWACController * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMwacExclusion )( 
            IMWACController * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMwacExclusion )( 
            IMWACController * This,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumMwacExclusions )( 
            IMWACController * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionIDs )( 
            IMWACController * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionID )( 
            IMWACController * This,
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearMwacExclusions )( 
            IMWACController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockCounts )( 
            IMWACController * This,
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearBlockCountTotals )( 
            IMWACController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IMWACController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IMWACController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BrowserOnlyMode )( 
            IMWACController * This,
            /* [in] */ long bEnable);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IMWACController * This,
            /* [retval][out] */ _MwacState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IMWACController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IMWACController * This);
        
        END_INTERFACE
    } IMWACControllerVtbl;

    interface IMWACController
    {
        CONST_VTBL struct IMWACControllerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACController_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACController_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACController_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACController_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACController_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACController_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACController_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IMWACController_AddMwacExclusion(This,exclusionType,Data)	\
    ( (This)->lpVtbl -> AddMwacExclusion(This,exclusionType,Data) ) 

#define IMWACController_AddMwacExclusionEx(This,exclusionType,path,ppID)	\
    ( (This)->lpVtbl -> AddMwacExclusionEx(This,exclusionType,path,ppID) ) 

#define IMWACController_RemoveMwacExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveMwacExclusion(This,pID) ) 

#define IMWACController_UpdateMwacExclusion(This,pID,exclusionType,path)	\
    ( (This)->lpVtbl -> UpdateMwacExclusion(This,pID,exclusionType,path) ) 

#define IMWACController_GetNumMwacExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumMwacExclusions(This,pNumExclusions) ) 

#define IMWACController_GetMwacExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetMwacExclusionIDs(This,ppExclusionIDs) ) 

#define IMWACController_GetMwacExclusionID(This,pID,pExclusionType,ppPath)	\
    ( (This)->lpVtbl -> GetMwacExclusionID(This,pID,pExclusionType,ppPath) ) 

#define IMWACController_ClearMwacExclusions(This)	\
    ( (This)->lpVtbl -> ClearMwacExclusions(This) ) 

#define IMWACController_GetBlockCounts(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> GetBlockCounts(This,countIP,countDomain,countProcess,total) ) 

#define IMWACController_ClearBlockCountTotals(This)	\
    ( (This)->lpVtbl -> ClearBlockCountTotals(This) ) 

#define IMWACController_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IMWACController_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IMWACController_BrowserOnlyMode(This,bEnable)	\
    ( (This)->lpVtbl -> BrowserOnlyMode(This,bEnable) ) 

#define IMWACController_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IMWACController_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IMWACController_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACController_INTERFACE_DEFINED__ */


#ifndef __IMWACControllerV2_INTERFACE_DEFINED__
#define __IMWACControllerV2_INTERFACE_DEFINED__

/* interface IMWACControllerV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6EC225D5-FD37-4F9B-B80F-09FAE36103AE")
    IMWACControllerV2 : public IMWACController
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartV2( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IMWACControllerV2 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMWACControllerV2 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusion )( 
            IMWACControllerV2 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusionEx )( 
            IMWACControllerV2 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMwacExclusion )( 
            IMWACControllerV2 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMwacExclusion )( 
            IMWACControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumMwacExclusions )( 
            IMWACControllerV2 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionIDs )( 
            IMWACControllerV2 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionID )( 
            IMWACControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearMwacExclusions )( 
            IMWACControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockCounts )( 
            IMWACControllerV2 * This,
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearBlockCountTotals )( 
            IMWACControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IMWACControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IMWACControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BrowserOnlyMode )( 
            IMWACControllerV2 * This,
            /* [in] */ long bEnable);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IMWACControllerV2 * This,
            /* [retval][out] */ _MwacState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IMWACControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IMWACControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IMWACControllerV2 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        END_INTERFACE
    } IMWACControllerV2Vtbl;

    interface IMWACControllerV2
    {
        CONST_VTBL struct IMWACControllerV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerV2_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV2_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IMWACControllerV2_AddMwacExclusion(This,exclusionType,Data)	\
    ( (This)->lpVtbl -> AddMwacExclusion(This,exclusionType,Data) ) 

#define IMWACControllerV2_AddMwacExclusionEx(This,exclusionType,path,ppID)	\
    ( (This)->lpVtbl -> AddMwacExclusionEx(This,exclusionType,path,ppID) ) 

#define IMWACControllerV2_RemoveMwacExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveMwacExclusion(This,pID) ) 

#define IMWACControllerV2_UpdateMwacExclusion(This,pID,exclusionType,path)	\
    ( (This)->lpVtbl -> UpdateMwacExclusion(This,pID,exclusionType,path) ) 

#define IMWACControllerV2_GetNumMwacExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumMwacExclusions(This,pNumExclusions) ) 

#define IMWACControllerV2_GetMwacExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetMwacExclusionIDs(This,ppExclusionIDs) ) 

#define IMWACControllerV2_GetMwacExclusionID(This,pID,pExclusionType,ppPath)	\
    ( (This)->lpVtbl -> GetMwacExclusionID(This,pID,pExclusionType,ppPath) ) 

#define IMWACControllerV2_ClearMwacExclusions(This)	\
    ( (This)->lpVtbl -> ClearMwacExclusions(This) ) 

#define IMWACControllerV2_GetBlockCounts(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> GetBlockCounts(This,countIP,countDomain,countProcess,total) ) 

#define IMWACControllerV2_ClearBlockCountTotals(This)	\
    ( (This)->lpVtbl -> ClearBlockCountTotals(This) ) 

#define IMWACControllerV2_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IMWACControllerV2_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IMWACControllerV2_BrowserOnlyMode(This,bEnable)	\
    ( (This)->lpVtbl -> BrowserOnlyMode(This,bEnable) ) 

#define IMWACControllerV2_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IMWACControllerV2_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IMWACControllerV2_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IMWACControllerV2_StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerV2_INTERFACE_DEFINED__ */


#ifndef __IMWACControllerV3_INTERFACE_DEFINED__
#define __IMWACControllerV3_INTERFACE_DEFINED__

/* interface IMWACControllerV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F1EB48-7803-4D84-B07F-255FE87083F4")
    IMWACControllerV3 : public IMWACControllerV2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopV2( 
            /* [in] */ long timeoutMs,
            /* [in] */ _MwacStopType stopType) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IMWACControllerV3 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMWACControllerV3 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusion )( 
            IMWACControllerV3 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusionEx )( 
            IMWACControllerV3 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMwacExclusion )( 
            IMWACControllerV3 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMwacExclusion )( 
            IMWACControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumMwacExclusions )( 
            IMWACControllerV3 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionIDs )( 
            IMWACControllerV3 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionID )( 
            IMWACControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearMwacExclusions )( 
            IMWACControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockCounts )( 
            IMWACControllerV3 * This,
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearBlockCountTotals )( 
            IMWACControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IMWACControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IMWACControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BrowserOnlyMode )( 
            IMWACControllerV3 * This,
            /* [in] */ long bEnable);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IMWACControllerV3 * This,
            /* [retval][out] */ _MwacState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IMWACControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IMWACControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IMWACControllerV3 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IMWACControllerV3 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _MwacStopType stopType);
        
        END_INTERFACE
    } IMWACControllerV3Vtbl;

    interface IMWACControllerV3
    {
        CONST_VTBL struct IMWACControllerV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerV3_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV3_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IMWACControllerV3_AddMwacExclusion(This,exclusionType,Data)	\
    ( (This)->lpVtbl -> AddMwacExclusion(This,exclusionType,Data) ) 

#define IMWACControllerV3_AddMwacExclusionEx(This,exclusionType,path,ppID)	\
    ( (This)->lpVtbl -> AddMwacExclusionEx(This,exclusionType,path,ppID) ) 

#define IMWACControllerV3_RemoveMwacExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveMwacExclusion(This,pID) ) 

#define IMWACControllerV3_UpdateMwacExclusion(This,pID,exclusionType,path)	\
    ( (This)->lpVtbl -> UpdateMwacExclusion(This,pID,exclusionType,path) ) 

#define IMWACControllerV3_GetNumMwacExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumMwacExclusions(This,pNumExclusions) ) 

#define IMWACControllerV3_GetMwacExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetMwacExclusionIDs(This,ppExclusionIDs) ) 

#define IMWACControllerV3_GetMwacExclusionID(This,pID,pExclusionType,ppPath)	\
    ( (This)->lpVtbl -> GetMwacExclusionID(This,pID,pExclusionType,ppPath) ) 

#define IMWACControllerV3_ClearMwacExclusions(This)	\
    ( (This)->lpVtbl -> ClearMwacExclusions(This) ) 

#define IMWACControllerV3_GetBlockCounts(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> GetBlockCounts(This,countIP,countDomain,countProcess,total) ) 

#define IMWACControllerV3_ClearBlockCountTotals(This)	\
    ( (This)->lpVtbl -> ClearBlockCountTotals(This) ) 

#define IMWACControllerV3_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IMWACControllerV3_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IMWACControllerV3_BrowserOnlyMode(This,bEnable)	\
    ( (This)->lpVtbl -> BrowserOnlyMode(This,bEnable) ) 

#define IMWACControllerV3_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IMWACControllerV3_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IMWACControllerV3_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IMWACControllerV3_StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild) ) 


#define IMWACControllerV3_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerV3_INTERFACE_DEFINED__ */


#ifndef __IMWACControllerV4_INTERFACE_DEFINED__
#define __IMWACControllerV4_INTERFACE_DEFINED__

/* interface IMWACControllerV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DD3CFEBD-3B8E-4651-BB7C-537D1F03E59C")
    IMWACControllerV4 : public IMWACControllerV3
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartV3( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentStatus( 
            /* [retval][out] */ _MwacStatus *pStatus) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IMWACControllerV4 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMWACControllerV4 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusion )( 
            IMWACControllerV4 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusionEx )( 
            IMWACControllerV4 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMwacExclusion )( 
            IMWACControllerV4 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMwacExclusion )( 
            IMWACControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumMwacExclusions )( 
            IMWACControllerV4 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionIDs )( 
            IMWACControllerV4 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionID )( 
            IMWACControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearMwacExclusions )( 
            IMWACControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockCounts )( 
            IMWACControllerV4 * This,
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearBlockCountTotals )( 
            IMWACControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IMWACControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IMWACControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BrowserOnlyMode )( 
            IMWACControllerV4 * This,
            /* [in] */ long bEnable);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IMWACControllerV4 * This,
            /* [retval][out] */ _MwacState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IMWACControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IMWACControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IMWACControllerV4 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IMWACControllerV4 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _MwacStopType stopType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IMWACControllerV4 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentStatus )( 
            IMWACControllerV4 * This,
            /* [retval][out] */ _MwacStatus *pStatus);
        
        END_INTERFACE
    } IMWACControllerV4Vtbl;

    interface IMWACControllerV4
    {
        CONST_VTBL struct IMWACControllerV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerV4_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV4_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IMWACControllerV4_AddMwacExclusion(This,exclusionType,Data)	\
    ( (This)->lpVtbl -> AddMwacExclusion(This,exclusionType,Data) ) 

#define IMWACControllerV4_AddMwacExclusionEx(This,exclusionType,path,ppID)	\
    ( (This)->lpVtbl -> AddMwacExclusionEx(This,exclusionType,path,ppID) ) 

#define IMWACControllerV4_RemoveMwacExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveMwacExclusion(This,pID) ) 

#define IMWACControllerV4_UpdateMwacExclusion(This,pID,exclusionType,path)	\
    ( (This)->lpVtbl -> UpdateMwacExclusion(This,pID,exclusionType,path) ) 

#define IMWACControllerV4_GetNumMwacExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumMwacExclusions(This,pNumExclusions) ) 

#define IMWACControllerV4_GetMwacExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetMwacExclusionIDs(This,ppExclusionIDs) ) 

#define IMWACControllerV4_GetMwacExclusionID(This,pID,pExclusionType,ppPath)	\
    ( (This)->lpVtbl -> GetMwacExclusionID(This,pID,pExclusionType,ppPath) ) 

#define IMWACControllerV4_ClearMwacExclusions(This)	\
    ( (This)->lpVtbl -> ClearMwacExclusions(This) ) 

#define IMWACControllerV4_GetBlockCounts(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> GetBlockCounts(This,countIP,countDomain,countProcess,total) ) 

#define IMWACControllerV4_ClearBlockCountTotals(This)	\
    ( (This)->lpVtbl -> ClearBlockCountTotals(This) ) 

#define IMWACControllerV4_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IMWACControllerV4_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IMWACControllerV4_BrowserOnlyMode(This,bEnable)	\
    ( (This)->lpVtbl -> BrowserOnlyMode(This,bEnable) ) 

#define IMWACControllerV4_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IMWACControllerV4_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IMWACControllerV4_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IMWACControllerV4_StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild) ) 


#define IMWACControllerV4_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IMWACControllerV4_StartV3(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV4_get_CurrentStatus(This,pStatus)	\
    ( (This)->lpVtbl -> get_CurrentStatus(This,pStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerV4_INTERFACE_DEFINED__ */


#ifndef __IMWACControllerV5_INTERFACE_DEFINED__
#define __IMWACControllerV5_INTERFACE_DEFINED__

/* interface IMWACControllerV5 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerV5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9704115C-F54E-4D64-8554-0CAF8BF33B1B")
    IMWACControllerV5 : public IMWACControllerV4
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartV4( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMWACControllerV5 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusion )( 
            IMWACControllerV5 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusionEx )( 
            IMWACControllerV5 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMwacExclusion )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMwacExclusion )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumMwacExclusions )( 
            IMWACControllerV5 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionIDs )( 
            IMWACControllerV5 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionID )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearMwacExclusions )( 
            IMWACControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockCounts )( 
            IMWACControllerV5 * This,
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearBlockCountTotals )( 
            IMWACControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IMWACControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IMWACControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BrowserOnlyMode )( 
            IMWACControllerV5 * This,
            /* [in] */ long bEnable);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IMWACControllerV5 * This,
            /* [retval][out] */ _MwacState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IMWACControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IMWACControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IMWACControllerV5 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _MwacStopType stopType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentStatus )( 
            IMWACControllerV5 * This,
            /* [retval][out] */ _MwacStatus *pStatus);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV4 )( 
            IMWACControllerV5 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        END_INTERFACE
    } IMWACControllerV5Vtbl;

    interface IMWACControllerV5
    {
        CONST_VTBL struct IMWACControllerV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerV5_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV5_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IMWACControllerV5_AddMwacExclusion(This,exclusionType,Data)	\
    ( (This)->lpVtbl -> AddMwacExclusion(This,exclusionType,Data) ) 

#define IMWACControllerV5_AddMwacExclusionEx(This,exclusionType,path,ppID)	\
    ( (This)->lpVtbl -> AddMwacExclusionEx(This,exclusionType,path,ppID) ) 

#define IMWACControllerV5_RemoveMwacExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveMwacExclusion(This,pID) ) 

#define IMWACControllerV5_UpdateMwacExclusion(This,pID,exclusionType,path)	\
    ( (This)->lpVtbl -> UpdateMwacExclusion(This,pID,exclusionType,path) ) 

#define IMWACControllerV5_GetNumMwacExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumMwacExclusions(This,pNumExclusions) ) 

#define IMWACControllerV5_GetMwacExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetMwacExclusionIDs(This,ppExclusionIDs) ) 

#define IMWACControllerV5_GetMwacExclusionID(This,pID,pExclusionType,ppPath)	\
    ( (This)->lpVtbl -> GetMwacExclusionID(This,pID,pExclusionType,ppPath) ) 

#define IMWACControllerV5_ClearMwacExclusions(This)	\
    ( (This)->lpVtbl -> ClearMwacExclusions(This) ) 

#define IMWACControllerV5_GetBlockCounts(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> GetBlockCounts(This,countIP,countDomain,countProcess,total) ) 

#define IMWACControllerV5_ClearBlockCountTotals(This)	\
    ( (This)->lpVtbl -> ClearBlockCountTotals(This) ) 

#define IMWACControllerV5_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IMWACControllerV5_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IMWACControllerV5_BrowserOnlyMode(This,bEnable)	\
    ( (This)->lpVtbl -> BrowserOnlyMode(This,bEnable) ) 

#define IMWACControllerV5_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IMWACControllerV5_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IMWACControllerV5_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IMWACControllerV5_StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild) ) 


#define IMWACControllerV5_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IMWACControllerV5_StartV3(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV5_get_CurrentStatus(This,pStatus)	\
    ( (This)->lpVtbl -> get_CurrentStatus(This,pStatus) ) 


#define IMWACControllerV5_StartV4(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV4(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerV5_INTERFACE_DEFINED__ */


#ifndef __IMWACControllerV6_INTERFACE_DEFINED__
#define __IMWACControllerV6_INTERFACE_DEFINED__

/* interface IMWACControllerV6 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerV6;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3BD2053F-99D1-4C2B-8B45-635183A8F0BF")
    IMWACControllerV6 : public IMWACControllerV5
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartV5( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerV6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerV6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerV6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerV6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerV6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerV6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerV6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerV6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IMWACControllerV6 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusion )( 
            IMWACControllerV6 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR Data);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddMwacExclusionEx )( 
            IMWACControllerV6 * This,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMwacExclusion )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMwacExclusion )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumMwacExclusions )( 
            IMWACControllerV6 * This,
            /* [out] */ long *pNumExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionIDs )( 
            IMWACControllerV6 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMwacExclusionID )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _MwacExclusionType *pExclusionType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearMwacExclusions )( 
            IMWACControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockCounts )( 
            IMWACControllerV6 * This,
            /* [out] */ long *countIP,
            /* [out] */ long *countDomain,
            /* [out] */ long *countProcess,
            /* [out] */ long *total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearBlockCountTotals )( 
            IMWACControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartProtection )( 
            IMWACControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopProtection )( 
            IMWACControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BrowserOnlyMode )( 
            IMWACControllerV6 * This,
            /* [in] */ long bEnable);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
            IMWACControllerV6 * This,
            /* [retval][out] */ _MwacState *pState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IMWACControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IMWACControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IMWACControllerV6 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _MwacStopType stopType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentStatus )( 
            IMWACControllerV6 * This,
            /* [retval][out] */ _MwacStatus *pStatus);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV4 )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV5 )( 
            IMWACControllerV6 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ int delayInterval,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        END_INTERFACE
    } IMWACControllerV6Vtbl;

    interface IMWACControllerV6
    {
        CONST_VTBL struct IMWACControllerV6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerV6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerV6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerV6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerV6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerV6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerV6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerV6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerV6_Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV6_Stop(This,timeoutMs)	\
    ( (This)->lpVtbl -> Stop(This,timeoutMs) ) 

#define IMWACControllerV6_AddMwacExclusion(This,exclusionType,Data)	\
    ( (This)->lpVtbl -> AddMwacExclusion(This,exclusionType,Data) ) 

#define IMWACControllerV6_AddMwacExclusionEx(This,exclusionType,path,ppID)	\
    ( (This)->lpVtbl -> AddMwacExclusionEx(This,exclusionType,path,ppID) ) 

#define IMWACControllerV6_RemoveMwacExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveMwacExclusion(This,pID) ) 

#define IMWACControllerV6_UpdateMwacExclusion(This,pID,exclusionType,path)	\
    ( (This)->lpVtbl -> UpdateMwacExclusion(This,pID,exclusionType,path) ) 

#define IMWACControllerV6_GetNumMwacExclusions(This,pNumExclusions)	\
    ( (This)->lpVtbl -> GetNumMwacExclusions(This,pNumExclusions) ) 

#define IMWACControllerV6_GetMwacExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetMwacExclusionIDs(This,ppExclusionIDs) ) 

#define IMWACControllerV6_GetMwacExclusionID(This,pID,pExclusionType,ppPath)	\
    ( (This)->lpVtbl -> GetMwacExclusionID(This,pID,pExclusionType,ppPath) ) 

#define IMWACControllerV6_ClearMwacExclusions(This)	\
    ( (This)->lpVtbl -> ClearMwacExclusions(This) ) 

#define IMWACControllerV6_GetBlockCounts(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> GetBlockCounts(This,countIP,countDomain,countProcess,total) ) 

#define IMWACControllerV6_ClearBlockCountTotals(This)	\
    ( (This)->lpVtbl -> ClearBlockCountTotals(This) ) 

#define IMWACControllerV6_StartProtection(This)	\
    ( (This)->lpVtbl -> StartProtection(This) ) 

#define IMWACControllerV6_StopProtection(This)	\
    ( (This)->lpVtbl -> StopProtection(This) ) 

#define IMWACControllerV6_BrowserOnlyMode(This,bEnable)	\
    ( (This)->lpVtbl -> BrowserOnlyMode(This,bEnable) ) 

#define IMWACControllerV6_get_CurrentState(This,pState)	\
    ( (This)->lpVtbl -> get_CurrentState(This,pState) ) 

#define IMWACControllerV6_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IMWACControllerV6_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 


#define IMWACControllerV6_StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV2(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild) ) 


#define IMWACControllerV6_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IMWACControllerV6_StartV3(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild) ) 

#define IMWACControllerV6_get_CurrentStatus(This,pStatus)	\
    ( (This)->lpVtbl -> get_CurrentStatus(This,pStatus) ) 


#define IMWACControllerV6_StartV4(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV4(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pProductCode,pProductVersion,pProductBuild) ) 


#define IMWACControllerV6_StartV5(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pCleanController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV5(This,pImplDLLPath,pDataPath,delayInterval,pLogController,pTelemetryController,pLicenseController,pUpdateController,pPoliciesController,pCleanController,pProductCode,pProductVersion,pProductBuild) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerV6_INTERFACE_DEFINED__ */


#ifndef __IMWACControllerEvents_INTERFACE_DEFINED__
#define __IMWACControllerEvents_INTERFACE_DEFINED__

/* interface IMWACControllerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E7DAEEB9-30B6-4AC4-BB74-7763C950D8EC")
    IMWACControllerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StateChangedCallback( 
            /* [in] */ long newState) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE WebsiteBlockedCountCallback( 
            /* [in] */ long countIP,
            /* [in] */ long countDomain,
            /* [in] */ long countProcess,
            /* [in] */ long total) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE WebsiteBlockedNotificationCallback( 
            /* [in] */ VARIANT_BOOL reportOnly,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR ipAddress,
            /* [in] */ long port,
            /* [in] */ BSTR processPath,
            /* [in] */ VARIANT_BOOL direction,
            /* [in] */ VARIANT_BOOL disposition) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExclusionsUpdated( 
            /* [in] */ _ExclusionEventType eventType,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR pPath) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StateChangedCallback )( 
            IMWACControllerEvents * This,
            /* [in] */ long newState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *WebsiteBlockedCountCallback )( 
            IMWACControllerEvents * This,
            /* [in] */ long countIP,
            /* [in] */ long countDomain,
            /* [in] */ long countProcess,
            /* [in] */ long total);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *WebsiteBlockedNotificationCallback )( 
            IMWACControllerEvents * This,
            /* [in] */ VARIANT_BOOL reportOnly,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR ipAddress,
            /* [in] */ long port,
            /* [in] */ BSTR processPath,
            /* [in] */ VARIANT_BOOL direction,
            /* [in] */ VARIANT_BOOL disposition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExclusionsUpdated )( 
            IMWACControllerEvents * This,
            /* [in] */ _ExclusionEventType eventType,
            /* [in] */ BSTR pID,
            /* [in] */ _MwacExclusionType exclusionType,
            /* [in] */ BSTR pPath);
        
        END_INTERFACE
    } IMWACControllerEventsVtbl;

    interface IMWACControllerEvents
    {
        CONST_VTBL struct IMWACControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerEvents_StateChangedCallback(This,newState)	\
    ( (This)->lpVtbl -> StateChangedCallback(This,newState) ) 

#define IMWACControllerEvents_WebsiteBlockedCountCallback(This,countIP,countDomain,countProcess,total)	\
    ( (This)->lpVtbl -> WebsiteBlockedCountCallback(This,countIP,countDomain,countProcess,total) ) 

#define IMWACControllerEvents_WebsiteBlockedNotificationCallback(This,reportOnly,blockListName,domain,ipAddress,port,processPath,direction,disposition)	\
    ( (This)->lpVtbl -> WebsiteBlockedNotificationCallback(This,reportOnly,blockListName,domain,ipAddress,port,processPath,direction,disposition) ) 

#define IMWACControllerEvents_ExclusionsUpdated(This,eventType,pID,exclusionType,pPath)	\
    ( (This)->lpVtbl -> ExclusionsUpdated(This,eventType,pID,exclusionType,pPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerEvents_INTERFACE_DEFINED__ */


#ifndef ___IMWACControllerEvents_DISPINTERFACE_DEFINED__
#define ___IMWACControllerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IMWACControllerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__IMWACControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B5186B66-AE3D-4EC4-B9F5-67EC478625BE")
    _IMWACControllerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IMWACControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IMWACControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IMWACControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IMWACControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IMWACControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IMWACControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IMWACControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IMWACControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IMWACControllerEventsVtbl;

    interface _IMWACControllerEvents
    {
        CONST_VTBL struct _IMWACControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IMWACControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IMWACControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IMWACControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IMWACControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IMWACControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IMWACControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IMWACControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IMWACControllerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IMWACControllerEventsV2_INTERFACE_DEFINED__
#define __IMWACControllerEventsV2_INTERFACE_DEFINED__

/* interface IMWACControllerEventsV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53260A87-5F77-4449-95F1-77A210A2A6D8")
    IMWACControllerEventsV2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE WebsiteBlockedNotificationCallbackV2( 
            /* [in] */ VARIANT_BOOL reportOnly,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR ipAddress,
            /* [in] */ long port,
            /* [in] */ BSTR processPath,
            /* [in] */ VARIANT_BOOL direction,
            /* [in] */ VARIANT_BOOL disposition,
            /* [in] */ long threatCategory) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *WebsiteBlockedNotificationCallbackV2 )( 
            IMWACControllerEventsV2 * This,
            /* [in] */ VARIANT_BOOL reportOnly,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR ipAddress,
            /* [in] */ long port,
            /* [in] */ BSTR processPath,
            /* [in] */ VARIANT_BOOL direction,
            /* [in] */ VARIANT_BOOL disposition,
            /* [in] */ long threatCategory);
        
        END_INTERFACE
    } IMWACControllerEventsV2Vtbl;

    interface IMWACControllerEventsV2
    {
        CONST_VTBL struct IMWACControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerEventsV2_WebsiteBlockedNotificationCallbackV2(This,reportOnly,blockListName,domain,ipAddress,port,processPath,direction,disposition,threatCategory)	\
    ( (This)->lpVtbl -> WebsiteBlockedNotificationCallbackV2(This,reportOnly,blockListName,domain,ipAddress,port,processPath,direction,disposition,threatCategory) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerEventsV2_INTERFACE_DEFINED__ */


#ifndef ___IMWACControllerEventsV2_DISPINTERFACE_DEFINED__
#define ___IMWACControllerEventsV2_DISPINTERFACE_DEFINED__

/* dispinterface _IMWACControllerEventsV2 */
/* [uuid] */ 


EXTERN_C const IID DIID__IMWACControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("014D0CF7-ACC9-4004-B999-7BDBAAD274B7")
    _IMWACControllerEventsV2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IMWACControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IMWACControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IMWACControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IMWACControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IMWACControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IMWACControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IMWACControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IMWACControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IMWACControllerEventsV2Vtbl;

    interface _IMWACControllerEventsV2
    {
        CONST_VTBL struct _IMWACControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IMWACControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IMWACControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IMWACControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IMWACControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IMWACControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IMWACControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IMWACControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IMWACControllerEventsV2_DISPINTERFACE_DEFINED__ */


#ifndef __IMWACControllerEventsV3_INTERFACE_DEFINED__
#define __IMWACControllerEventsV3_INTERFACE_DEFINED__

/* interface IMWACControllerEventsV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerEventsV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("237E618C-D739-4C8A-9F72-5CD4EF91CBE5")
    IMWACControllerEventsV3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StatusChangedCallback( 
            /* [in] */ long newStatus) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerEventsV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerEventsV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerEventsV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerEventsV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerEventsV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerEventsV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StatusChangedCallback )( 
            IMWACControllerEventsV3 * This,
            /* [in] */ long newStatus);
        
        END_INTERFACE
    } IMWACControllerEventsV3Vtbl;

    interface IMWACControllerEventsV3
    {
        CONST_VTBL struct IMWACControllerEventsV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerEventsV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerEventsV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerEventsV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerEventsV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerEventsV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerEventsV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerEventsV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerEventsV3_StatusChangedCallback(This,newStatus)	\
    ( (This)->lpVtbl -> StatusChangedCallback(This,newStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerEventsV3_INTERFACE_DEFINED__ */


#ifndef ___IMWACControllerEventsV3_DISPINTERFACE_DEFINED__
#define ___IMWACControllerEventsV3_DISPINTERFACE_DEFINED__

/* dispinterface _IMWACControllerEventsV3 */
/* [uuid] */ 


EXTERN_C const IID DIID__IMWACControllerEventsV3;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("19184D37-6938-4F54-BAFD-3240F0FA75E6")
    _IMWACControllerEventsV3 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IMWACControllerEventsV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IMWACControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IMWACControllerEventsV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IMWACControllerEventsV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IMWACControllerEventsV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IMWACControllerEventsV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IMWACControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IMWACControllerEventsV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IMWACControllerEventsV3Vtbl;

    interface _IMWACControllerEventsV3
    {
        CONST_VTBL struct _IMWACControllerEventsV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IMWACControllerEventsV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IMWACControllerEventsV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IMWACControllerEventsV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IMWACControllerEventsV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IMWACControllerEventsV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IMWACControllerEventsV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IMWACControllerEventsV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IMWACControllerEventsV3_DISPINTERFACE_DEFINED__ */


#ifndef __IMWACControllerEventsV4_INTERFACE_DEFINED__
#define __IMWACControllerEventsV4_INTERFACE_DEFINED__

/* interface IMWACControllerEventsV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMWACControllerEventsV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0F2D6C4F-0B95-4A53-BA9D-55526737DC34")
    IMWACControllerEventsV4 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE WebsiteBlockedNotificationCallbackV3( 
            /* [in] */ BSTR detectionID,
            /* [in] */ VARIANT_BOOL reportOnly,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR ipAddress,
            /* [in] */ long port,
            /* [in] */ BSTR processPath,
            /* [in] */ VARIANT_BOOL direction,
            /* [in] */ VARIANT_BOOL disposition,
            /* [in] */ long threatCategory) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IMWACControllerEventsV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMWACControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMWACControllerEventsV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMWACControllerEventsV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMWACControllerEventsV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMWACControllerEventsV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMWACControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMWACControllerEventsV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *WebsiteBlockedNotificationCallbackV3 )( 
            IMWACControllerEventsV4 * This,
            /* [in] */ BSTR detectionID,
            /* [in] */ VARIANT_BOOL reportOnly,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR ipAddress,
            /* [in] */ long port,
            /* [in] */ BSTR processPath,
            /* [in] */ VARIANT_BOOL direction,
            /* [in] */ VARIANT_BOOL disposition,
            /* [in] */ long threatCategory);
        
        END_INTERFACE
    } IMWACControllerEventsV4Vtbl;

    interface IMWACControllerEventsV4
    {
        CONST_VTBL struct IMWACControllerEventsV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMWACControllerEventsV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMWACControllerEventsV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMWACControllerEventsV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMWACControllerEventsV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMWACControllerEventsV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMWACControllerEventsV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMWACControllerEventsV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMWACControllerEventsV4_WebsiteBlockedNotificationCallbackV3(This,detectionID,reportOnly,blockListName,domain,ipAddress,port,processPath,direction,disposition,threatCategory)	\
    ( (This)->lpVtbl -> WebsiteBlockedNotificationCallbackV3(This,detectionID,reportOnly,blockListName,domain,ipAddress,port,processPath,direction,disposition,threatCategory) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMWACControllerEventsV4_INTERFACE_DEFINED__ */


#ifndef ___IMWACControllerEventsV4_DISPINTERFACE_DEFINED__
#define ___IMWACControllerEventsV4_DISPINTERFACE_DEFINED__

/* dispinterface _IMWACControllerEventsV4 */
/* [uuid] */ 


EXTERN_C const IID DIID__IMWACControllerEventsV4;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("F275D775-3A22-4C5A-B9AD-6FE8008304D0")
    _IMWACControllerEventsV4 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IMWACControllerEventsV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IMWACControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IMWACControllerEventsV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IMWACControllerEventsV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IMWACControllerEventsV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IMWACControllerEventsV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IMWACControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IMWACControllerEventsV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IMWACControllerEventsV4Vtbl;

    interface _IMWACControllerEventsV4
    {
        CONST_VTBL struct _IMWACControllerEventsV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IMWACControllerEventsV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IMWACControllerEventsV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IMWACControllerEventsV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IMWACControllerEventsV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IMWACControllerEventsV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IMWACControllerEventsV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IMWACControllerEventsV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IMWACControllerEventsV4_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MWACController;

#ifdef __cplusplus

class DECLSPEC_UUID("8F1C46F8-E697-4175-B240-CDE682A4BA2D")
MWACController;
#endif
#endif /* __MWACControllerCOMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


