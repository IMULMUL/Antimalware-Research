

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 14:14:07 2038
 */
/* Compiler settings for C:\Users\User\source\repos\MBAMExploit\Typelibs\ScanController.IDL:
    Oicf, W1, Zp8, env=Win64 (32b run), target_arch=AMD64 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#include "CleanController.h"
#include "CloudController.h"
#include "LicenseController.h"
#include "LogController.h"
#include "TelemetryController.h"
#include "UpdateController.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __ScanController_h__
#define __ScanController_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IScanParameters_FWD_DEFINED__
#define __IScanParameters_FWD_DEFINED__
typedef interface IScanParameters IScanParameters;

#endif 	/* __IScanParameters_FWD_DEFINED__ */


#ifndef __IScanParametersV2_FWD_DEFINED__
#define __IScanParametersV2_FWD_DEFINED__
typedef interface IScanParametersV2 IScanParametersV2;

#endif 	/* __IScanParametersV2_FWD_DEFINED__ */


#ifndef __IScanParametersV3_FWD_DEFINED__
#define __IScanParametersV3_FWD_DEFINED__
typedef interface IScanParametersV3 IScanParametersV3;

#endif 	/* __IScanParametersV3_FWD_DEFINED__ */


#ifndef __IScanParametersV4_FWD_DEFINED__
#define __IScanParametersV4_FWD_DEFINED__
typedef interface IScanParametersV4 IScanParametersV4;

#endif 	/* __IScanParametersV4_FWD_DEFINED__ */


#ifndef __IScanParametersV5_FWD_DEFINED__
#define __IScanParametersV5_FWD_DEFINED__
typedef interface IScanParametersV5 IScanParametersV5;

#endif 	/* __IScanParametersV5_FWD_DEFINED__ */


#ifndef __IScanParametersV6_FWD_DEFINED__
#define __IScanParametersV6_FWD_DEFINED__
typedef interface IScanParametersV6 IScanParametersV6;

#endif 	/* __IScanParametersV6_FWD_DEFINED__ */


#ifndef __IScannerEvents_FWD_DEFINED__
#define __IScannerEvents_FWD_DEFINED__
typedef interface IScannerEvents IScannerEvents;

#endif 	/* __IScannerEvents_FWD_DEFINED__ */


#ifndef ___IScannerEvents_FWD_DEFINED__
#define ___IScannerEvents_FWD_DEFINED__
typedef interface _IScannerEvents _IScannerEvents;

#endif 	/* ___IScannerEvents_FWD_DEFINED__ */


#ifndef __IScannerEventsV2_FWD_DEFINED__
#define __IScannerEventsV2_FWD_DEFINED__
typedef interface IScannerEventsV2 IScannerEventsV2;

#endif 	/* __IScannerEventsV2_FWD_DEFINED__ */


#ifndef ___IScannerEventsV2_FWD_DEFINED__
#define ___IScannerEventsV2_FWD_DEFINED__
typedef interface _IScannerEventsV2 _IScannerEventsV2;

#endif 	/* ___IScannerEventsV2_FWD_DEFINED__ */


#ifndef __IScanner_FWD_DEFINED__
#define __IScanner_FWD_DEFINED__
typedef interface IScanner IScanner;

#endif 	/* __IScanner_FWD_DEFINED__ */


#ifndef __IScanController_FWD_DEFINED__
#define __IScanController_FWD_DEFINED__
typedef interface IScanController IScanController;

#endif 	/* __IScanController_FWD_DEFINED__ */


#ifndef __IScanControllerV2_FWD_DEFINED__
#define __IScanControllerV2_FWD_DEFINED__
typedef interface IScanControllerV2 IScanControllerV2;

#endif 	/* __IScanControllerV2_FWD_DEFINED__ */


#ifndef __IScanControllerV3_FWD_DEFINED__
#define __IScanControllerV3_FWD_DEFINED__
typedef interface IScanControllerV3 IScanControllerV3;

#endif 	/* __IScanControllerV3_FWD_DEFINED__ */


#ifndef __IScanControllerV4_FWD_DEFINED__
#define __IScanControllerV4_FWD_DEFINED__
typedef interface IScanControllerV4 IScanControllerV4;

#endif 	/* __IScanControllerV4_FWD_DEFINED__ */


#ifndef __IScanControllerV5_FWD_DEFINED__
#define __IScanControllerV5_FWD_DEFINED__
typedef interface IScanControllerV5 IScanControllerV5;

#endif 	/* __IScanControllerV5_FWD_DEFINED__ */


#ifndef __IScanControllerV6_FWD_DEFINED__
#define __IScanControllerV6_FWD_DEFINED__
typedef interface IScanControllerV6 IScanControllerV6;

#endif 	/* __IScanControllerV6_FWD_DEFINED__ */


#ifndef __IScanControllerV7_FWD_DEFINED__
#define __IScanControllerV7_FWD_DEFINED__
typedef interface IScanControllerV7 IScanControllerV7;

#endif 	/* __IScanControllerV7_FWD_DEFINED__ */


#ifndef __IScanControllerV8_FWD_DEFINED__
#define __IScanControllerV8_FWD_DEFINED__
typedef interface IScanControllerV8 IScanControllerV8;

#endif 	/* __IScanControllerV8_FWD_DEFINED__ */


#ifndef __IScanControllerV9_FWD_DEFINED__
#define __IScanControllerV9_FWD_DEFINED__
typedef interface IScanControllerV9 IScanControllerV9;

#endif 	/* __IScanControllerV9_FWD_DEFINED__ */


#ifndef __ICustomScanParameters_FWD_DEFINED__
#define __ICustomScanParameters_FWD_DEFINED__
typedef interface ICustomScanParameters ICustomScanParameters;

#endif 	/* __ICustomScanParameters_FWD_DEFINED__ */


#ifndef __IMinimalScanParameters_FWD_DEFINED__
#define __IMinimalScanParameters_FWD_DEFINED__
typedef interface IMinimalScanParameters IMinimalScanParameters;

#endif 	/* __IMinimalScanParameters_FWD_DEFINED__ */


#ifndef __INormalScanParameters_FWD_DEFINED__
#define __INormalScanParameters_FWD_DEFINED__
typedef interface INormalScanParameters INormalScanParameters;

#endif 	/* __INormalScanParameters_FWD_DEFINED__ */


#ifndef __IScanControllerEvents_FWD_DEFINED__
#define __IScanControllerEvents_FWD_DEFINED__
typedef interface IScanControllerEvents IScanControllerEvents;

#endif 	/* __IScanControllerEvents_FWD_DEFINED__ */


#ifndef ___IScanControllerEvents_FWD_DEFINED__
#define ___IScanControllerEvents_FWD_DEFINED__
typedef interface _IScanControllerEvents _IScanControllerEvents;

#endif 	/* ___IScanControllerEvents_FWD_DEFINED__ */


#ifndef __IScanControllerEventsV2_FWD_DEFINED__
#define __IScanControllerEventsV2_FWD_DEFINED__
typedef interface IScanControllerEventsV2 IScanControllerEventsV2;

#endif 	/* __IScanControllerEventsV2_FWD_DEFINED__ */


#ifndef ___IScanControllerEventsV2_FWD_DEFINED__
#define ___IScanControllerEventsV2_FWD_DEFINED__
typedef interface _IScanControllerEventsV2 _IScanControllerEventsV2;

#endif 	/* ___IScanControllerEventsV2_FWD_DEFINED__ */


#ifndef __IScanControllerEventsV3_FWD_DEFINED__
#define __IScanControllerEventsV3_FWD_DEFINED__
typedef interface IScanControllerEventsV3 IScanControllerEventsV3;

#endif 	/* __IScanControllerEventsV3_FWD_DEFINED__ */


#ifndef ___IScanControllerEventsV3_FWD_DEFINED__
#define ___IScanControllerEventsV3_FWD_DEFINED__
typedef interface _IScanControllerEventsV3 _IScanControllerEventsV3;

#endif 	/* ___IScanControllerEventsV3_FWD_DEFINED__ */


#ifndef __IScanControllerEventsV4_FWD_DEFINED__
#define __IScanControllerEventsV4_FWD_DEFINED__
typedef interface IScanControllerEventsV4 IScanControllerEventsV4;

#endif 	/* __IScanControllerEventsV4_FWD_DEFINED__ */


#ifndef ___IScanControllerEventsV4_FWD_DEFINED__
#define ___IScanControllerEventsV4_FWD_DEFINED__
typedef interface _IScanControllerEventsV4 _IScanControllerEventsV4;

#endif 	/* ___IScanControllerEventsV4_FWD_DEFINED__ */


#ifndef __IScanControllerEventsV5_FWD_DEFINED__
#define __IScanControllerEventsV5_FWD_DEFINED__
typedef interface IScanControllerEventsV5 IScanControllerEventsV5;

#endif 	/* __IScanControllerEventsV5_FWD_DEFINED__ */


#ifndef ___IScanControllerEventsV5_FWD_DEFINED__
#define ___IScanControllerEventsV5_FWD_DEFINED__
typedef interface _IScanControllerEventsV5 _IScanControllerEventsV5;

#endif 	/* ___IScanControllerEventsV5_FWD_DEFINED__ */


#ifndef __IScanControllerEventsV6_FWD_DEFINED__
#define __IScanControllerEventsV6_FWD_DEFINED__
typedef interface IScanControllerEventsV6 IScanControllerEventsV6;

#endif 	/* __IScanControllerEventsV6_FWD_DEFINED__ */


#ifndef ___IScanControllerEventsV6_FWD_DEFINED__
#define ___IScanControllerEventsV6_FWD_DEFINED__
typedef interface _IScanControllerEventsV6 _IScanControllerEventsV6;

#endif 	/* ___IScanControllerEventsV6_FWD_DEFINED__ */


#ifndef __ScanController_FWD_DEFINED__
#define __ScanController_FWD_DEFINED__

#ifdef __cplusplus
typedef class ScanController ScanController;
#else
typedef struct ScanController ScanController;
#endif /* __cplusplus */

#endif 	/* __ScanController_FWD_DEFINED__ */


#ifndef __scanner_FWD_DEFINED__
#define __scanner_FWD_DEFINED__

#ifdef __cplusplus
typedef class scanner scanner;
#else
typedef struct scanner scanner;
#endif /* __cplusplus */

#endif 	/* __scanner_FWD_DEFINED__ */


#ifndef __ScanParameters_FWD_DEFINED__
#define __ScanParameters_FWD_DEFINED__

#ifdef __cplusplus
typedef class ScanParameters ScanParameters;
#else
typedef struct ScanParameters ScanParameters;
#endif /* __cplusplus */

#endif 	/* __ScanParameters_FWD_DEFINED__ */


#ifndef __CustomScanParameters_FWD_DEFINED__
#define __CustomScanParameters_FWD_DEFINED__

#ifdef __cplusplus
typedef class CustomScanParameters CustomScanParameters;
#else
typedef struct CustomScanParameters CustomScanParameters;
#endif /* __cplusplus */

#endif 	/* __CustomScanParameters_FWD_DEFINED__ */


#ifndef __MinimalScanParameters_FWD_DEFINED__
#define __MinimalScanParameters_FWD_DEFINED__

#ifdef __cplusplus
typedef class MinimalScanParameters MinimalScanParameters;
#else
typedef struct MinimalScanParameters MinimalScanParameters;
#endif /* __cplusplus */

#endif 	/* __MinimalScanParameters_FWD_DEFINED__ */


#ifndef __NormalScanParameters_FWD_DEFINED__
#define __NormalScanParameters_FWD_DEFINED__

#ifdef __cplusplus
typedef class NormalScanParameters NormalScanParameters;
#else
typedef struct NormalScanParameters NormalScanParameters;
#endif /* __cplusplus */

#endif 	/* __NormalScanParameters_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __ScanControllerCOMLib_LIBRARY_DEFINED__
#define __ScanControllerCOMLib_LIBRARY_DEFINED__

/* library ScanControllerCOMLib */
/* [custom][custom][custom][version][uuid] */ 




































typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0001
    {
        ScanType_Custom	= 0,
        ScanType_Minimal	= 1,
        ScanType_Normal	= 2
    } 	_ScanType;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0002
    {
        PupPumHandling_Ignore	= 0,
        PupPumHandling_Warn	= 1,
        PupPumHandling_Detect	= 2
    } 	_PupPumHandling;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0003
    {
        ScanState_Idle	= 0,
        ScanState_Scanning	= 1,
        ScanState_Paused	= 2,
        ScanState_Completed	= 3,
        ScanState_Cancelled	= 4,
        ScanState_Error	= 5
    } 	_ScanState;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0004
    {
        ScanConfigOptionName_AutoClean	= 0,
        ScanConfigOptionName_ScanArchives	= 1,
        ScanConfigOptionName_ScanExtra	= 2,
        ScanConfigOptionName_ScanRootkit	= 3,
        ScanConfigOptionName_PUMHandling	= 4,
        ScanConfigOptionName_PUPHandling	= 5
    } 	_ScanConfigOptionName;

typedef /* [uuid] */  DECLSPEC_UUID("49F3AE0B-9B60-4B1A-A1CB-D747CB6767F9") struct tagScanConfigStruct
    {
    VARIANT_BOOL AutoClean;
    VARIANT_BOOL ScanArchives;
    VARIANT_BOOL ScanExtra;
    VARIANT_BOOL ScanRootkit;
    _PupPumHandling PumHandling;
    _PupPumHandling PupHandling;
    } 	ScanConfigStruct;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0005
    {
        ScanObjectType_None	= 0,
        ScanObjectType_File	= 1,
        ScanObjectType_Folder	= 2,
        ScanObjectType_RegValue	= 3,
        ScanObjectType_RegKey	= 4,
        ScanObjectType_PhysicalSector	= 5,
        ScanObjectType_Process	= 6,
        ScanObjectType_Module	= 7,
        ScanObjectType_ADS	= 8,
        ScanObjectType_WMI	= 9
    } 	_ScanObjectType;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0006
    {
        ScanPhase_UpdateCheck	= 0,
        ScanPhase_PreScan	= 1,
        ScanPhase_Rootkits	= 2,
        ScanPhase_Memory	= 3,
        ScanPhase_Startup	= 4,
        ScanPhase_Registry	= 5,
        ScanPhase_FileSystem	= 6,
        ScanPhase_Custom	= 7,
        ScanPhase_Extra	= 8,
        ScanPhase_Complete	= 9
    } 	_ScanPhase;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0007
    {
        ScheduleFrequency_Once	= 0,
        ScheduleFrequency_Hours	= 1,
        ScheduleFrequency_Days	= 2,
        ScheduleFrequency_Weeks	= 3,
        ScheduleFrequency_Months	= 4,
        ScheduleFrequency_OnReboot	= 5
    } 	_ScheduleFrequency;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0008
    {
        ScanExclusionType_File	= 0,
        ScanExclusionType_Folder	= 1,
        ScanExclusionType_RegKey	= 2,
        ScanExclusionType_RegValue	= 3,
        ScanExclusionType_Extension	= 4,
        ScanExclusionType_Pattern	= 5,
        ScanExclusionType_DetectionName	= 6
    } 	_ScanExclusionType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0009
    {
        ScanExclusionAdded	= 0,
        ScanExclusionRemoved	= 1,
        ScanExclusionUpdated	= 2,
        ScanExclusionsCleared	= 3
    } 	_ScanExclusionEventType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0010
    {
        ScheduledScanAdded	= 0,
        ScheduledScanRemoved	= 1,
        ScheduledScanUpdated	= 2
    } 	_ScheduledScanEventType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0011
    {
        ScanPriorityHigh	= 0,
        ScanPriorityLow	= 1
    } 	_ScanPriority;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0012
    {
        ExternalDetectionSourceUnknown	= 0,
        ExternalDetectionSourceEDR	= 1
    } 	_ExternalDetectionSource;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0013
    {
        ShurikenSdkClassification_Error	= 0,
        ShurikenSdkClassification_Ineligible	= 1,
        ShurikenSdkClassification_KnownGood	= 2,
        ShurikenSdkClassification_PresumedGood	= 3,
        ShurikenSdkClassification_Normal	= 4,
        ShurikenSdkClassification_Unknown	= 5,
        ShurikenSdkClassification_Anomalous	= 6,
        ShurikenSdkClassification_PresumedBad	= 7,
        ShurikenSdkClassification_KnownBad	= 8
    } 	_ShurikenSdkClassification;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0000_0000_0014
    {
        ShurikenSdkModelType_Unknown	= 0,
        ShurikenSdkModelType_Online	= 1,
        ShurikenSdkModelType_Offline	= 2,
        ShurikenSdkModelType_Silent	= 3
    } 	_ShurikenSdkModelType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_ScanController_0001_0014_0001
    {
        ScanManualStop	= 0,
        ScanSystemStop	= 1
    } 	_ScanStopType;


EXTERN_C const IID LIBID_ScanControllerCOMLib;

#ifndef __IScanParameters_INTERFACE_DEFINED__
#define __IScanParameters_INTERFACE_DEFINED__

/* interface IScanParameters */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("89AE2EF4-3346-47C7-9DCF-ED3264527FDE")
    IScanParameters : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetType( 
            /* [in] */ _ScanType *pScanType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddCustomScanPath( 
            /* [in] */ BSTR pPathToScan) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetCustomScanPaths( 
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveCustomScanPath( 
            /* [in] */ BSTR pPathToScan) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearCustomScanPaths( void) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoClean( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoClean( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoRestart( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoRestart( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanArchives( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanArchives( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanExtra( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanExtra( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanFileSystem( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanFileSystem( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanMemory( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanMemory( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanRegistry( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanRegistry( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanRootkit( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanRootkit( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanStartup( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanStartup( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_PumHandling( 
            /* [retval][out] */ _PupPumHandling *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_PumHandling( 
            /* [in] */ _PupPumHandling pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_PupHandling( 
            /* [retval][out] */ _PupPumHandling *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_PupHandling( 
            /* [in] */ _PupPumHandling pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanParameters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanParameters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanParameters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanParameters * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IScanParameters * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IScanParameters * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IScanParameters * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        END_INTERFACE
    } IScanParametersVtbl;

    interface IScanParameters
    {
        CONST_VTBL struct IScanParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanParameters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanParameters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanParameters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanParameters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanParameters_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IScanParameters_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IScanParameters_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IScanParameters_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IScanParameters_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IScanParameters_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanParameters_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanParameters_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IScanParameters_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IScanParameters_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanParameters_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanParameters_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanParameters_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanParameters_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IScanParameters_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IScanParameters_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IScanParameters_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IScanParameters_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IScanParameters_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IScanParameters_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanParameters_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanParameters_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IScanParameters_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IScanParameters_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanParameters_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanParameters_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanParameters_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanParameters_INTERFACE_DEFINED__ */


#ifndef __IScanParametersV2_INTERFACE_DEFINED__
#define __IScanParametersV2_INTERFACE_DEFINED__

/* interface IScanParametersV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanParametersV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1861D707-8D71-497D-8145-62D5CBF4222F")
    IScanParametersV2 : public IScanParameters
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddClientMetadata( 
            /* [in] */ BSTR pScheduleID,
            /* [in] */ BSTR pScheduleTag,
            /* [in] */ BSTR pJobID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetClientMetadata( 
            /* [out] */ BSTR *ppScheduleID,
            /* [out] */ BSTR *ppScheduleTag,
            /* [out] */ BSTR *ppJobID) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanParametersV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanParametersV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanParametersV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanParametersV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanParametersV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanParametersV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanParametersV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanParametersV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IScanParametersV2 * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IScanParametersV2 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IScanParametersV2 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IScanParametersV2 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IScanParametersV2 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IScanParametersV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IScanParametersV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanParametersV2 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanParametersV2 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanParametersV2 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanParametersV2 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddClientMetadata )( 
            IScanParametersV2 * This,
            /* [in] */ BSTR pScheduleID,
            /* [in] */ BSTR pScheduleTag,
            /* [in] */ BSTR pJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetClientMetadata )( 
            IScanParametersV2 * This,
            /* [out] */ BSTR *ppScheduleID,
            /* [out] */ BSTR *ppScheduleTag,
            /* [out] */ BSTR *ppJobID);
        
        END_INTERFACE
    } IScanParametersV2Vtbl;

    interface IScanParametersV2
    {
        CONST_VTBL struct IScanParametersV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanParametersV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanParametersV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanParametersV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanParametersV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanParametersV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanParametersV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanParametersV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanParametersV2_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IScanParametersV2_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV2_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IScanParametersV2_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV2_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IScanParametersV2_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanParametersV2_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanParametersV2_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IScanParametersV2_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IScanParametersV2_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanParametersV2_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanParametersV2_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanParametersV2_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanParametersV2_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IScanParametersV2_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IScanParametersV2_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IScanParametersV2_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IScanParametersV2_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IScanParametersV2_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IScanParametersV2_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanParametersV2_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanParametersV2_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IScanParametersV2_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IScanParametersV2_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanParametersV2_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanParametersV2_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanParametersV2_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#define IScanParametersV2_AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID)	\
    ( (This)->lpVtbl -> AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID) ) 

#define IScanParametersV2_GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID)	\
    ( (This)->lpVtbl -> GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanParametersV2_INTERFACE_DEFINED__ */


#ifndef __IScanParametersV3_INTERFACE_DEFINED__
#define __IScanParametersV3_INTERFACE_DEFINED__

/* interface IScanParametersV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanParametersV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7EF16D72-5906-4045-86BC-16826F6212FE")
    IScanParametersV3 : public IScanParametersV2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddExternalDetection( 
            /* [in] */ BSTR pObjectPath,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR pThreatName,
            /* [in] */ long ruleID,
            /* [in] */ _ExternalDetectionSource detectionSource) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearExternalDetections( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanParametersV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanParametersV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanParametersV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanParametersV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanParametersV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanParametersV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanParametersV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanParametersV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IScanParametersV3 * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IScanParametersV3 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IScanParametersV3 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IScanParametersV3 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IScanParametersV3 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IScanParametersV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IScanParametersV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanParametersV3 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanParametersV3 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanParametersV3 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanParametersV3 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddClientMetadata )( 
            IScanParametersV3 * This,
            /* [in] */ BSTR pScheduleID,
            /* [in] */ BSTR pScheduleTag,
            /* [in] */ BSTR pJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetClientMetadata )( 
            IScanParametersV3 * This,
            /* [out] */ BSTR *ppScheduleID,
            /* [out] */ BSTR *ppScheduleTag,
            /* [out] */ BSTR *ppJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExternalDetection )( 
            IScanParametersV3 * This,
            /* [in] */ BSTR pObjectPath,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR pThreatName,
            /* [in] */ long ruleID,
            /* [in] */ _ExternalDetectionSource detectionSource);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExternalDetections )( 
            IScanParametersV3 * This);
        
        END_INTERFACE
    } IScanParametersV3Vtbl;

    interface IScanParametersV3
    {
        CONST_VTBL struct IScanParametersV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanParametersV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanParametersV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanParametersV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanParametersV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanParametersV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanParametersV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanParametersV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanParametersV3_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IScanParametersV3_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV3_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IScanParametersV3_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV3_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IScanParametersV3_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanParametersV3_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanParametersV3_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IScanParametersV3_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IScanParametersV3_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanParametersV3_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanParametersV3_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanParametersV3_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanParametersV3_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IScanParametersV3_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IScanParametersV3_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IScanParametersV3_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IScanParametersV3_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IScanParametersV3_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IScanParametersV3_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanParametersV3_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanParametersV3_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IScanParametersV3_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IScanParametersV3_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanParametersV3_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanParametersV3_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanParametersV3_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#define IScanParametersV3_AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID)	\
    ( (This)->lpVtbl -> AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID) ) 

#define IScanParametersV3_GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID)	\
    ( (This)->lpVtbl -> GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID) ) 


#define IScanParametersV3_AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource)	\
    ( (This)->lpVtbl -> AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource) ) 

#define IScanParametersV3_ClearExternalDetections(This)	\
    ( (This)->lpVtbl -> ClearExternalDetections(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanParametersV3_INTERFACE_DEFINED__ */


#ifndef __IScanParametersV4_INTERFACE_DEFINED__
#define __IScanParametersV4_INTERFACE_DEFINED__

/* interface IScanParametersV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanParametersV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6655E528-3168-47A4-BF82-A71E9E6AB5F7")
    IScanParametersV4 : public IScanParametersV3
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckForUpdates( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckForUpdates( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanParametersV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanParametersV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanParametersV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanParametersV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanParametersV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanParametersV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanParametersV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanParametersV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IScanParametersV4 * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IScanParametersV4 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IScanParametersV4 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IScanParametersV4 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IScanParametersV4 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanParametersV4 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanParametersV4 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanParametersV4 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanParametersV4 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddClientMetadata )( 
            IScanParametersV4 * This,
            /* [in] */ BSTR pScheduleID,
            /* [in] */ BSTR pScheduleTag,
            /* [in] */ BSTR pJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetClientMetadata )( 
            IScanParametersV4 * This,
            /* [out] */ BSTR *ppScheduleID,
            /* [out] */ BSTR *ppScheduleTag,
            /* [out] */ BSTR *ppJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExternalDetection )( 
            IScanParametersV4 * This,
            /* [in] */ BSTR pObjectPath,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR pThreatName,
            /* [in] */ long ruleID,
            /* [in] */ _ExternalDetectionSource detectionSource);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExternalDetections )( 
            IScanParametersV4 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckForUpdates )( 
            IScanParametersV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckForUpdates )( 
            IScanParametersV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        END_INTERFACE
    } IScanParametersV4Vtbl;

    interface IScanParametersV4
    {
        CONST_VTBL struct IScanParametersV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanParametersV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanParametersV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanParametersV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanParametersV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanParametersV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanParametersV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanParametersV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanParametersV4_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IScanParametersV4_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV4_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IScanParametersV4_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV4_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IScanParametersV4_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanParametersV4_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanParametersV4_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IScanParametersV4_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IScanParametersV4_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanParametersV4_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanParametersV4_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanParametersV4_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanParametersV4_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IScanParametersV4_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IScanParametersV4_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IScanParametersV4_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IScanParametersV4_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IScanParametersV4_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IScanParametersV4_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanParametersV4_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanParametersV4_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IScanParametersV4_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IScanParametersV4_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanParametersV4_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanParametersV4_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanParametersV4_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#define IScanParametersV4_AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID)	\
    ( (This)->lpVtbl -> AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID) ) 

#define IScanParametersV4_GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID)	\
    ( (This)->lpVtbl -> GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID) ) 


#define IScanParametersV4_AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource)	\
    ( (This)->lpVtbl -> AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource) ) 

#define IScanParametersV4_ClearExternalDetections(This)	\
    ( (This)->lpVtbl -> ClearExternalDetections(This) ) 


#define IScanParametersV4_get_CheckForUpdates(This,pVal)	\
    ( (This)->lpVtbl -> get_CheckForUpdates(This,pVal) ) 

#define IScanParametersV4_put_CheckForUpdates(This,pVal)	\
    ( (This)->lpVtbl -> put_CheckForUpdates(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanParametersV4_INTERFACE_DEFINED__ */


#ifndef __IScanParametersV5_INTERFACE_DEFINED__
#define __IScanParametersV5_INTERFACE_DEFINED__

/* interface IScanParametersV5 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanParametersV5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7E777BB2-8526-437A-BBE2-42647DE2EC86")
    IScanParametersV5 : public IScanParametersV4
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableShuriken( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableShuriken( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableShurikenAggressiveMode( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableShurikenAggressiveMode( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableLinking( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableLinking( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddCustomScanPathEx( 
            /* [in] */ BSTR pPathPattern) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetCustomScanPathsEx( 
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPathPatterns) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveCustomScanPathEx( 
            /* [in] */ BSTR pPathPattern) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearCustomScanPathsEx( void) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowNetworkPaths( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowNetworkPaths( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UseMinimalWhitelisting( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UseMinimalWhitelisting( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanParametersV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanParametersV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanParametersV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanParametersV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanParametersV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanParametersV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanParametersV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanParametersV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IScanParametersV5 * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IScanParametersV5 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IScanParametersV5 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IScanParametersV5 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IScanParametersV5 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanParametersV5 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanParametersV5 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanParametersV5 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanParametersV5 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddClientMetadata )( 
            IScanParametersV5 * This,
            /* [in] */ BSTR pScheduleID,
            /* [in] */ BSTR pScheduleTag,
            /* [in] */ BSTR pJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetClientMetadata )( 
            IScanParametersV5 * This,
            /* [out] */ BSTR *ppScheduleID,
            /* [out] */ BSTR *ppScheduleTag,
            /* [out] */ BSTR *ppJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExternalDetection )( 
            IScanParametersV5 * This,
            /* [in] */ BSTR pObjectPath,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR pThreatName,
            /* [in] */ long ruleID,
            /* [in] */ _ExternalDetectionSource detectionSource);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExternalDetections )( 
            IScanParametersV5 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckForUpdates )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckForUpdates )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShurikenAggressiveMode )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShurikenAggressiveMode )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLinking )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLinking )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPathEx )( 
            IScanParametersV5 * This,
            /* [in] */ BSTR pPathPattern);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPathsEx )( 
            IScanParametersV5 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPathPatterns);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPathEx )( 
            IScanParametersV5 * This,
            /* [in] */ BSTR pPathPattern);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPathsEx )( 
            IScanParametersV5 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowNetworkPaths )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowNetworkPaths )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseMinimalWhitelisting )( 
            IScanParametersV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseMinimalWhitelisting )( 
            IScanParametersV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        END_INTERFACE
    } IScanParametersV5Vtbl;

    interface IScanParametersV5
    {
        CONST_VTBL struct IScanParametersV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanParametersV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanParametersV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanParametersV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanParametersV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanParametersV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanParametersV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanParametersV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanParametersV5_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IScanParametersV5_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV5_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IScanParametersV5_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV5_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IScanParametersV5_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanParametersV5_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanParametersV5_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IScanParametersV5_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IScanParametersV5_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanParametersV5_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanParametersV5_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanParametersV5_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanParametersV5_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IScanParametersV5_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IScanParametersV5_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IScanParametersV5_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IScanParametersV5_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IScanParametersV5_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IScanParametersV5_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanParametersV5_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanParametersV5_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IScanParametersV5_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IScanParametersV5_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanParametersV5_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanParametersV5_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanParametersV5_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#define IScanParametersV5_AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID)	\
    ( (This)->lpVtbl -> AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID) ) 

#define IScanParametersV5_GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID)	\
    ( (This)->lpVtbl -> GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID) ) 


#define IScanParametersV5_AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource)	\
    ( (This)->lpVtbl -> AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource) ) 

#define IScanParametersV5_ClearExternalDetections(This)	\
    ( (This)->lpVtbl -> ClearExternalDetections(This) ) 


#define IScanParametersV5_get_CheckForUpdates(This,pVal)	\
    ( (This)->lpVtbl -> get_CheckForUpdates(This,pVal) ) 

#define IScanParametersV5_put_CheckForUpdates(This,pVal)	\
    ( (This)->lpVtbl -> put_CheckForUpdates(This,pVal) ) 


#define IScanParametersV5_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanParametersV5_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanParametersV5_get_EnableShurikenAggressiveMode(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShurikenAggressiveMode(This,pVal) ) 

#define IScanParametersV5_put_EnableShurikenAggressiveMode(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShurikenAggressiveMode(This,pVal) ) 

#define IScanParametersV5_get_DisableLinking(This,pVal)	\
    ( (This)->lpVtbl -> get_DisableLinking(This,pVal) ) 

#define IScanParametersV5_put_DisableLinking(This,pVal)	\
    ( (This)->lpVtbl -> put_DisableLinking(This,pVal) ) 

#define IScanParametersV5_AddCustomScanPathEx(This,pPathPattern)	\
    ( (This)->lpVtbl -> AddCustomScanPathEx(This,pPathPattern) ) 

#define IScanParametersV5_GetCustomScanPathsEx(This,ppCustomScanPathPatterns)	\
    ( (This)->lpVtbl -> GetCustomScanPathsEx(This,ppCustomScanPathPatterns) ) 

#define IScanParametersV5_RemoveCustomScanPathEx(This,pPathPattern)	\
    ( (This)->lpVtbl -> RemoveCustomScanPathEx(This,pPathPattern) ) 

#define IScanParametersV5_ClearCustomScanPathsEx(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPathsEx(This) ) 

#define IScanParametersV5_get_AllowNetworkPaths(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowNetworkPaths(This,pVal) ) 

#define IScanParametersV5_put_AllowNetworkPaths(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowNetworkPaths(This,pVal) ) 

#define IScanParametersV5_get_UseMinimalWhitelisting(This,pVal)	\
    ( (This)->lpVtbl -> get_UseMinimalWhitelisting(This,pVal) ) 

#define IScanParametersV5_put_UseMinimalWhitelisting(This,pVal)	\
    ( (This)->lpVtbl -> put_UseMinimalWhitelisting(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanParametersV5_INTERFACE_DEFINED__ */


#ifndef __IScanParametersV6_INTERFACE_DEFINED__
#define __IScanParametersV6_INTERFACE_DEFINED__

/* interface IScanParametersV6 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanParametersV6;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61964EBA-D9C0-4834-B01C-A6133F432BB1")
    IScanParametersV6 : public IScanParametersV5
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SendRawClassificationResults( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SendRawClassificationResults( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableAggressiveModeTrigger( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableAggressiveModeTrigger( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableWLCheck( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableWLCheck( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanParametersV6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanParametersV6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanParametersV6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanParametersV6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanParametersV6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanParametersV6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanParametersV6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanParametersV6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IScanParametersV6 * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IScanParametersV6 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IScanParametersV6 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IScanParametersV6 * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IScanParametersV6 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanParametersV6 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanParametersV6 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanParametersV6 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanParametersV6 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddClientMetadata )( 
            IScanParametersV6 * This,
            /* [in] */ BSTR pScheduleID,
            /* [in] */ BSTR pScheduleTag,
            /* [in] */ BSTR pJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetClientMetadata )( 
            IScanParametersV6 * This,
            /* [out] */ BSTR *ppScheduleID,
            /* [out] */ BSTR *ppScheduleTag,
            /* [out] */ BSTR *ppJobID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExternalDetection )( 
            IScanParametersV6 * This,
            /* [in] */ BSTR pObjectPath,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR pThreatName,
            /* [in] */ long ruleID,
            /* [in] */ _ExternalDetectionSource detectionSource);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearExternalDetections )( 
            IScanParametersV6 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckForUpdates )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckForUpdates )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShurikenAggressiveMode )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShurikenAggressiveMode )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLinking )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLinking )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPathEx )( 
            IScanParametersV6 * This,
            /* [in] */ BSTR pPathPattern);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPathsEx )( 
            IScanParametersV6 * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPathPatterns);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPathEx )( 
            IScanParametersV6 * This,
            /* [in] */ BSTR pPathPattern);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPathsEx )( 
            IScanParametersV6 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowNetworkPaths )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowNetworkPaths )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseMinimalWhitelisting )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseMinimalWhitelisting )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SendRawClassificationResults )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SendRawClassificationResults )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableAggressiveModeTrigger )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableAggressiveModeTrigger )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableWLCheck )( 
            IScanParametersV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableWLCheck )( 
            IScanParametersV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        END_INTERFACE
    } IScanParametersV6Vtbl;

    interface IScanParametersV6
    {
        CONST_VTBL struct IScanParametersV6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanParametersV6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanParametersV6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanParametersV6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanParametersV6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanParametersV6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanParametersV6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanParametersV6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanParametersV6_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IScanParametersV6_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV6_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IScanParametersV6_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IScanParametersV6_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IScanParametersV6_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanParametersV6_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanParametersV6_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IScanParametersV6_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IScanParametersV6_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanParametersV6_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanParametersV6_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanParametersV6_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanParametersV6_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IScanParametersV6_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IScanParametersV6_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IScanParametersV6_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IScanParametersV6_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IScanParametersV6_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IScanParametersV6_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanParametersV6_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanParametersV6_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IScanParametersV6_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IScanParametersV6_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanParametersV6_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanParametersV6_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanParametersV6_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#define IScanParametersV6_AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID)	\
    ( (This)->lpVtbl -> AddClientMetadata(This,pScheduleID,pScheduleTag,pJobID) ) 

#define IScanParametersV6_GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID)	\
    ( (This)->lpVtbl -> GetClientMetadata(This,ppScheduleID,ppScheduleTag,ppJobID) ) 


#define IScanParametersV6_AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource)	\
    ( (This)->lpVtbl -> AddExternalDetection(This,pObjectPath,objectType,threatID,pThreatName,ruleID,detectionSource) ) 

#define IScanParametersV6_ClearExternalDetections(This)	\
    ( (This)->lpVtbl -> ClearExternalDetections(This) ) 


#define IScanParametersV6_get_CheckForUpdates(This,pVal)	\
    ( (This)->lpVtbl -> get_CheckForUpdates(This,pVal) ) 

#define IScanParametersV6_put_CheckForUpdates(This,pVal)	\
    ( (This)->lpVtbl -> put_CheckForUpdates(This,pVal) ) 


#define IScanParametersV6_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanParametersV6_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanParametersV6_get_EnableShurikenAggressiveMode(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShurikenAggressiveMode(This,pVal) ) 

#define IScanParametersV6_put_EnableShurikenAggressiveMode(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShurikenAggressiveMode(This,pVal) ) 

#define IScanParametersV6_get_DisableLinking(This,pVal)	\
    ( (This)->lpVtbl -> get_DisableLinking(This,pVal) ) 

#define IScanParametersV6_put_DisableLinking(This,pVal)	\
    ( (This)->lpVtbl -> put_DisableLinking(This,pVal) ) 

#define IScanParametersV6_AddCustomScanPathEx(This,pPathPattern)	\
    ( (This)->lpVtbl -> AddCustomScanPathEx(This,pPathPattern) ) 

#define IScanParametersV6_GetCustomScanPathsEx(This,ppCustomScanPathPatterns)	\
    ( (This)->lpVtbl -> GetCustomScanPathsEx(This,ppCustomScanPathPatterns) ) 

#define IScanParametersV6_RemoveCustomScanPathEx(This,pPathPattern)	\
    ( (This)->lpVtbl -> RemoveCustomScanPathEx(This,pPathPattern) ) 

#define IScanParametersV6_ClearCustomScanPathsEx(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPathsEx(This) ) 

#define IScanParametersV6_get_AllowNetworkPaths(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowNetworkPaths(This,pVal) ) 

#define IScanParametersV6_put_AllowNetworkPaths(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowNetworkPaths(This,pVal) ) 

#define IScanParametersV6_get_UseMinimalWhitelisting(This,pVal)	\
    ( (This)->lpVtbl -> get_UseMinimalWhitelisting(This,pVal) ) 

#define IScanParametersV6_put_UseMinimalWhitelisting(This,pVal)	\
    ( (This)->lpVtbl -> put_UseMinimalWhitelisting(This,pVal) ) 


#define IScanParametersV6_get_SendRawClassificationResults(This,pVal)	\
    ( (This)->lpVtbl -> get_SendRawClassificationResults(This,pVal) ) 

#define IScanParametersV6_put_SendRawClassificationResults(This,pVal)	\
    ( (This)->lpVtbl -> put_SendRawClassificationResults(This,pVal) ) 

#define IScanParametersV6_get_DisableAggressiveModeTrigger(This,pVal)	\
    ( (This)->lpVtbl -> get_DisableAggressiveModeTrigger(This,pVal) ) 

#define IScanParametersV6_put_DisableAggressiveModeTrigger(This,pVal)	\
    ( (This)->lpVtbl -> put_DisableAggressiveModeTrigger(This,pVal) ) 

#define IScanParametersV6_get_DisableWLCheck(This,pVal)	\
    ( (This)->lpVtbl -> get_DisableWLCheck(This,pVal) ) 

#define IScanParametersV6_put_DisableWLCheck(This,pVal)	\
    ( (This)->lpVtbl -> put_DisableWLCheck(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanParametersV6_INTERFACE_DEFINED__ */


#ifndef __IScannerEvents_INTERFACE_DEFINED__
#define __IScannerEvents_INTERFACE_DEFINED__

/* interface IScannerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScannerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5F128CCB-D86F-4998-803A-7CD58474FE2C")
    IScannerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ThreatDetectedCallback( 
            /* [in] */ long threatID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ long ruleID,
            /* [in] */ BSTR ObjectName,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ unsigned long ProcessId,
            /* [in] */ BSTR TraceId,
            /* [in] */ BSTR ParentTraceId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScanStateChangedCallback( 
            /* [in] */ _ScanState scanState) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScanProgressCallback( 
            /* [in] */ _ScanPhase ScanPhase,
            /* [in] */ unsigned long ObjectsScanned,
            /* [in] */ unsigned long ThreatsDetected,
            /* [in] */ VARIANT_BOOL IsNewPhase,
            /* [in] */ long EstimatedPhaseProgress,
            /* [in] */ BSTR CurrentScanObject) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScannerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScannerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScannerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScannerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScannerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScannerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScannerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScannerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ThreatDetectedCallback )( 
            IScannerEvents * This,
            /* [in] */ long threatID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ long ruleID,
            /* [in] */ BSTR ObjectName,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ unsigned long ProcessId,
            /* [in] */ BSTR TraceId,
            /* [in] */ BSTR ParentTraceId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScanStateChangedCallback )( 
            IScannerEvents * This,
            /* [in] */ _ScanState scanState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScanProgressCallback )( 
            IScannerEvents * This,
            /* [in] */ _ScanPhase ScanPhase,
            /* [in] */ unsigned long ObjectsScanned,
            /* [in] */ unsigned long ThreatsDetected,
            /* [in] */ VARIANT_BOOL IsNewPhase,
            /* [in] */ long EstimatedPhaseProgress,
            /* [in] */ BSTR CurrentScanObject);
        
        END_INTERFACE
    } IScannerEventsVtbl;

    interface IScannerEvents
    {
        CONST_VTBL struct IScannerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScannerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScannerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScannerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScannerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScannerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScannerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScannerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScannerEvents_ThreatDetectedCallback(This,threatID,ThreatName,ruleID,ObjectName,objectType,ProcessId,TraceId,ParentTraceId)	\
    ( (This)->lpVtbl -> ThreatDetectedCallback(This,threatID,ThreatName,ruleID,ObjectName,objectType,ProcessId,TraceId,ParentTraceId) ) 

#define IScannerEvents_ScanStateChangedCallback(This,scanState)	\
    ( (This)->lpVtbl -> ScanStateChangedCallback(This,scanState) ) 

#define IScannerEvents_ScanProgressCallback(This,ScanPhase,ObjectsScanned,ThreatsDetected,IsNewPhase,EstimatedPhaseProgress,CurrentScanObject)	\
    ( (This)->lpVtbl -> ScanProgressCallback(This,ScanPhase,ObjectsScanned,ThreatsDetected,IsNewPhase,EstimatedPhaseProgress,CurrentScanObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScannerEvents_INTERFACE_DEFINED__ */


#ifndef ___IScannerEvents_DISPINTERFACE_DEFINED__
#define ___IScannerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IScannerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__IScannerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("71B13605-3569-4F4A-B971-08FF179A3A60")
    _IScannerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScannerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScannerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScannerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScannerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScannerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScannerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScannerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScannerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScannerEventsVtbl;

    interface _IScannerEvents
    {
        CONST_VTBL struct _IScannerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScannerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScannerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScannerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScannerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScannerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScannerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScannerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScannerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IScannerEventsV2_INTERFACE_DEFINED__
#define __IScannerEventsV2_INTERFACE_DEFINED__

/* interface IScannerEventsV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScannerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("90A62FAD-6FA9-4454-8CEE-7EDF67437226")
    IScannerEventsV2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RawShurikenClassificationCallback( 
            /* [in] */ BSTR ObjectName,
            /* [in] */ _ShurikenSdkClassification Classification,
            /* [in] */ BSTR ClassifyingLayer,
            /* [in] */ BSTR ClassifyingObject,
            /* [in] */ BSTR Model,
            /* [in] */ _ShurikenSdkModelType ModelType,
            /* [in] */ double ModelScore,
            /* [in] */ double ModelConfidence,
            /* [in] */ BSTR Version) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RawAMEThreatClassificationCallback( 
            /* [in] */ BSTR ObjectName,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ long ruleID,
            /* [in] */ BSTR Version) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScannerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScannerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScannerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScannerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScannerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScannerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScannerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScannerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RawShurikenClassificationCallback )( 
            IScannerEventsV2 * This,
            /* [in] */ BSTR ObjectName,
            /* [in] */ _ShurikenSdkClassification Classification,
            /* [in] */ BSTR ClassifyingLayer,
            /* [in] */ BSTR ClassifyingObject,
            /* [in] */ BSTR Model,
            /* [in] */ _ShurikenSdkModelType ModelType,
            /* [in] */ double ModelScore,
            /* [in] */ double ModelConfidence,
            /* [in] */ BSTR Version);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RawAMEThreatClassificationCallback )( 
            IScannerEventsV2 * This,
            /* [in] */ BSTR ObjectName,
            /* [in] */ _ScanObjectType objectType,
            /* [in] */ long threatID,
            /* [in] */ BSTR ThreatName,
            /* [in] */ long ruleID,
            /* [in] */ BSTR Version);
        
        END_INTERFACE
    } IScannerEventsV2Vtbl;

    interface IScannerEventsV2
    {
        CONST_VTBL struct IScannerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScannerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScannerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScannerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScannerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScannerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScannerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScannerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScannerEventsV2_RawShurikenClassificationCallback(This,ObjectName,Classification,ClassifyingLayer,ClassifyingObject,Model,ModelType,ModelScore,ModelConfidence,Version)	\
    ( (This)->lpVtbl -> RawShurikenClassificationCallback(This,ObjectName,Classification,ClassifyingLayer,ClassifyingObject,Model,ModelType,ModelScore,ModelConfidence,Version) ) 

#define IScannerEventsV2_RawAMEThreatClassificationCallback(This,ObjectName,objectType,threatID,ThreatName,ruleID,Version)	\
    ( (This)->lpVtbl -> RawAMEThreatClassificationCallback(This,ObjectName,objectType,threatID,ThreatName,ruleID,Version) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScannerEventsV2_INTERFACE_DEFINED__ */


#ifndef ___IScannerEventsV2_DISPINTERFACE_DEFINED__
#define ___IScannerEventsV2_DISPINTERFACE_DEFINED__

/* dispinterface _IScannerEventsV2 */
/* [uuid] */ 


EXTERN_C const IID DIID__IScannerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3F656FD9-2597-4587-8F05-781C11710867")
    _IScannerEventsV2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScannerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScannerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScannerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScannerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScannerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScannerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScannerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScannerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScannerEventsV2Vtbl;

    interface _IScannerEventsV2
    {
        CONST_VTBL struct _IScannerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScannerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScannerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScannerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScannerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScannerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScannerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScannerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScannerEventsV2_DISPINTERFACE_DEFINED__ */


#ifndef __IScanner_INTERFACE_DEFINED__
#define __IScanner_INTERFACE_DEFINED__

/* interface IScanner */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A5091804-600E-4226-BF28-80ABFDF4AFAB")
    IScanner : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartScan( 
            /* [in] */ IScanParameters *pScanParameters,
            /* [in] */ BSTR pClientID,
            /* [in] */ /* external definition not present */ _ClientType clientType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PauseScan( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ResumeScan( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CancelScan( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Scan( 
            /* [in] */ IScanParameters *pScanParameters,
            /* [in] */ BSTR pClientID,
            /* [in] */ /* external definition not present */ _ClientType clientType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanID( 
            /* [out] */ BSTR *ppScanID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetClientDetails( 
            /* [out] */ BSTR *ppClientID,
            /* [out] */ /* external definition not present */ _ClientType *pClientType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanState( 
            /* [out] */ _ScanState *pScanState) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanResults( 
            /* [retval][out] */ BSTR *pResultsFilePath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetScanProgressReportFrequency( 
            /* [in] */ unsigned long frequency) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Shutdown( 
            /* [in] */ long timeoutInSecs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetActiveScanParams( 
            /* [retval][out] */ IScanParameters **ppScanParams) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetIntermediateScanResults( 
            /* [retval][out] */ BSTR *pIntermediateResultsFilePath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetElapsedScanTimeMs( 
            /* [retval][out] */ INT64 *pElapsedTimeMs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanDetails( 
            /* [out] */ _ScanPhase *pScanPhase,
            /* [out] */ long *pNumObjectsScanned,
            /* [out] */ long *pNumThreatsDetected,
            /* [out] */ INT64 *pElapsedScanTimeMs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetThreatDetails( 
            /* [in] */ unsigned long index,
            /* [out] */ unsigned long *pThreatId,
            /* [out] */ BSTR *ppThreatName,
            /* [out] */ unsigned long *pRuleId,
            /* [out] */ _ScanObjectType *pObjectType,
            /* [out] */ BSTR *ppObjectName,
            /* [out] */ BSTR *ppTraceId,
            /* [out] */ BSTR *ppParentTraceId) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScannerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanner * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanner * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanner * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanner * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanner * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartScan )( 
            IScanner * This,
            /* [in] */ IScanParameters *pScanParameters,
            /* [in] */ BSTR pClientID,
            /* [in] */ /* external definition not present */ _ClientType clientType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PauseScan )( 
            IScanner * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ResumeScan )( 
            IScanner * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CancelScan )( 
            IScanner * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Scan )( 
            IScanner * This,
            /* [in] */ IScanParameters *pScanParameters,
            /* [in] */ BSTR pClientID,
            /* [in] */ /* external definition not present */ _ClientType clientType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanID )( 
            IScanner * This,
            /* [out] */ BSTR *ppScanID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetClientDetails )( 
            IScanner * This,
            /* [out] */ BSTR *ppClientID,
            /* [out] */ /* external definition not present */ _ClientType *pClientType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanState )( 
            IScanner * This,
            /* [out] */ _ScanState *pScanState);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanResults )( 
            IScanner * This,
            /* [retval][out] */ BSTR *pResultsFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanProgressReportFrequency )( 
            IScanner * This,
            /* [in] */ unsigned long frequency);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IScanner * This,
            /* [in] */ long timeoutInSecs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanParams )( 
            IScanner * This,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetIntermediateScanResults )( 
            IScanner * This,
            /* [retval][out] */ BSTR *pIntermediateResultsFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetElapsedScanTimeMs )( 
            IScanner * This,
            /* [retval][out] */ INT64 *pElapsedTimeMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanDetails )( 
            IScanner * This,
            /* [out] */ _ScanPhase *pScanPhase,
            /* [out] */ long *pNumObjectsScanned,
            /* [out] */ long *pNumThreatsDetected,
            /* [out] */ INT64 *pElapsedScanTimeMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetThreatDetails )( 
            IScanner * This,
            /* [in] */ unsigned long index,
            /* [out] */ unsigned long *pThreatId,
            /* [out] */ BSTR *ppThreatName,
            /* [out] */ unsigned long *pRuleId,
            /* [out] */ _ScanObjectType *pObjectType,
            /* [out] */ BSTR *ppObjectName,
            /* [out] */ BSTR *ppTraceId,
            /* [out] */ BSTR *ppParentTraceId);
        
        END_INTERFACE
    } IScannerVtbl;

    interface IScanner
    {
        CONST_VTBL struct IScannerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanner_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanner_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanner_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanner_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanner_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanner_StartScan(This,pScanParameters,pClientID,clientType)	\
    ( (This)->lpVtbl -> StartScan(This,pScanParameters,pClientID,clientType) ) 

#define IScanner_PauseScan(This)	\
    ( (This)->lpVtbl -> PauseScan(This) ) 

#define IScanner_ResumeScan(This)	\
    ( (This)->lpVtbl -> ResumeScan(This) ) 

#define IScanner_CancelScan(This)	\
    ( (This)->lpVtbl -> CancelScan(This) ) 

#define IScanner_Scan(This,pScanParameters,pClientID,clientType)	\
    ( (This)->lpVtbl -> Scan(This,pScanParameters,pClientID,clientType) ) 

#define IScanner_GetScanID(This,ppScanID)	\
    ( (This)->lpVtbl -> GetScanID(This,ppScanID) ) 

#define IScanner_GetClientDetails(This,ppClientID,pClientType)	\
    ( (This)->lpVtbl -> GetClientDetails(This,ppClientID,pClientType) ) 

#define IScanner_GetScanState(This,pScanState)	\
    ( (This)->lpVtbl -> GetScanState(This,pScanState) ) 

#define IScanner_GetScanResults(This,pResultsFilePath)	\
    ( (This)->lpVtbl -> GetScanResults(This,pResultsFilePath) ) 

#define IScanner_SetScanProgressReportFrequency(This,frequency)	\
    ( (This)->lpVtbl -> SetScanProgressReportFrequency(This,frequency) ) 

#define IScanner_Shutdown(This,timeoutInSecs)	\
    ( (This)->lpVtbl -> Shutdown(This,timeoutInSecs) ) 

#define IScanner_GetActiveScanParams(This,ppScanParams)	\
    ( (This)->lpVtbl -> GetActiveScanParams(This,ppScanParams) ) 

#define IScanner_GetIntermediateScanResults(This,pIntermediateResultsFilePath)	\
    ( (This)->lpVtbl -> GetIntermediateScanResults(This,pIntermediateResultsFilePath) ) 

#define IScanner_GetElapsedScanTimeMs(This,pElapsedTimeMs)	\
    ( (This)->lpVtbl -> GetElapsedScanTimeMs(This,pElapsedTimeMs) ) 

#define IScanner_GetScanDetails(This,pScanPhase,pNumObjectsScanned,pNumThreatsDetected,pElapsedScanTimeMs)	\
    ( (This)->lpVtbl -> GetScanDetails(This,pScanPhase,pNumObjectsScanned,pNumThreatsDetected,pElapsedScanTimeMs) ) 

#define IScanner_GetThreatDetails(This,index,pThreatId,ppThreatName,pRuleId,pObjectType,ppObjectName,ppTraceId,ppParentTraceId)	\
    ( (This)->lpVtbl -> GetThreatDetails(This,index,pThreatId,ppThreatName,pRuleId,pObjectType,ppObjectName,ppTraceId,ppParentTraceId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanner_INTERFACE_DEFINED__ */


#ifndef __IScanController_INTERFACE_DEFINED__
#define __IScanController_INTERFACE_DEFINED__

/* interface IScanController */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanController;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F77B440A-6CBC-4AFD-AA22-444552960E50")
    IScanController : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateScanner( 
            /* [retval][out] */ IScanner **ppScanner) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateScanParameters( 
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetActiveScanners( 
            /* [out] */ SAFEARRAY * *ppScanners) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddScheduleScan( 
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateScheduleScan( 
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveScheduledScan( 
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNumScheduledScans( 
            /* [out] */ long *pNumScheduledScans) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScheduledScan( 
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScheduledScanParams( 
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddScanExclusion( 
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddScanExclusionEx( 
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveScanExclusion( 
            /* [in] */ BSTR pID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateScanExclusion( 
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNumScanExclusions( 
            /* [out] */ long *pNumScanExclusions) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanExclusionIDs( 
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanExclusion( 
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ClearScanExclusions( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScanConfig( 
            /* [retval][out] */ ScanConfigStruct *pScanConfig) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetScanConfig( 
            /* [in] */ ScanConfigStruct *pScanConfig) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoClean( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoClean( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanArchives( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanArchives( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanExtra( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanExtra( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanRootkit( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanRootkit( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_PumHandling( 
            /* [retval][out] */ _PupPumHandling *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_PumHandling( 
            /* [in] */ _PupPumHandling pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_PupHandling( 
            /* [retval][out] */ _PupPumHandling *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_PupHandling( 
            /* [in] */ _PupPumHandling pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalScannedItems( 
            /* [retval][out] */ UINT64 *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TotalScannedItems( 
            /* [in] */ UINT64 pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalThreatsDetected( 
            /* [retval][out] */ UINT64 *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TotalThreatsDetected( 
            /* [in] */ UINT64 pVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PrepareUpdate( 
            /* [in] */ long timeoutMs) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FinishUpdate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsRebootNeededForInit( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetLastScanTime( 
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNextScheduledScanTime( 
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetLastActiveScanner( 
            /* [retval][out] */ IScanner **ppLastActiveScanner) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanController * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanController * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanController * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanController * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanController * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanController * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanController * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanController * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanController * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanController * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanController * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanController * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanController * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanController * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanController * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanController * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanController * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanController * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanController * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanController * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanController * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanController * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanController * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanController * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanController * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanController * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanController * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanController * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanController * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanController * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanController * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanController * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanController * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanController * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanController * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanController * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanController * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanController * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanController * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanController * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanController * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanController * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanController * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanController * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanController * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanController * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanController * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        END_INTERFACE
    } IScanControllerVtbl;

    interface IScanController
    {
        CONST_VTBL struct IScanControllerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanController_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanController_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanController_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanController_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanController_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanController_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanController_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanController_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanController_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanController_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanController_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanController_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanController_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanController_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanController_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanController_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanController_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanController_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanController_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanController_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanController_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanController_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanController_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanController_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanController_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanController_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanController_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanController_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanController_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanController_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanController_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanController_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanController_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanController_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanController_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanController_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanController_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanController_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanController_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanController_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanController_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanController_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanController_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanController_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanController_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanController_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanController_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanController_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanController_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV2_INTERFACE_DEFINED__
#define __IScanControllerV2_INTERFACE_DEFINED__

/* interface IScanControllerV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0DB6AD16-564C-451A-A173-0F31A62B7A4D")
    IScanControllerV2 : public IScanController
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddScheduleScanEx( 
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateScheduleScanEx( 
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveScheduledScanEx( 
            /* [in] */ BSTR pID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScheduledScanEx( 
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetScheduledScanParamsEx( 
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNextScheduledScanTimeEx( 
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV2 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV2 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV2 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV2 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV2 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV2 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV2 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV2 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV2 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV2 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV2 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV2 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV2 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV2 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV2 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV2 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV2 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV2 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV2 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV2 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV2 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV2 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV2 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV2 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV2 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV2 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV2 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV2 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV2 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV2 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        END_INTERFACE
    } IScanControllerV2Vtbl;

    interface IScanControllerV2
    {
        CONST_VTBL struct IScanControllerV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV2_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV2_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV2_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV2_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV2_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV2_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV2_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV2_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV2_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV2_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV2_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV2_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV2_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV2_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV2_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV2_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV2_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV2_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV2_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV2_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV2_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV2_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV2_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV2_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV2_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV2_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV2_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV2_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV2_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV2_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV2_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV2_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV2_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV2_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV2_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV2_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV2_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV2_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV2_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV2_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV2_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV2_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV2_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV2_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV2_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV2_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV2_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV2_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV2_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV2_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV3_INTERFACE_DEFINED__
#define __IScanControllerV3_INTERFACE_DEFINED__

/* interface IScanControllerV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10DAE713-FD88-4ADB-9406-04CB574D543C")
    IScanControllerV3 : public IScanControllerV2
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableShuriken( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableShuriken( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartV2( 
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ScanPriority( 
            /* [retval][out] */ _ScanPriority *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ScanPriority( 
            /* [in] */ _ScanPriority pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV3 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV3 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV3 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV3 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV3 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV3 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV3 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV3 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV3 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV3 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV3 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV3 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV3 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV3 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV3 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV3 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV3 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV3 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV3 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV3 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV3 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV3 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV3 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV3 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV3 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV3 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV3 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV3 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV3 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV3 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV3 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV3 * This,
            /* [in] */ _ScanPriority pVal);
        
        END_INTERFACE
    } IScanControllerV3Vtbl;

    interface IScanControllerV3
    {
        CONST_VTBL struct IScanControllerV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV3_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV3_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV3_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV3_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV3_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV3_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV3_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV3_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV3_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV3_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV3_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV3_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV3_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV3_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV3_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV3_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV3_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV3_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV3_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV3_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV3_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV3_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV3_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV3_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV3_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV3_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV3_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV3_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV3_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV3_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV3_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV3_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV3_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV3_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV3_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV3_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV3_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV3_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV3_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV3_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV3_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV3_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV3_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV3_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV3_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV3_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV3_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV3_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV3_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV3_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV3_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV3_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV3_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV3_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV3_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV4_INTERFACE_DEFINED__
#define __IScanControllerV4_INTERFACE_DEFINED__

/* interface IScanControllerV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C7BCC13C-47B9-4DC0-8FC6-B2A489EF60EF")
    IScanControllerV4 : public IScanControllerV3
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PowerSuspendNotification( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PowerResumeNotification( 
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StartV3( 
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV4 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV4 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV4 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV4 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV4 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV4 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV4 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV4 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV4 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV4 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV4 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV4 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV4 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV4 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV4 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV4 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV4 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV4 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV4 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV4 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV4 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV4 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV4 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV4 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV4 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV4 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV4 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV4 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV4 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV4 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV4 * This,
            /* [in] */ _ScanPriority pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IScanControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IScanControllerV4 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IScanControllerV4 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        END_INTERFACE
    } IScanControllerV4Vtbl;

    interface IScanControllerV4
    {
        CONST_VTBL struct IScanControllerV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV4_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV4_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV4_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV4_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV4_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV4_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV4_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV4_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV4_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV4_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV4_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV4_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV4_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV4_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV4_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV4_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV4_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV4_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV4_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV4_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV4_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV4_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV4_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV4_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV4_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV4_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV4_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV4_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV4_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV4_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV4_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV4_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV4_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV4_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV4_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV4_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV4_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV4_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV4_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV4_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV4_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV4_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV4_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV4_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV4_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV4_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV4_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV4_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV4_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV4_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV4_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV4_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV4_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV4_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 


#define IScanControllerV4_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IScanControllerV4_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IScanControllerV4_StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV4_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV5_INTERFACE_DEFINED__
#define __IScanControllerV5_INTERFACE_DEFINED__

/* interface IScanControllerV5 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("553B1C62-BE94-4CE0-8041-EB3BC1329D20")
    IScanControllerV5 : public IScanControllerV4
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE StopV2( 
            /* [in] */ long timeoutMs,
            /* [in] */ _ScanStopType stopType) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV5 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV5 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV5 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV5 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV5 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV5 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV5 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV5 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV5 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV5 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV5 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV5 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV5 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV5 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV5 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV5 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV5 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV5 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV5 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV5 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV5 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV5 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV5 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV5 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV5 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV5 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV5 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV5 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV5 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV5 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV5 * This,
            /* [in] */ _ScanPriority pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IScanControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IScanControllerV5 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IScanControllerV5 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IScanControllerV5 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ScanStopType stopType);
        
        END_INTERFACE
    } IScanControllerV5Vtbl;

    interface IScanControllerV5
    {
        CONST_VTBL struct IScanControllerV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV5_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV5_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV5_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV5_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV5_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV5_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV5_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV5_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV5_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV5_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV5_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV5_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV5_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV5_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV5_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV5_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV5_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV5_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV5_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV5_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV5_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV5_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV5_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV5_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV5_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV5_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV5_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV5_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV5_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV5_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV5_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV5_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV5_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV5_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV5_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV5_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV5_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV5_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV5_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV5_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV5_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV5_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV5_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV5_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV5_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV5_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV5_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV5_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV5_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV5_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV5_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV5_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV5_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV5_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 


#define IScanControllerV5_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IScanControllerV5_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IScanControllerV5_StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild) ) 


#define IScanControllerV5_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV5_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV6_INTERFACE_DEFINED__
#define __IScanControllerV6_INTERFACE_DEFINED__

/* interface IScanControllerV6 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV6;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("118F4330-CAF5-4A54-ABB0-DC936669ED2F")
    IScanControllerV6 : public IScanControllerV5
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalPUPsDetected( 
            /* [retval][out] */ UINT64 *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TotalPUPsDetected( 
            /* [in] */ UINT64 pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalPUMsDetected( 
            /* [retval][out] */ UINT64 *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TotalPUMsDetected( 
            /* [in] */ UINT64 pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV6 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV6 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV6 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV6 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV6 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV6 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV6 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV6 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV6 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV6 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV6 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV6 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV6 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV6 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV6 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV6 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV6 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV6 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV6 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV6 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV6 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV6 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV6 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV6 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV6 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV6 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV6 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV6 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV6 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV6 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV6 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV6 * This,
            /* [in] */ _ScanPriority pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IScanControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IScanControllerV6 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IScanControllerV6 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IScanControllerV6 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ScanStopType stopType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUPsDetected )( 
            IScanControllerV6 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUPsDetected )( 
            IScanControllerV6 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUMsDetected )( 
            IScanControllerV6 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUMsDetected )( 
            IScanControllerV6 * This,
            /* [in] */ UINT64 pVal);
        
        END_INTERFACE
    } IScanControllerV6Vtbl;

    interface IScanControllerV6
    {
        CONST_VTBL struct IScanControllerV6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV6_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV6_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV6_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV6_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV6_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV6_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV6_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV6_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV6_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV6_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV6_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV6_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV6_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV6_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV6_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV6_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV6_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV6_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV6_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV6_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV6_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV6_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV6_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV6_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV6_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV6_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV6_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV6_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV6_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV6_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV6_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV6_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV6_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV6_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV6_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV6_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV6_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV6_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV6_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV6_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV6_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV6_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV6_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV6_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV6_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV6_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV6_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV6_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV6_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV6_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV6_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV6_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV6_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV6_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 


#define IScanControllerV6_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IScanControllerV6_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IScanControllerV6_StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild) ) 


#define IScanControllerV6_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IScanControllerV6_get_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV6_put_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV6_get_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUMsDetected(This,pVal) ) 

#define IScanControllerV6_put_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUMsDetected(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV6_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV7_INTERFACE_DEFINED__
#define __IScanControllerV7_INTERFACE_DEFINED__

/* interface IScanControllerV7 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV7;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("115D004C-CC20-4945-BCC8-FE5043DD42D0")
    IScanControllerV7 : public IScanControllerV6
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckForUpdatesBeforeScans( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckForUpdatesBeforeScans( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV7Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV7 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV7 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV7 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV7 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV7 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV7 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV7 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV7 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV7 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV7 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV7 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV7 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV7 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV7 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV7 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV7 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV7 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV7 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV7 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV7 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV7 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV7 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV7 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV7 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV7 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV7 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV7 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV7 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV7 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV7 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV7 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV7 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV7 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV7 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV7 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV7 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV7 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV7 * This,
            /* [in] */ _ScanPriority pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IScanControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IScanControllerV7 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IScanControllerV7 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ScanStopType stopType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUPsDetected )( 
            IScanControllerV7 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUPsDetected )( 
            IScanControllerV7 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUMsDetected )( 
            IScanControllerV7 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUMsDetected )( 
            IScanControllerV7 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckForUpdatesBeforeScans )( 
            IScanControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckForUpdatesBeforeScans )( 
            IScanControllerV7 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        END_INTERFACE
    } IScanControllerV7Vtbl;

    interface IScanControllerV7
    {
        CONST_VTBL struct IScanControllerV7Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV7_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV7_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV7_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV7_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV7_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV7_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV7_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV7_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV7_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV7_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV7_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV7_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV7_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV7_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV7_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV7_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV7_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV7_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV7_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV7_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV7_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV7_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV7_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV7_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV7_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV7_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV7_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV7_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV7_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV7_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV7_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV7_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV7_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV7_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV7_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV7_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV7_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV7_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV7_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV7_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV7_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV7_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV7_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV7_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV7_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV7_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV7_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV7_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV7_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV7_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV7_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV7_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV7_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV7_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV7_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV7_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV7_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV7_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV7_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV7_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV7_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 


#define IScanControllerV7_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IScanControllerV7_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IScanControllerV7_StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild) ) 


#define IScanControllerV7_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IScanControllerV7_get_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV7_put_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV7_get_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUMsDetected(This,pVal) ) 

#define IScanControllerV7_put_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUMsDetected(This,pVal) ) 


#define IScanControllerV7_get_CheckForUpdatesBeforeScans(This,pVal)	\
    ( (This)->lpVtbl -> get_CheckForUpdatesBeforeScans(This,pVal) ) 

#define IScanControllerV7_put_CheckForUpdatesBeforeScans(This,pVal)	\
    ( (This)->lpVtbl -> put_CheckForUpdatesBeforeScans(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV7_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV8_INTERFACE_DEFINED__
#define __IScanControllerV8_INTERFACE_DEFINED__

/* interface IScanControllerV8 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV8;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6A66A096-E54B-4F72-8654-ED7715B07B43")
    IScanControllerV8 : public IScanControllerV7
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GameModeEntered( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GameModeExited( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV8Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV8 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV8 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV8 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV8 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV8 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV8 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV8 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV8 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV8 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV8 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV8 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV8 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV8 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV8 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV8 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV8 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV8 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV8 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV8 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV8 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV8 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV8 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV8 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV8 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV8 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV8 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV8 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV8 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV8 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV8 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV8 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV8 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV8 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV8 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV8 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV8 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV8 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV8 * This,
            /* [in] */ _ScanPriority pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IScanControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IScanControllerV8 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IScanControllerV8 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ScanStopType stopType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUPsDetected )( 
            IScanControllerV8 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUPsDetected )( 
            IScanControllerV8 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUMsDetected )( 
            IScanControllerV8 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUMsDetected )( 
            IScanControllerV8 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckForUpdatesBeforeScans )( 
            IScanControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckForUpdatesBeforeScans )( 
            IScanControllerV8 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GameModeEntered )( 
            IScanControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GameModeExited )( 
            IScanControllerV8 * This);
        
        END_INTERFACE
    } IScanControllerV8Vtbl;

    interface IScanControllerV8
    {
        CONST_VTBL struct IScanControllerV8Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV8_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV8_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV8_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV8_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV8_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV8_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV8_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV8_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV8_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV8_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV8_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV8_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV8_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV8_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV8_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV8_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV8_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV8_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV8_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV8_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV8_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV8_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV8_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV8_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV8_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV8_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV8_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV8_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV8_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV8_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV8_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV8_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV8_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV8_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV8_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV8_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV8_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV8_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV8_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV8_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV8_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV8_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV8_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV8_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV8_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV8_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV8_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV8_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV8_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV8_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV8_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV8_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV8_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV8_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV8_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV8_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV8_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV8_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV8_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV8_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV8_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 


#define IScanControllerV8_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IScanControllerV8_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IScanControllerV8_StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild) ) 


#define IScanControllerV8_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IScanControllerV8_get_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV8_put_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV8_get_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUMsDetected(This,pVal) ) 

#define IScanControllerV8_put_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUMsDetected(This,pVal) ) 


#define IScanControllerV8_get_CheckForUpdatesBeforeScans(This,pVal)	\
    ( (This)->lpVtbl -> get_CheckForUpdatesBeforeScans(This,pVal) ) 

#define IScanControllerV8_put_CheckForUpdatesBeforeScans(This,pVal)	\
    ( (This)->lpVtbl -> put_CheckForUpdatesBeforeScans(This,pVal) ) 


#define IScanControllerV8_GameModeEntered(This)	\
    ( (This)->lpVtbl -> GameModeEntered(This) ) 

#define IScanControllerV8_GameModeExited(This)	\
    ( (This)->lpVtbl -> GameModeExited(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV8_INTERFACE_DEFINED__ */


#ifndef __IScanControllerV9_INTERFACE_DEFINED__
#define __IScanControllerV9_INTERFACE_DEFINED__

/* interface IScanControllerV9 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerV9;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68E3012A-E3EC-4D66-9132-4E412F487165")
    IScanControllerV9 : public IScanControllerV8
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableShurikenAggressiveMode( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableShurikenAggressiveMode( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableLinking( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableLinking( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowNetworkPaths( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowNetworkPaths( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UseMinimalWhitelisting( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UseMinimalWhitelisting( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerV9Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerV9 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerV9 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerV9 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerV9 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerV9 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerV9 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerV9 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IScanControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanner )( 
            IScanControllerV9 * This,
            /* [retval][out] */ IScanner **ppScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanParameters )( 
            IScanControllerV9 * This,
            /* [in] */ _ScanType ScanType,
            /* [retval][out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetActiveScanners )( 
            IScanControllerV9 * This,
            /* [out] */ SAFEARRAY * *ppScanners);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScan )( 
            IScanControllerV9 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScan )( 
            IScanControllerV9 * This,
            /* [in] */ long index,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScan )( 
            IScanControllerV9 * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScheduledScans )( 
            IScanControllerV9 * This,
            /* [out] */ long *pNumScheduledScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScan )( 
            IScanControllerV9 * This,
            /* [in] */ long index,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParams )( 
            IScanControllerV9 * This,
            /* [in] */ long index,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusion )( 
            IScanControllerV9 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScanExclusionEx )( 
            IScanControllerV9 * This,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScanExclusion )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScanExclusion )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR path);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumScanExclusions )( 
            IScanControllerV9 * This,
            /* [out] */ long *pNumScanExclusions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusionIDs )( 
            IScanControllerV9 * This,
            /* [retval][out] */ SAFEARRAY * *ppExclusionIDs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanExclusion )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanExclusionType *pType,
            /* [out] */ BSTR *ppPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearScanExclusions )( 
            IScanControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScanConfig )( 
            IScanControllerV9 * This,
            /* [retval][out] */ ScanConfigStruct *pScanConfig);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            IScanControllerV9 * This,
            /* [in] */ ScanConfigStruct *pScanConfig);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IScanControllerV9 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IScanControllerV9 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IScanControllerV9 * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IScanControllerV9 * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalScannedItems )( 
            IScanControllerV9 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalScannedItems )( 
            IScanControllerV9 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalThreatsDetected )( 
            IScanControllerV9 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalThreatsDetected )( 
            IScanControllerV9 * This,
            /* [in] */ UINT64 pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IScanControllerV9 * This,
            /* [in] */ long timeoutMs);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IScanControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsRebootNeededForInit )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastScanTime )( 
            IScanControllerV9 * This,
            /* [out] */ DATE *pScanTime,
            /* [out] */ VARIANT_BOOL *pScanRunBefore);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTime )( 
            IScanControllerV9 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pNoScanScheduled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLastActiveScanner )( 
            IScanControllerV9 * This,
            /* [retval][out] */ IScanner **ppLastActiveScanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddScheduleScanEx )( 
            IScanControllerV9 * This,
            /* [in] */ IScanParameters *pScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates,
            /* [in] */ VARIANT_BOOL checkLicenseState,
            /* [out] */ BSTR *ppID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateScheduleScanEx )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID,
            /* [in] */ IScanParameters *ppScanParams,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveScheduledScanEx )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanEx )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID,
            /* [out] */ _ScanType *pScanType,
            /* [out] */ DATE *pStartTime,
            /* [out] */ _ScheduleFrequency *pFrequency,
            /* [out] */ long *pRecurrence,
            /* [out] */ long *pRecoveryPeriod,
            /* [out] */ VARIANT_BOOL *pCheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetScheduledScanParamsEx )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pID,
            /* [out] */ IScanParameters **ppScanParams);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextScheduledScanTimeEx )( 
            IScanControllerV9 * This,
            /* [out] */ DATE *pNextScheduleTime,
            /* [out] */ VARIANT_BOOL *pOnReboot,
            /* [out] */ VARIANT_BOOL *pScanScheduled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShuriken )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShuriken )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV2 )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanPriority )( 
            IScanControllerV9 * This,
            /* [retval][out] */ _ScanPriority *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanPriority )( 
            IScanControllerV9 * This,
            /* [in] */ _ScanPriority pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IScanControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StartV3 )( 
            IScanControllerV9 * This,
            /* [in] */ BSTR pImplFolderPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ ICleanController *pCleanController,
            /* [in] */ /* external definition not present */ ITelemetryController *pTelemetryController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ ICloudController *pCloudController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *StopV2 )( 
            IScanControllerV9 * This,
            /* [in] */ long timeoutMs,
            /* [in] */ _ScanStopType stopType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUPsDetected )( 
            IScanControllerV9 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUPsDetected )( 
            IScanControllerV9 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPUMsDetected )( 
            IScanControllerV9 * This,
            /* [retval][out] */ UINT64 *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TotalPUMsDetected )( 
            IScanControllerV9 * This,
            /* [in] */ UINT64 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckForUpdatesBeforeScans )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckForUpdatesBeforeScans )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GameModeEntered )( 
            IScanControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GameModeExited )( 
            IScanControllerV9 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableShurikenAggressiveMode )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableShurikenAggressiveMode )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLinking )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLinking )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowNetworkPaths )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowNetworkPaths )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseMinimalWhitelisting )( 
            IScanControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseMinimalWhitelisting )( 
            IScanControllerV9 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        END_INTERFACE
    } IScanControllerV9Vtbl;

    interface IScanControllerV9
    {
        CONST_VTBL struct IScanControllerV9Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerV9_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerV9_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerV9_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerV9_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerV9_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerV9_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerV9_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerV9_Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion)	\
    ( (This)->lpVtbl -> Start(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pProductVersion) ) 

#define IScanControllerV9_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IScanControllerV9_CreateScanner(This,ppScanner)	\
    ( (This)->lpVtbl -> CreateScanner(This,ppScanner) ) 

#define IScanControllerV9_CreateScanParameters(This,ScanType,ppScanParams)	\
    ( (This)->lpVtbl -> CreateScanParameters(This,ScanType,ppScanParams) ) 

#define IScanControllerV9_GetActiveScanners(This,ppScanners)	\
    ( (This)->lpVtbl -> GetActiveScanners(This,ppScanners) ) 

#define IScanControllerV9_AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> AddScheduleScan(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV9_UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScan(This,index,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV9_RemoveScheduledScan(This,index)	\
    ( (This)->lpVtbl -> RemoveScheduledScan(This,index) ) 

#define IScanControllerV9_GetNumScheduledScans(This,pNumScheduledScans)	\
    ( (This)->lpVtbl -> GetNumScheduledScans(This,pNumScheduledScans) ) 

#define IScanControllerV9_GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScan(This,index,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV9_GetScheduledScanParams(This,index,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParams(This,index,ppScanParams) ) 

#define IScanControllerV9_AddScanExclusion(This,type,path)	\
    ( (This)->lpVtbl -> AddScanExclusion(This,type,path) ) 

#define IScanControllerV9_AddScanExclusionEx(This,type,path,ppID)	\
    ( (This)->lpVtbl -> AddScanExclusionEx(This,type,path,ppID) ) 

#define IScanControllerV9_RemoveScanExclusion(This,pID)	\
    ( (This)->lpVtbl -> RemoveScanExclusion(This,pID) ) 

#define IScanControllerV9_UpdateScanExclusion(This,pID,type,path)	\
    ( (This)->lpVtbl -> UpdateScanExclusion(This,pID,type,path) ) 

#define IScanControllerV9_GetNumScanExclusions(This,pNumScanExclusions)	\
    ( (This)->lpVtbl -> GetNumScanExclusions(This,pNumScanExclusions) ) 

#define IScanControllerV9_GetScanExclusionIDs(This,ppExclusionIDs)	\
    ( (This)->lpVtbl -> GetScanExclusionIDs(This,ppExclusionIDs) ) 

#define IScanControllerV9_GetScanExclusion(This,pID,pType,ppPath)	\
    ( (This)->lpVtbl -> GetScanExclusion(This,pID,pType,ppPath) ) 

#define IScanControllerV9_ClearScanExclusions(This)	\
    ( (This)->lpVtbl -> ClearScanExclusions(This) ) 

#define IScanControllerV9_GetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> GetScanConfig(This,pScanConfig) ) 

#define IScanControllerV9_SetScanConfig(This,pScanConfig)	\
    ( (This)->lpVtbl -> SetScanConfig(This,pScanConfig) ) 

#define IScanControllerV9_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IScanControllerV9_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IScanControllerV9_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IScanControllerV9_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IScanControllerV9_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IScanControllerV9_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IScanControllerV9_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IScanControllerV9_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IScanControllerV9_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IScanControllerV9_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IScanControllerV9_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IScanControllerV9_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 

#define IScanControllerV9_get_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalScannedItems(This,pVal) ) 

#define IScanControllerV9_put_TotalScannedItems(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalScannedItems(This,pVal) ) 

#define IScanControllerV9_get_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV9_put_TotalThreatsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalThreatsDetected(This,pVal) ) 

#define IScanControllerV9_PrepareUpdate(This,timeoutMs)	\
    ( (This)->lpVtbl -> PrepareUpdate(This,timeoutMs) ) 

#define IScanControllerV9_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IScanControllerV9_IsRebootNeededForInit(This,pVal)	\
    ( (This)->lpVtbl -> IsRebootNeededForInit(This,pVal) ) 

#define IScanControllerV9_GetLastScanTime(This,pScanTime,pScanRunBefore)	\
    ( (This)->lpVtbl -> GetLastScanTime(This,pScanTime,pScanRunBefore) ) 

#define IScanControllerV9_GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTime(This,pNextScheduleTime,pNoScanScheduled) ) 

#define IScanControllerV9_GetLastActiveScanner(This,ppLastActiveScanner)	\
    ( (This)->lpVtbl -> GetLastActiveScanner(This,ppLastActiveScanner) ) 


#define IScanControllerV9_AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID)	\
    ( (This)->lpVtbl -> AddScheduleScanEx(This,pScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates,checkLicenseState,ppID) ) 

#define IScanControllerV9_UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> UpdateScheduleScanEx(This,pID,ppScanParams,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerV9_RemoveScheduledScanEx(This,pID)	\
    ( (This)->lpVtbl -> RemoveScheduledScanEx(This,pID) ) 

#define IScanControllerV9_GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates)	\
    ( (This)->lpVtbl -> GetScheduledScanEx(This,pID,pScanType,pStartTime,pFrequency,pRecurrence,pRecoveryPeriod,pCheckForUpdates) ) 

#define IScanControllerV9_GetScheduledScanParamsEx(This,pID,ppScanParams)	\
    ( (This)->lpVtbl -> GetScheduledScanParamsEx(This,pID,ppScanParams) ) 

#define IScanControllerV9_GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled)	\
    ( (This)->lpVtbl -> GetNextScheduledScanTimeEx(This,pNextScheduleTime,pOnReboot,pScanScheduled) ) 


#define IScanControllerV9_get_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShuriken(This,pVal) ) 

#define IScanControllerV9_put_EnableShuriken(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShuriken(This,pVal) ) 

#define IScanControllerV9_StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion)	\
    ( (This)->lpVtbl -> StartV2(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductVersion) ) 

#define IScanControllerV9_get_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanPriority(This,pVal) ) 

#define IScanControllerV9_put_ScanPriority(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanPriority(This,pVal) ) 


#define IScanControllerV9_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IScanControllerV9_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IScanControllerV9_StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> StartV3(This,pImplFolderPath,pDataPath,pLogController,pCleanController,pTelemetryController,pUpdateController,pLicenseController,pCloudController,pProductCode,pProductVersion,pProductBuild) ) 


#define IScanControllerV9_StopV2(This,timeoutMs,stopType)	\
    ( (This)->lpVtbl -> StopV2(This,timeoutMs,stopType) ) 


#define IScanControllerV9_get_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV9_put_TotalPUPsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUPsDetected(This,pVal) ) 

#define IScanControllerV9_get_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPUMsDetected(This,pVal) ) 

#define IScanControllerV9_put_TotalPUMsDetected(This,pVal)	\
    ( (This)->lpVtbl -> put_TotalPUMsDetected(This,pVal) ) 


#define IScanControllerV9_get_CheckForUpdatesBeforeScans(This,pVal)	\
    ( (This)->lpVtbl -> get_CheckForUpdatesBeforeScans(This,pVal) ) 

#define IScanControllerV9_put_CheckForUpdatesBeforeScans(This,pVal)	\
    ( (This)->lpVtbl -> put_CheckForUpdatesBeforeScans(This,pVal) ) 


#define IScanControllerV9_GameModeEntered(This)	\
    ( (This)->lpVtbl -> GameModeEntered(This) ) 

#define IScanControllerV9_GameModeExited(This)	\
    ( (This)->lpVtbl -> GameModeExited(This) ) 


#define IScanControllerV9_get_EnableShurikenAggressiveMode(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableShurikenAggressiveMode(This,pVal) ) 

#define IScanControllerV9_put_EnableShurikenAggressiveMode(This,pVal)	\
    ( (This)->lpVtbl -> put_EnableShurikenAggressiveMode(This,pVal) ) 

#define IScanControllerV9_get_DisableLinking(This,pVal)	\
    ( (This)->lpVtbl -> get_DisableLinking(This,pVal) ) 

#define IScanControllerV9_put_DisableLinking(This,pVal)	\
    ( (This)->lpVtbl -> put_DisableLinking(This,pVal) ) 

#define IScanControllerV9_get_AllowNetworkPaths(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowNetworkPaths(This,pVal) ) 

#define IScanControllerV9_put_AllowNetworkPaths(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowNetworkPaths(This,pVal) ) 

#define IScanControllerV9_get_UseMinimalWhitelisting(This,pVal)	\
    ( (This)->lpVtbl -> get_UseMinimalWhitelisting(This,pVal) ) 

#define IScanControllerV9_put_UseMinimalWhitelisting(This,pVal)	\
    ( (This)->lpVtbl -> put_UseMinimalWhitelisting(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerV9_INTERFACE_DEFINED__ */


#ifndef __ICustomScanParameters_INTERFACE_DEFINED__
#define __ICustomScanParameters_INTERFACE_DEFINED__

/* interface ICustomScanParameters */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ICustomScanParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7AEBAD20-B80A-427D-B7D5-D2983291132E")
    ICustomScanParameters : public IScanParameters
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICustomScanParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICustomScanParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICustomScanParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICustomScanParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICustomScanParameters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICustomScanParameters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICustomScanParameters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICustomScanParameters * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ICustomScanParameters * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            ICustomScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            ICustomScanParameters * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            ICustomScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            ICustomScanParameters * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            ICustomScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            ICustomScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            ICustomScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            ICustomScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            ICustomScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            ICustomScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        END_INTERFACE
    } ICustomScanParametersVtbl;

    interface ICustomScanParameters
    {
        CONST_VTBL struct ICustomScanParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICustomScanParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICustomScanParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICustomScanParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICustomScanParameters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICustomScanParameters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICustomScanParameters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICustomScanParameters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICustomScanParameters_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define ICustomScanParameters_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define ICustomScanParameters_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define ICustomScanParameters_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define ICustomScanParameters_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define ICustomScanParameters_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define ICustomScanParameters_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define ICustomScanParameters_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define ICustomScanParameters_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define ICustomScanParameters_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define ICustomScanParameters_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define ICustomScanParameters_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define ICustomScanParameters_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define ICustomScanParameters_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define ICustomScanParameters_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define ICustomScanParameters_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define ICustomScanParameters_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define ICustomScanParameters_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define ICustomScanParameters_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define ICustomScanParameters_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define ICustomScanParameters_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define ICustomScanParameters_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define ICustomScanParameters_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define ICustomScanParameters_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define ICustomScanParameters_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define ICustomScanParameters_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define ICustomScanParameters_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICustomScanParameters_INTERFACE_DEFINED__ */


#ifndef __IMinimalScanParameters_INTERFACE_DEFINED__
#define __IMinimalScanParameters_INTERFACE_DEFINED__

/* interface IMinimalScanParameters */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IMinimalScanParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04F8CDB5-1E26-491C-8602-D2ADE2D8E17A")
    IMinimalScanParameters : public IScanParameters
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct IMinimalScanParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMinimalScanParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMinimalScanParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMinimalScanParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMinimalScanParameters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMinimalScanParameters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMinimalScanParameters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMinimalScanParameters * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IMinimalScanParameters * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            IMinimalScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            IMinimalScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            IMinimalScanParameters * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            IMinimalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            IMinimalScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            IMinimalScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            IMinimalScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        END_INTERFACE
    } IMinimalScanParametersVtbl;

    interface IMinimalScanParameters
    {
        CONST_VTBL struct IMinimalScanParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMinimalScanParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMinimalScanParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMinimalScanParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMinimalScanParameters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMinimalScanParameters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMinimalScanParameters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMinimalScanParameters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMinimalScanParameters_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define IMinimalScanParameters_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define IMinimalScanParameters_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define IMinimalScanParameters_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define IMinimalScanParameters_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define IMinimalScanParameters_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define IMinimalScanParameters_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define IMinimalScanParameters_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define IMinimalScanParameters_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define IMinimalScanParameters_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define IMinimalScanParameters_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define IMinimalScanParameters_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define IMinimalScanParameters_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define IMinimalScanParameters_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define IMinimalScanParameters_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define IMinimalScanParameters_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define IMinimalScanParameters_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define IMinimalScanParameters_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define IMinimalScanParameters_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define IMinimalScanParameters_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define IMinimalScanParameters_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define IMinimalScanParameters_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define IMinimalScanParameters_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define IMinimalScanParameters_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define IMinimalScanParameters_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define IMinimalScanParameters_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define IMinimalScanParameters_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMinimalScanParameters_INTERFACE_DEFINED__ */


#ifndef __INormalScanParameters_INTERFACE_DEFINED__
#define __INormalScanParameters_INTERFACE_DEFINED__

/* interface INormalScanParameters */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_INormalScanParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B471ACFB-E67A-4BE9-A328-F6A906DDDEAA")
    INormalScanParameters : public IScanParameters
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct INormalScanParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INormalScanParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INormalScanParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INormalScanParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            INormalScanParameters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            INormalScanParameters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            INormalScanParameters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            INormalScanParameters * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            INormalScanParameters * This,
            /* [in] */ _ScanType *pScanType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomScanPath )( 
            INormalScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScanPaths )( 
            INormalScanParameters * This,
            /* [retval][out] */ SAFEARRAY * *ppCustomScanPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomScanPath )( 
            INormalScanParameters * This,
            /* [in] */ BSTR pPathToScan);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ClearCustomScanPaths )( 
            INormalScanParameters * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoClean )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoClean )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRestart )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRestart )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanArchives )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanArchives )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanExtra )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanExtra )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanFileSystem )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanFileSystem )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanMemory )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanMemory )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRegistry )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRegistry )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanRootkit )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanRootkit )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScanStartup )( 
            INormalScanParameters * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScanStartup )( 
            INormalScanParameters * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PumHandling )( 
            INormalScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PumHandling )( 
            INormalScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PupHandling )( 
            INormalScanParameters * This,
            /* [retval][out] */ _PupPumHandling *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PupHandling )( 
            INormalScanParameters * This,
            /* [in] */ _PupPumHandling pVal);
        
        END_INTERFACE
    } INormalScanParametersVtbl;

    interface INormalScanParameters
    {
        CONST_VTBL struct INormalScanParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INormalScanParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INormalScanParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INormalScanParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INormalScanParameters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define INormalScanParameters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define INormalScanParameters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define INormalScanParameters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define INormalScanParameters_GetType(This,pScanType)	\
    ( (This)->lpVtbl -> GetType(This,pScanType) ) 

#define INormalScanParameters_AddCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> AddCustomScanPath(This,pPathToScan) ) 

#define INormalScanParameters_GetCustomScanPaths(This,ppCustomScanPaths)	\
    ( (This)->lpVtbl -> GetCustomScanPaths(This,ppCustomScanPaths) ) 

#define INormalScanParameters_RemoveCustomScanPath(This,pPathToScan)	\
    ( (This)->lpVtbl -> RemoveCustomScanPath(This,pPathToScan) ) 

#define INormalScanParameters_ClearCustomScanPaths(This)	\
    ( (This)->lpVtbl -> ClearCustomScanPaths(This) ) 

#define INormalScanParameters_get_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoClean(This,pVal) ) 

#define INormalScanParameters_put_AutoClean(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoClean(This,pVal) ) 

#define INormalScanParameters_get_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> get_AutoRestart(This,pVal) ) 

#define INormalScanParameters_put_AutoRestart(This,pVal)	\
    ( (This)->lpVtbl -> put_AutoRestart(This,pVal) ) 

#define INormalScanParameters_get_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanArchives(This,pVal) ) 

#define INormalScanParameters_put_ScanArchives(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanArchives(This,pVal) ) 

#define INormalScanParameters_get_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanExtra(This,pVal) ) 

#define INormalScanParameters_put_ScanExtra(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanExtra(This,pVal) ) 

#define INormalScanParameters_get_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanFileSystem(This,pVal) ) 

#define INormalScanParameters_put_ScanFileSystem(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanFileSystem(This,pVal) ) 

#define INormalScanParameters_get_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanMemory(This,pVal) ) 

#define INormalScanParameters_put_ScanMemory(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanMemory(This,pVal) ) 

#define INormalScanParameters_get_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRegistry(This,pVal) ) 

#define INormalScanParameters_put_ScanRegistry(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRegistry(This,pVal) ) 

#define INormalScanParameters_get_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanRootkit(This,pVal) ) 

#define INormalScanParameters_put_ScanRootkit(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanRootkit(This,pVal) ) 

#define INormalScanParameters_get_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> get_ScanStartup(This,pVal) ) 

#define INormalScanParameters_put_ScanStartup(This,pVal)	\
    ( (This)->lpVtbl -> put_ScanStartup(This,pVal) ) 

#define INormalScanParameters_get_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PumHandling(This,pVal) ) 

#define INormalScanParameters_put_PumHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PumHandling(This,pVal) ) 

#define INormalScanParameters_get_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> get_PupHandling(This,pVal) ) 

#define INormalScanParameters_put_PupHandling(This,pVal)	\
    ( (This)->lpVtbl -> put_PupHandling(This,pVal) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __INormalScanParameters_INTERFACE_DEFINED__ */


#ifndef __IScanControllerEvents_INTERFACE_DEFINED__
#define __IScanControllerEvents_INTERFACE_DEFINED__

/* interface IScanControllerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AC5390D0-3831-4D42-BD1D-8151A5A1742C")
    IScanControllerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScanConfigOptionChanged( 
            /* [in] */ _ScanConfigOptionName option,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE NewActiveScanner( 
            /* [in] */ IScanner *scanner) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScanExclusionNotification( 
            /* [in] */ _ScanExclusionEventType eventType,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR pPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScheduledScanNotification( 
            /* [in] */ _ScheduledScanEventType eventType,
            /* [in] */ long index,
            /* [in] */ _ScanType ScanType,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScanCountChanged( 
            /* [in] */ UINT64 TotalScannedItems,
            /* [in] */ UINT64 TotalThreatsDetected) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScanConfigOptionChanged )( 
            IScanControllerEvents * This,
            /* [in] */ _ScanConfigOptionName option,
            /* [in] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *NewActiveScanner )( 
            IScanControllerEvents * This,
            /* [in] */ IScanner *scanner);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScanExclusionNotification )( 
            IScanControllerEvents * This,
            /* [in] */ _ScanExclusionEventType eventType,
            /* [in] */ BSTR pID,
            /* [in] */ _ScanExclusionType type,
            /* [in] */ BSTR pPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScheduledScanNotification )( 
            IScanControllerEvents * This,
            /* [in] */ _ScheduledScanEventType eventType,
            /* [in] */ long index,
            /* [in] */ _ScanType ScanType,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScanCountChanged )( 
            IScanControllerEvents * This,
            /* [in] */ UINT64 TotalScannedItems,
            /* [in] */ UINT64 TotalThreatsDetected);
        
        END_INTERFACE
    } IScanControllerEventsVtbl;

    interface IScanControllerEvents
    {
        CONST_VTBL struct IScanControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerEvents_ScanConfigOptionChanged(This,option,value)	\
    ( (This)->lpVtbl -> ScanConfigOptionChanged(This,option,value) ) 

#define IScanControllerEvents_NewActiveScanner(This,scanner)	\
    ( (This)->lpVtbl -> NewActiveScanner(This,scanner) ) 

#define IScanControllerEvents_ScanExclusionNotification(This,eventType,pID,type,pPath)	\
    ( (This)->lpVtbl -> ScanExclusionNotification(This,eventType,pID,type,pPath) ) 

#define IScanControllerEvents_ScheduledScanNotification(This,eventType,index,ScanType,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> ScheduledScanNotification(This,eventType,index,ScanType,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#define IScanControllerEvents_ScanCountChanged(This,TotalScannedItems,TotalThreatsDetected)	\
    ( (This)->lpVtbl -> ScanCountChanged(This,TotalScannedItems,TotalThreatsDetected) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerEvents_INTERFACE_DEFINED__ */


#ifndef ___IScanControllerEvents_DISPINTERFACE_DEFINED__
#define ___IScanControllerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IScanControllerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__IScanControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("78E69E6F-EC12-4B84-8431-1D68572C7A61")
    _IScanControllerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScanControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScanControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScanControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScanControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScanControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScanControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScanControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScanControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScanControllerEventsVtbl;

    interface _IScanControllerEvents
    {
        CONST_VTBL struct _IScanControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScanControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScanControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScanControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScanControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScanControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScanControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScanControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScanControllerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IScanControllerEventsV2_INTERFACE_DEFINED__
#define __IScanControllerEventsV2_INTERFACE_DEFINED__

/* interface IScanControllerEventsV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C85F3EB8-B099-4598-89C3-E33BAC2CE53D")
    IScanControllerEventsV2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScheduledScanNotificationEx( 
            /* [in] */ _ScheduledScanEventType eventType,
            /* [in] */ long index,
            /* [in] */ BSTR pScheduledScanID,
            /* [in] */ _ScanType ScanType,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScheduledScanNotificationEx )( 
            IScanControllerEventsV2 * This,
            /* [in] */ _ScheduledScanEventType eventType,
            /* [in] */ long index,
            /* [in] */ BSTR pScheduledScanID,
            /* [in] */ _ScanType ScanType,
            /* [in] */ DATE startTime,
            /* [in] */ _ScheduleFrequency frequency,
            /* [in] */ long recurrence,
            /* [in] */ long recoveryPeriod,
            /* [in] */ VARIANT_BOOL CheckForUpdates);
        
        END_INTERFACE
    } IScanControllerEventsV2Vtbl;

    interface IScanControllerEventsV2
    {
        CONST_VTBL struct IScanControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerEventsV2_ScheduledScanNotificationEx(This,eventType,index,pScheduledScanID,ScanType,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates)	\
    ( (This)->lpVtbl -> ScheduledScanNotificationEx(This,eventType,index,pScheduledScanID,ScanType,startTime,frequency,recurrence,recoveryPeriod,CheckForUpdates) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerEventsV2_INTERFACE_DEFINED__ */


#ifndef ___IScanControllerEventsV2_DISPINTERFACE_DEFINED__
#define ___IScanControllerEventsV2_DISPINTERFACE_DEFINED__

/* dispinterface _IScanControllerEventsV2 */
/* [uuid] */ 


EXTERN_C const IID DIID__IScanControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1097B101-1FF8-4DD8-A6C1-6C39FB2EA5D6")
    _IScanControllerEventsV2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScanControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScanControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScanControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScanControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScanControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScanControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScanControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScanControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScanControllerEventsV2Vtbl;

    interface _IScanControllerEventsV2
    {
        CONST_VTBL struct _IScanControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScanControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScanControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScanControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScanControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScanControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScanControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScanControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScanControllerEventsV2_DISPINTERFACE_DEFINED__ */


#ifndef __IScanControllerEventsV3_INTERFACE_DEFINED__
#define __IScanControllerEventsV3_INTERFACE_DEFINED__

/* interface IScanControllerEventsV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerEventsV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("08932AD2-C415-4DE8-821D-5AF7A5658483")
    IScanControllerEventsV3 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableShurikenOptionChanged( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ScanPriorityChanged( 
            /* [in] */ _ScanPriority newVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerEventsV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerEventsV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerEventsV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerEventsV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerEventsV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerEventsV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableShurikenOptionChanged )( 
            IScanControllerEventsV3 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ScanPriorityChanged )( 
            IScanControllerEventsV3 * This,
            /* [in] */ _ScanPriority newVal);
        
        END_INTERFACE
    } IScanControllerEventsV3Vtbl;

    interface IScanControllerEventsV3
    {
        CONST_VTBL struct IScanControllerEventsV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerEventsV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerEventsV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerEventsV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerEventsV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerEventsV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerEventsV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerEventsV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerEventsV3_EnableShurikenOptionChanged(This,newVal)	\
    ( (This)->lpVtbl -> EnableShurikenOptionChanged(This,newVal) ) 

#define IScanControllerEventsV3_ScanPriorityChanged(This,newVal)	\
    ( (This)->lpVtbl -> ScanPriorityChanged(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerEventsV3_INTERFACE_DEFINED__ */


#ifndef ___IScanControllerEventsV3_DISPINTERFACE_DEFINED__
#define ___IScanControllerEventsV3_DISPINTERFACE_DEFINED__

/* dispinterface _IScanControllerEventsV3 */
/* [uuid] */ 


EXTERN_C const IID DIID__IScanControllerEventsV3;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("81541635-736E-4460-81AA-86118F313CD5")
    _IScanControllerEventsV3 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScanControllerEventsV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScanControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScanControllerEventsV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScanControllerEventsV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScanControllerEventsV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScanControllerEventsV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScanControllerEventsV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScanControllerEventsV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScanControllerEventsV3Vtbl;

    interface _IScanControllerEventsV3
    {
        CONST_VTBL struct _IScanControllerEventsV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScanControllerEventsV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScanControllerEventsV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScanControllerEventsV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScanControllerEventsV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScanControllerEventsV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScanControllerEventsV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScanControllerEventsV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScanControllerEventsV3_DISPINTERFACE_DEFINED__ */


#ifndef __IScanControllerEventsV4_INTERFACE_DEFINED__
#define __IScanControllerEventsV4_INTERFACE_DEFINED__

/* interface IScanControllerEventsV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerEventsV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02143C0F-1656-4B2E-95E7-EA8178A29E2E")
    IScanControllerEventsV4 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PupDetectionCountChanged( 
            /* [in] */ UINT64 TotalPUPsDetected) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PumDetectionCountChanged( 
            /* [in] */ UINT64 TotalPUMsDetected) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerEventsV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerEventsV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerEventsV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerEventsV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerEventsV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerEventsV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PupDetectionCountChanged )( 
            IScanControllerEventsV4 * This,
            /* [in] */ UINT64 TotalPUPsDetected);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PumDetectionCountChanged )( 
            IScanControllerEventsV4 * This,
            /* [in] */ UINT64 TotalPUMsDetected);
        
        END_INTERFACE
    } IScanControllerEventsV4Vtbl;

    interface IScanControllerEventsV4
    {
        CONST_VTBL struct IScanControllerEventsV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerEventsV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerEventsV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerEventsV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerEventsV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerEventsV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerEventsV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerEventsV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerEventsV4_PupDetectionCountChanged(This,TotalPUPsDetected)	\
    ( (This)->lpVtbl -> PupDetectionCountChanged(This,TotalPUPsDetected) ) 

#define IScanControllerEventsV4_PumDetectionCountChanged(This,TotalPUMsDetected)	\
    ( (This)->lpVtbl -> PumDetectionCountChanged(This,TotalPUMsDetected) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerEventsV4_INTERFACE_DEFINED__ */


#ifndef ___IScanControllerEventsV4_DISPINTERFACE_DEFINED__
#define ___IScanControllerEventsV4_DISPINTERFACE_DEFINED__

/* dispinterface _IScanControllerEventsV4 */
/* [uuid] */ 


EXTERN_C const IID DIID__IScanControllerEventsV4;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("ADA09B8D-A536-4429-8331-49808442D24B")
    _IScanControllerEventsV4 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScanControllerEventsV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScanControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScanControllerEventsV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScanControllerEventsV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScanControllerEventsV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScanControllerEventsV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScanControllerEventsV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScanControllerEventsV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScanControllerEventsV4Vtbl;

    interface _IScanControllerEventsV4
    {
        CONST_VTBL struct _IScanControllerEventsV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScanControllerEventsV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScanControllerEventsV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScanControllerEventsV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScanControllerEventsV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScanControllerEventsV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScanControllerEventsV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScanControllerEventsV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScanControllerEventsV4_DISPINTERFACE_DEFINED__ */


#ifndef __IScanControllerEventsV5_INTERFACE_DEFINED__
#define __IScanControllerEventsV5_INTERFACE_DEFINED__

/* interface IScanControllerEventsV5 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerEventsV5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3B42C782-9650-4EFF-9618-91118DF96061")
    IScanControllerEventsV5 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CheckForUpdatesOptionChanged( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerEventsV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerEventsV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerEventsV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerEventsV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerEventsV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerEventsV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerEventsV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerEventsV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CheckForUpdatesOptionChanged )( 
            IScanControllerEventsV5 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IScanControllerEventsV5Vtbl;

    interface IScanControllerEventsV5
    {
        CONST_VTBL struct IScanControllerEventsV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerEventsV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerEventsV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerEventsV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerEventsV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerEventsV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerEventsV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerEventsV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerEventsV5_CheckForUpdatesOptionChanged(This,newVal)	\
    ( (This)->lpVtbl -> CheckForUpdatesOptionChanged(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerEventsV5_INTERFACE_DEFINED__ */


#ifndef ___IScanControllerEventsV5_DISPINTERFACE_DEFINED__
#define ___IScanControllerEventsV5_DISPINTERFACE_DEFINED__

/* dispinterface _IScanControllerEventsV5 */
/* [uuid] */ 


EXTERN_C const IID DIID__IScanControllerEventsV5;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3E3D4AC2-A9AE-478A-91EE-79C35D3CA8C7")
    _IScanControllerEventsV5 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScanControllerEventsV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScanControllerEventsV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScanControllerEventsV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScanControllerEventsV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScanControllerEventsV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScanControllerEventsV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScanControllerEventsV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScanControllerEventsV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScanControllerEventsV5Vtbl;

    interface _IScanControllerEventsV5
    {
        CONST_VTBL struct _IScanControllerEventsV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScanControllerEventsV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScanControllerEventsV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScanControllerEventsV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScanControllerEventsV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScanControllerEventsV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScanControllerEventsV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScanControllerEventsV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScanControllerEventsV5_DISPINTERFACE_DEFINED__ */


#ifndef __IScanControllerEventsV6_INTERFACE_DEFINED__
#define __IScanControllerEventsV6_INTERFACE_DEFINED__

/* interface IScanControllerEventsV6 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IScanControllerEventsV6;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("239C7555-993F-4071-9081-D2AE0B590D63")
    IScanControllerEventsV6 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableShurikenAggressiveModeOptionChanged( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisableLinkingOptionChanged( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IScanControllerEventsV6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanControllerEventsV6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanControllerEventsV6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanControllerEventsV6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanControllerEventsV6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanControllerEventsV6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanControllerEventsV6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanControllerEventsV6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableShurikenAggressiveModeOptionChanged )( 
            IScanControllerEventsV6 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisableLinkingOptionChanged )( 
            IScanControllerEventsV6 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IScanControllerEventsV6Vtbl;

    interface IScanControllerEventsV6
    {
        CONST_VTBL struct IScanControllerEventsV6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanControllerEventsV6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanControllerEventsV6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanControllerEventsV6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanControllerEventsV6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanControllerEventsV6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanControllerEventsV6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanControllerEventsV6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanControllerEventsV6_EnableShurikenAggressiveModeOptionChanged(This,newVal)	\
    ( (This)->lpVtbl -> EnableShurikenAggressiveModeOptionChanged(This,newVal) ) 

#define IScanControllerEventsV6_DisableLinkingOptionChanged(This,newVal)	\
    ( (This)->lpVtbl -> DisableLinkingOptionChanged(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanControllerEventsV6_INTERFACE_DEFINED__ */


#ifndef ___IScanControllerEventsV6_DISPINTERFACE_DEFINED__
#define ___IScanControllerEventsV6_DISPINTERFACE_DEFINED__

/* dispinterface _IScanControllerEventsV6 */
/* [uuid] */ 


EXTERN_C const IID DIID__IScanControllerEventsV6;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("ECDAC35E-72BB-4856-97E1-226BA47C62C5")
    _IScanControllerEventsV6 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IScanControllerEventsV6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IScanControllerEventsV6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IScanControllerEventsV6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IScanControllerEventsV6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IScanControllerEventsV6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IScanControllerEventsV6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IScanControllerEventsV6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IScanControllerEventsV6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IScanControllerEventsV6Vtbl;

    interface _IScanControllerEventsV6
    {
        CONST_VTBL struct _IScanControllerEventsV6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IScanControllerEventsV6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IScanControllerEventsV6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IScanControllerEventsV6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IScanControllerEventsV6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IScanControllerEventsV6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IScanControllerEventsV6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IScanControllerEventsV6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IScanControllerEventsV6_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ScanController;

#ifdef __cplusplus

class DECLSPEC_UUID("D5599B6B-FA0C-45B5-8309-853B003EA412")
ScanController;
#endif

EXTERN_C const CLSID CLSID_scanner;

#ifdef __cplusplus

class DECLSPEC_UUID("03141A2A-5C3A-458E-ABEC-0812AD7FF497")
scanner;
#endif

EXTERN_C const CLSID CLSID_ScanParameters;

#ifdef __cplusplus

class DECLSPEC_UUID("32D83196-50E4-491C-A534-B6899899E038")
ScanParameters;
#endif

EXTERN_C const CLSID CLSID_CustomScanParameters;

#ifdef __cplusplus

class DECLSPEC_UUID("130CD414-6BFD-4F6C-9362-A2264B222E76")
CustomScanParameters;
#endif

EXTERN_C const CLSID CLSID_MinimalScanParameters;

#ifdef __cplusplus

class DECLSPEC_UUID("EE8A9269-9E6E-4683-BCD3-41E9B16696DC")
MinimalScanParameters;
#endif

EXTERN_C const CLSID CLSID_NormalScanParameters;

#ifdef __cplusplus

class DECLSPEC_UUID("17BE78EE-B40A-4B9E-835F-38EC62F9D479")
NormalScanParameters;
#endif
#endif /* __ScanControllerCOMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


