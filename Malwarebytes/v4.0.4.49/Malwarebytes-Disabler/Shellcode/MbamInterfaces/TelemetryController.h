

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 14:14:07 2038
 */
/* Compiler settings for C:\Users\User\source\repos\MBAMExploit\Typelibs\TelemetryController.IDL:
    Oicf, W1, Zp8, env=Win64 (32b run), target_arch=AMD64 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#include "LicenseController.h"
#include "LogController.h"
#include "PoliciesController.h"
#include "UpdateController.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __TelemetryController_h__
#define __TelemetryController_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IExploitRecord_FWD_DEFINED__
#define __IExploitRecord_FWD_DEFINED__
typedef interface IExploitRecord IExploitRecord;

#endif 	/* __IExploitRecord_FWD_DEFINED__ */


#ifndef __ITelemetryController_FWD_DEFINED__
#define __ITelemetryController_FWD_DEFINED__
typedef interface ITelemetryController ITelemetryController;

#endif 	/* __ITelemetryController_FWD_DEFINED__ */


#ifndef __ITelemetryControllerV2_FWD_DEFINED__
#define __ITelemetryControllerV2_FWD_DEFINED__
typedef interface ITelemetryControllerV2 ITelemetryControllerV2;

#endif 	/* __ITelemetryControllerV2_FWD_DEFINED__ */


#ifndef __ITelemetryControllerV3_FWD_DEFINED__
#define __ITelemetryControllerV3_FWD_DEFINED__
typedef interface ITelemetryControllerV3 ITelemetryControllerV3;

#endif 	/* __ITelemetryControllerV3_FWD_DEFINED__ */


#ifndef __ITelemetryControllerV4_FWD_DEFINED__
#define __ITelemetryControllerV4_FWD_DEFINED__
typedef interface ITelemetryControllerV4 ITelemetryControllerV4;

#endif 	/* __ITelemetryControllerV4_FWD_DEFINED__ */


#ifndef __ITelemetryControllerV5_FWD_DEFINED__
#define __ITelemetryControllerV5_FWD_DEFINED__
typedef interface ITelemetryControllerV5 ITelemetryControllerV5;

#endif 	/* __ITelemetryControllerV5_FWD_DEFINED__ */


#ifndef __ITelemetryControllerEvents_FWD_DEFINED__
#define __ITelemetryControllerEvents_FWD_DEFINED__
typedef interface ITelemetryControllerEvents ITelemetryControllerEvents;

#endif 	/* __ITelemetryControllerEvents_FWD_DEFINED__ */


#ifndef ___ITelemetryControllerEvents_FWD_DEFINED__
#define ___ITelemetryControllerEvents_FWD_DEFINED__
typedef interface _ITelemetryControllerEvents _ITelemetryControllerEvents;

#endif 	/* ___ITelemetryControllerEvents_FWD_DEFINED__ */


#ifndef __ExploitRecord_FWD_DEFINED__
#define __ExploitRecord_FWD_DEFINED__

#ifdef __cplusplus
typedef class ExploitRecord ExploitRecord;
#else
typedef struct ExploitRecord ExploitRecord;
#endif /* __cplusplus */

#endif 	/* __ExploitRecord_FWD_DEFINED__ */


#ifndef __TelemetryController_FWD_DEFINED__
#define __TelemetryController_FWD_DEFINED__

#ifdef __cplusplus
typedef class TelemetryController TelemetryController;
#else
typedef struct TelemetryController TelemetryController;
#endif /* __cplusplus */

#endif 	/* __TelemetryController_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __TelemetryControllerCOMLib_LIBRARY_DEFINED__
#define __TelemetryControllerCOMLib_LIBRARY_DEFINED__

/* library TelemetryControllerCOMLib */
/* [custom][custom][custom][version][uuid] */ 









typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_TelemetryController_0000_0000_0001
    {
        TelemetryConfigOption_AllowDataCollection	= 1
    } 	_TelemetryConfigOptionName;

typedef /* [uuid] */  DECLSPEC_UUID("6D28CECA-D392-4CB3-99FB-B39282D14A06") struct tagBambiRule
    {
    BSTR RulesVersion;
    SAFEARRAY * MWVendors;
    } 	BambiRule;

typedef /* [uuid] */  DECLSPEC_UUID("BA949E46-8604-462B-8CDD-C8046D3FC47C") struct tagMwacDetection
    {
    BSTR NetDomain;
    BSTR NetIPAddr;
    long NetPort;
    BSTR ProcessPath;
    BSTR Direction;
    BSTR Disposition;
    } 	MwacDetection;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_TelemetryController_0001_0002_0001
    {
        TelemetryQuarantineAction_Add	= 1,
        TelemetryQuarantineAction_Delete	= 2,
        TelemetryQuarantineAction_Restore	= 3
    } 	_TelemetryQuarantineAction;


EXTERN_C const IID LIBID_TelemetryControllerCOMLib;

#ifndef __IExploitRecord_INTERFACE_DEFINED__
#define __IExploitRecord_INTERFACE_DEFINED__

/* interface IExploitRecord */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IExploitRecord;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A9108FB-A377-47EC-96E3-3CB8B1FB7272")
    IExploitRecord : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddHost( 
            /* [in] */ long lSequence,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR resolv,
            /* [in] */ BSTR port,
            /* [in] */ BSTR URI,
            /* [in] */ BSTR md5,
            /* [in] */ BSTR header) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetRecordId( 
            /* [retval][out] */ unsigned long *recId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetRecordId( 
            /* [in] */ unsigned long recId) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IExploitRecordVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExploitRecord * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExploitRecord * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExploitRecord * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExploitRecord * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExploitRecord * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExploitRecord * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExploitRecord * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddHost )( 
            IExploitRecord * This,
            /* [in] */ long lSequence,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR resolv,
            /* [in] */ BSTR port,
            /* [in] */ BSTR URI,
            /* [in] */ BSTR md5,
            /* [in] */ BSTR header);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetRecordId )( 
            IExploitRecord * This,
            /* [retval][out] */ unsigned long *recId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetRecordId )( 
            IExploitRecord * This,
            /* [in] */ unsigned long recId);
        
        END_INTERFACE
    } IExploitRecordVtbl;

    interface IExploitRecord
    {
        CONST_VTBL struct IExploitRecordVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExploitRecord_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExploitRecord_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExploitRecord_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExploitRecord_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IExploitRecord_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IExploitRecord_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IExploitRecord_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IExploitRecord_AddHost(This,lSequence,domain,resolv,port,URI,md5,header)	\
    ( (This)->lpVtbl -> AddHost(This,lSequence,domain,resolv,port,URI,md5,header) ) 

#define IExploitRecord_GetRecordId(This,recId)	\
    ( (This)->lpVtbl -> GetRecordId(This,recId) ) 

#define IExploitRecord_SetRecordId(This,recId)	\
    ( (This)->lpVtbl -> SetRecordId(This,recId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExploitRecord_INTERFACE_DEFINED__ */


#ifndef __ITelemetryController_INTERFACE_DEFINED__
#define __ITelemetryController_INTERFACE_DEFINED__

/* interface ITelemetryController */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ITelemetryController;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4E0987E3-3699-4C92-8E76-CAEDA00FA44C")
    ITelemetryController : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *logController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ BSTR pAffiliateName,
            /* [in] */ BSTR pAffiliateID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ReportMalware( 
            BSTR progName,
            BSTR buildName,
            BSTR callerName,
            BSTR triggerName,
            BSTR progVer,
            BSTR rulesVer,
            BSTR licenseState,
            SAFEARRAY * psaRules) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE MalwareStream( 
            /* [in] */ BSTR malwareDetResFilePath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendClientData( 
            /* [in] */ VARIANT_BOOL bIsUserAdmin) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendLicenseData( 
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR licenseKey,
            /* [in] */ int licenseState,
            /* [in] */ int seatCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendMwacData( 
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ SAFEARRAY * psaData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendOneMwacRecord( 
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateExploitRecord( 
            /* [out] */ IExploitRecord **ppExploitRec,
            /* [in] */ BSTR blockID,
            /* [in] */ BSTR pid,
            /* [in] */ BSTR process,
            /* [in] */ BSTR md5payload,
            /* [in] */ BSTR cmd,
            /* [in] */ BSTR detnType,
            /* [in] */ BSTR detnAPI) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendExploitData( 
            /* [in] */ IExploitRecord *pExploitRec,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ VARIANT_BOOL registered,
            /* [in] */ BSTR muid) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendUserInteractionData( 
            /* [in] */ long eventCode,
            /* [in] */ BSTR timeStamp,
            /* [in] */ long data1,
            /* [in] */ BSTR data2) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendRansomwareData( 
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            int pid,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR Disposition,
            /* [in] */ BSTR jsonfilename) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PrepareUpdate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FinishUpdate( void) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowDataCollection( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowDataCollection( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ITelemetryControllerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITelemetryController * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITelemetryController * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITelemetryController * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITelemetryController * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITelemetryController * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITelemetryController * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITelemetryController * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            ITelemetryController * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *logController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ BSTR pAffiliateName,
            /* [in] */ BSTR pAffiliateID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ITelemetryController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReportMalware )( 
            ITelemetryController * This,
            BSTR progName,
            BSTR buildName,
            BSTR callerName,
            BSTR triggerName,
            BSTR progVer,
            BSTR rulesVer,
            BSTR licenseState,
            SAFEARRAY * psaRules);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MalwareStream )( 
            ITelemetryController * This,
            /* [in] */ BSTR malwareDetResFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendClientData )( 
            ITelemetryController * This,
            /* [in] */ VARIANT_BOOL bIsUserAdmin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendLicenseData )( 
            ITelemetryController * This,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR licenseKey,
            /* [in] */ int licenseState,
            /* [in] */ int seatCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendMwacData )( 
            ITelemetryController * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ SAFEARRAY * psaData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendOneMwacRecord )( 
            ITelemetryController * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateExploitRecord )( 
            ITelemetryController * This,
            /* [out] */ IExploitRecord **ppExploitRec,
            /* [in] */ BSTR blockID,
            /* [in] */ BSTR pid,
            /* [in] */ BSTR process,
            /* [in] */ BSTR md5payload,
            /* [in] */ BSTR cmd,
            /* [in] */ BSTR detnType,
            /* [in] */ BSTR detnAPI);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendExploitData )( 
            ITelemetryController * This,
            /* [in] */ IExploitRecord *pExploitRec,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ VARIANT_BOOL registered,
            /* [in] */ BSTR muid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUserInteractionData )( 
            ITelemetryController * This,
            /* [in] */ long eventCode,
            /* [in] */ BSTR timeStamp,
            /* [in] */ long data1,
            /* [in] */ BSTR data2);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendRansomwareData )( 
            ITelemetryController * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            int pid,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR Disposition,
            /* [in] */ BSTR jsonfilename);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            ITelemetryController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            ITelemetryController * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowDataCollection )( 
            ITelemetryController * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowDataCollection )( 
            ITelemetryController * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        END_INTERFACE
    } ITelemetryControllerVtbl;

    interface ITelemetryController
    {
        CONST_VTBL struct ITelemetryControllerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITelemetryController_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITelemetryController_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITelemetryController_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITelemetryController_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITelemetryController_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITelemetryController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITelemetryController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITelemetryController_Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID) ) 

#define ITelemetryController_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ITelemetryController_ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules)	\
    ( (This)->lpVtbl -> ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules) ) 

#define ITelemetryController_MalwareStream(This,malwareDetResFilePath)	\
    ( (This)->lpVtbl -> MalwareStream(This,malwareDetResFilePath) ) 

#define ITelemetryController_SendClientData(This,bIsUserAdmin)	\
    ( (This)->lpVtbl -> SendClientData(This,bIsUserAdmin) ) 

#define ITelemetryController_SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount)	\
    ( (This)->lpVtbl -> SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount) ) 

#define ITelemetryController_SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData)	\
    ( (This)->lpVtbl -> SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData) ) 

#define ITelemetryController_SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition)	\
    ( (This)->lpVtbl -> SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition) ) 

#define ITelemetryController_CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI)	\
    ( (This)->lpVtbl -> CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI) ) 

#define ITelemetryController_SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid)	\
    ( (This)->lpVtbl -> SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid) ) 

#define ITelemetryController_SendUserInteractionData(This,eventCode,timeStamp,data1,data2)	\
    ( (This)->lpVtbl -> SendUserInteractionData(This,eventCode,timeStamp,data1,data2) ) 

#define ITelemetryController_SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename)	\
    ( (This)->lpVtbl -> SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename) ) 

#define ITelemetryController_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define ITelemetryController_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define ITelemetryController_get_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowDataCollection(This,pVal) ) 

#define ITelemetryController_put_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowDataCollection(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITelemetryController_INTERFACE_DEFINED__ */


#ifndef __ITelemetryControllerV2_INTERFACE_DEFINED__
#define __ITelemetryControllerV2_INTERFACE_DEFINED__

/* interface ITelemetryControllerV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ITelemetryControllerV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DAD5232C-6E05-4458-9709-0B4DCB22EA09")
    ITelemetryControllerV2 : public ITelemetryController
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalScans( 
            /* [in] */ UINT64 numScans) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalMalwareDetections( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalArwDetections( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalPupDetections( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalPumDetections( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalRTPBlocks( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalMwacBlocks( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetTotalExploitsBlocked( 
            /* [in] */ UINT64 numDetections) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetIsRtpEnabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetIsAntiExploitEnabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetIsArwEnabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetIsSelfProtectionEnabled( 
            /* [in] */ VARIANT_BOOL bEnabled,
            /* [in] */ VARIANT_BOOL bEarlyStart) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetIsMwacEnabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetScanConfig( 
            /* [in] */ VARIANT_BOOL bArkEnabled,
            /* [in] */ VARIANT_BOOL bScanArchiveEnabled,
            /* [in] */ long pupSetting,
            /* [in] */ long pumSetting) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetEndpointAgentInstalled( 
            /* [in] */ VARIANT_BOOL bEAInstalled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetNebulaJWT( 
            /* [in] */ BSTR nebulaJWT) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetNebulaAttributes( 
            /* [in] */ BSTR nebula_account_id,
            /* [in] */ BSTR nebula_machine_id,
            /* [in] */ BSTR nebula_machine_name,
            /* [in] */ BSTR nebula_origin,
            /* [in] */ BSTR nebula_group_id,
            /* [in] */ BSTR nebula_policy_id,
            /* [in] */ BSTR nebula_policy_etag,
            /* [in] */ BSTR nebula_ea_version,
            /* [in] */ BSTR nebula_ea_plugin_version) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendQuarantineAction( 
            /* [in] */ BSTR quarantineData,
            /* [in] */ _TelemetryQuarantineAction action) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendQuarantineRefresh( 
            /* [in] */ SAFEARRAY * pQuarantineDataArray) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ITelemetryControllerV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITelemetryControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITelemetryControllerV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITelemetryControllerV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITelemetryControllerV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITelemetryControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITelemetryControllerV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *logController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ BSTR pAffiliateName,
            /* [in] */ BSTR pAffiliateID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ITelemetryControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReportMalware )( 
            ITelemetryControllerV2 * This,
            BSTR progName,
            BSTR buildName,
            BSTR callerName,
            BSTR triggerName,
            BSTR progVer,
            BSTR rulesVer,
            BSTR licenseState,
            SAFEARRAY * psaRules);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MalwareStream )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR malwareDetResFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendClientData )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bIsUserAdmin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendLicenseData )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR licenseKey,
            /* [in] */ int licenseState,
            /* [in] */ int seatCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendMwacData )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ SAFEARRAY * psaData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendOneMwacRecord )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateExploitRecord )( 
            ITelemetryControllerV2 * This,
            /* [out] */ IExploitRecord **ppExploitRec,
            /* [in] */ BSTR blockID,
            /* [in] */ BSTR pid,
            /* [in] */ BSTR process,
            /* [in] */ BSTR md5payload,
            /* [in] */ BSTR cmd,
            /* [in] */ BSTR detnType,
            /* [in] */ BSTR detnAPI);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendExploitData )( 
            ITelemetryControllerV2 * This,
            /* [in] */ IExploitRecord *pExploitRec,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ VARIANT_BOOL registered,
            /* [in] */ BSTR muid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUserInteractionData )( 
            ITelemetryControllerV2 * This,
            /* [in] */ long eventCode,
            /* [in] */ BSTR timeStamp,
            /* [in] */ long data1,
            /* [in] */ BSTR data2);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendRansomwareData )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            int pid,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR Disposition,
            /* [in] */ BSTR jsonfilename);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            ITelemetryControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            ITelemetryControllerV2 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowDataCollection )( 
            ITelemetryControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowDataCollection )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalScans )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMalwareDetections )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalArwDetections )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPupDetections )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPumDetections )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalRTPBlocks )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMwacBlocks )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalExploitsBlocked )( 
            ITelemetryControllerV2 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsRtpEnabled )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsAntiExploitEnabled )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsArwEnabled )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsSelfProtectionEnabled )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bEnabled,
            /* [in] */ VARIANT_BOOL bEarlyStart);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsMwacEnabled )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bArkEnabled,
            /* [in] */ VARIANT_BOOL bScanArchiveEnabled,
            /* [in] */ long pupSetting,
            /* [in] */ long pumSetting);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetEndpointAgentInstalled )( 
            ITelemetryControllerV2 * This,
            /* [in] */ VARIANT_BOOL bEAInstalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaJWT )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR nebulaJWT);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaAttributes )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR nebula_account_id,
            /* [in] */ BSTR nebula_machine_id,
            /* [in] */ BSTR nebula_machine_name,
            /* [in] */ BSTR nebula_origin,
            /* [in] */ BSTR nebula_group_id,
            /* [in] */ BSTR nebula_policy_id,
            /* [in] */ BSTR nebula_policy_etag,
            /* [in] */ BSTR nebula_ea_version,
            /* [in] */ BSTR nebula_ea_plugin_version);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineAction )( 
            ITelemetryControllerV2 * This,
            /* [in] */ BSTR quarantineData,
            /* [in] */ _TelemetryQuarantineAction action);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineRefresh )( 
            ITelemetryControllerV2 * This,
            /* [in] */ SAFEARRAY * pQuarantineDataArray);
        
        END_INTERFACE
    } ITelemetryControllerV2Vtbl;

    interface ITelemetryControllerV2
    {
        CONST_VTBL struct ITelemetryControllerV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITelemetryControllerV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITelemetryControllerV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITelemetryControllerV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITelemetryControllerV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITelemetryControllerV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITelemetryControllerV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITelemetryControllerV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITelemetryControllerV2_Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID) ) 

#define ITelemetryControllerV2_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ITelemetryControllerV2_ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules)	\
    ( (This)->lpVtbl -> ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules) ) 

#define ITelemetryControllerV2_MalwareStream(This,malwareDetResFilePath)	\
    ( (This)->lpVtbl -> MalwareStream(This,malwareDetResFilePath) ) 

#define ITelemetryControllerV2_SendClientData(This,bIsUserAdmin)	\
    ( (This)->lpVtbl -> SendClientData(This,bIsUserAdmin) ) 

#define ITelemetryControllerV2_SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount)	\
    ( (This)->lpVtbl -> SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount) ) 

#define ITelemetryControllerV2_SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData)	\
    ( (This)->lpVtbl -> SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData) ) 

#define ITelemetryControllerV2_SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition)	\
    ( (This)->lpVtbl -> SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition) ) 

#define ITelemetryControllerV2_CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI)	\
    ( (This)->lpVtbl -> CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI) ) 

#define ITelemetryControllerV2_SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid)	\
    ( (This)->lpVtbl -> SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid) ) 

#define ITelemetryControllerV2_SendUserInteractionData(This,eventCode,timeStamp,data1,data2)	\
    ( (This)->lpVtbl -> SendUserInteractionData(This,eventCode,timeStamp,data1,data2) ) 

#define ITelemetryControllerV2_SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename)	\
    ( (This)->lpVtbl -> SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename) ) 

#define ITelemetryControllerV2_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define ITelemetryControllerV2_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define ITelemetryControllerV2_get_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowDataCollection(This,pVal) ) 

#define ITelemetryControllerV2_put_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowDataCollection(This,pVal) ) 


#define ITelemetryControllerV2_SetTotalScans(This,numScans)	\
    ( (This)->lpVtbl -> SetTotalScans(This,numScans) ) 

#define ITelemetryControllerV2_SetTotalMalwareDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMalwareDetections(This,numDetections) ) 

#define ITelemetryControllerV2_SetTotalArwDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalArwDetections(This,numDetections) ) 

#define ITelemetryControllerV2_SetTotalPupDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPupDetections(This,numDetections) ) 

#define ITelemetryControllerV2_SetTotalPumDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPumDetections(This,numDetections) ) 

#define ITelemetryControllerV2_SetTotalRTPBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalRTPBlocks(This,numDetections) ) 

#define ITelemetryControllerV2_SetTotalMwacBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMwacBlocks(This,numDetections) ) 

#define ITelemetryControllerV2_SetTotalExploitsBlocked(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalExploitsBlocked(This,numDetections) ) 

#define ITelemetryControllerV2_SetIsRtpEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsRtpEnabled(This,bEnabled) ) 

#define ITelemetryControllerV2_SetIsAntiExploitEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsAntiExploitEnabled(This,bEnabled) ) 

#define ITelemetryControllerV2_SetIsArwEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsArwEnabled(This,bEnabled) ) 

#define ITelemetryControllerV2_SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart)	\
    ( (This)->lpVtbl -> SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart) ) 

#define ITelemetryControllerV2_SetIsMwacEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsMwacEnabled(This,bEnabled) ) 

#define ITelemetryControllerV2_SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting)	\
    ( (This)->lpVtbl -> SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting) ) 

#define ITelemetryControllerV2_SetEndpointAgentInstalled(This,bEAInstalled)	\
    ( (This)->lpVtbl -> SetEndpointAgentInstalled(This,bEAInstalled) ) 

#define ITelemetryControllerV2_SetNebulaJWT(This,nebulaJWT)	\
    ( (This)->lpVtbl -> SetNebulaJWT(This,nebulaJWT) ) 

#define ITelemetryControllerV2_SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version)	\
    ( (This)->lpVtbl -> SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version) ) 

#define ITelemetryControllerV2_SendQuarantineAction(This,quarantineData,action)	\
    ( (This)->lpVtbl -> SendQuarantineAction(This,quarantineData,action) ) 

#define ITelemetryControllerV2_SendQuarantineRefresh(This,pQuarantineDataArray)	\
    ( (This)->lpVtbl -> SendQuarantineRefresh(This,pQuarantineDataArray) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITelemetryControllerV2_INTERFACE_DEFINED__ */


#ifndef __ITelemetryControllerV3_INTERFACE_DEFINED__
#define __ITelemetryControllerV3_INTERFACE_DEFINED__

/* interface ITelemetryControllerV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ITelemetryControllerV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("993A5C11-A9B8-41E9-9088-C5182B1F279A")
    ITelemetryControllerV3 : public ITelemetryControllerV2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendUIEvent( 
            /* [in] */ BSTR pEventType,
            /* [in] */ BSTR pObjectName,
            /* [in] */ BSTR pObjectType,
            /* [in] */ BSTR pObjectId,
            /* [in] */ BSTR pAction,
            /* [in] */ BSTR pTimestamp) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ITelemetryControllerV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITelemetryControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITelemetryControllerV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITelemetryControllerV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITelemetryControllerV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITelemetryControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITelemetryControllerV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *logController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ BSTR pAffiliateName,
            /* [in] */ BSTR pAffiliateID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ITelemetryControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReportMalware )( 
            ITelemetryControllerV3 * This,
            BSTR progName,
            BSTR buildName,
            BSTR callerName,
            BSTR triggerName,
            BSTR progVer,
            BSTR rulesVer,
            BSTR licenseState,
            SAFEARRAY * psaRules);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MalwareStream )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR malwareDetResFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendClientData )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bIsUserAdmin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendLicenseData )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR licenseKey,
            /* [in] */ int licenseState,
            /* [in] */ int seatCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendMwacData )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ SAFEARRAY * psaData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendOneMwacRecord )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateExploitRecord )( 
            ITelemetryControllerV3 * This,
            /* [out] */ IExploitRecord **ppExploitRec,
            /* [in] */ BSTR blockID,
            /* [in] */ BSTR pid,
            /* [in] */ BSTR process,
            /* [in] */ BSTR md5payload,
            /* [in] */ BSTR cmd,
            /* [in] */ BSTR detnType,
            /* [in] */ BSTR detnAPI);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendExploitData )( 
            ITelemetryControllerV3 * This,
            /* [in] */ IExploitRecord *pExploitRec,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ VARIANT_BOOL registered,
            /* [in] */ BSTR muid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUserInteractionData )( 
            ITelemetryControllerV3 * This,
            /* [in] */ long eventCode,
            /* [in] */ BSTR timeStamp,
            /* [in] */ long data1,
            /* [in] */ BSTR data2);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendRansomwareData )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            int pid,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR Disposition,
            /* [in] */ BSTR jsonfilename);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            ITelemetryControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            ITelemetryControllerV3 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowDataCollection )( 
            ITelemetryControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowDataCollection )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalScans )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMalwareDetections )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalArwDetections )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPupDetections )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPumDetections )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalRTPBlocks )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMwacBlocks )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalExploitsBlocked )( 
            ITelemetryControllerV3 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsRtpEnabled )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsAntiExploitEnabled )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsArwEnabled )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsSelfProtectionEnabled )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bEnabled,
            /* [in] */ VARIANT_BOOL bEarlyStart);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsMwacEnabled )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bArkEnabled,
            /* [in] */ VARIANT_BOOL bScanArchiveEnabled,
            /* [in] */ long pupSetting,
            /* [in] */ long pumSetting);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetEndpointAgentInstalled )( 
            ITelemetryControllerV3 * This,
            /* [in] */ VARIANT_BOOL bEAInstalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaJWT )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR nebulaJWT);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaAttributes )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR nebula_account_id,
            /* [in] */ BSTR nebula_machine_id,
            /* [in] */ BSTR nebula_machine_name,
            /* [in] */ BSTR nebula_origin,
            /* [in] */ BSTR nebula_group_id,
            /* [in] */ BSTR nebula_policy_id,
            /* [in] */ BSTR nebula_policy_etag,
            /* [in] */ BSTR nebula_ea_version,
            /* [in] */ BSTR nebula_ea_plugin_version);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineAction )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR quarantineData,
            /* [in] */ _TelemetryQuarantineAction action);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineRefresh )( 
            ITelemetryControllerV3 * This,
            /* [in] */ SAFEARRAY * pQuarantineDataArray);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUIEvent )( 
            ITelemetryControllerV3 * This,
            /* [in] */ BSTR pEventType,
            /* [in] */ BSTR pObjectName,
            /* [in] */ BSTR pObjectType,
            /* [in] */ BSTR pObjectId,
            /* [in] */ BSTR pAction,
            /* [in] */ BSTR pTimestamp);
        
        END_INTERFACE
    } ITelemetryControllerV3Vtbl;

    interface ITelemetryControllerV3
    {
        CONST_VTBL struct ITelemetryControllerV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITelemetryControllerV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITelemetryControllerV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITelemetryControllerV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITelemetryControllerV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITelemetryControllerV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITelemetryControllerV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITelemetryControllerV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITelemetryControllerV3_Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID) ) 

#define ITelemetryControllerV3_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ITelemetryControllerV3_ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules)	\
    ( (This)->lpVtbl -> ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules) ) 

#define ITelemetryControllerV3_MalwareStream(This,malwareDetResFilePath)	\
    ( (This)->lpVtbl -> MalwareStream(This,malwareDetResFilePath) ) 

#define ITelemetryControllerV3_SendClientData(This,bIsUserAdmin)	\
    ( (This)->lpVtbl -> SendClientData(This,bIsUserAdmin) ) 

#define ITelemetryControllerV3_SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount)	\
    ( (This)->lpVtbl -> SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount) ) 

#define ITelemetryControllerV3_SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData)	\
    ( (This)->lpVtbl -> SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData) ) 

#define ITelemetryControllerV3_SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition)	\
    ( (This)->lpVtbl -> SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition) ) 

#define ITelemetryControllerV3_CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI)	\
    ( (This)->lpVtbl -> CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI) ) 

#define ITelemetryControllerV3_SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid)	\
    ( (This)->lpVtbl -> SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid) ) 

#define ITelemetryControllerV3_SendUserInteractionData(This,eventCode,timeStamp,data1,data2)	\
    ( (This)->lpVtbl -> SendUserInteractionData(This,eventCode,timeStamp,data1,data2) ) 

#define ITelemetryControllerV3_SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename)	\
    ( (This)->lpVtbl -> SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename) ) 

#define ITelemetryControllerV3_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define ITelemetryControllerV3_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define ITelemetryControllerV3_get_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowDataCollection(This,pVal) ) 

#define ITelemetryControllerV3_put_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowDataCollection(This,pVal) ) 


#define ITelemetryControllerV3_SetTotalScans(This,numScans)	\
    ( (This)->lpVtbl -> SetTotalScans(This,numScans) ) 

#define ITelemetryControllerV3_SetTotalMalwareDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMalwareDetections(This,numDetections) ) 

#define ITelemetryControllerV3_SetTotalArwDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalArwDetections(This,numDetections) ) 

#define ITelemetryControllerV3_SetTotalPupDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPupDetections(This,numDetections) ) 

#define ITelemetryControllerV3_SetTotalPumDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPumDetections(This,numDetections) ) 

#define ITelemetryControllerV3_SetTotalRTPBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalRTPBlocks(This,numDetections) ) 

#define ITelemetryControllerV3_SetTotalMwacBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMwacBlocks(This,numDetections) ) 

#define ITelemetryControllerV3_SetTotalExploitsBlocked(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalExploitsBlocked(This,numDetections) ) 

#define ITelemetryControllerV3_SetIsRtpEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsRtpEnabled(This,bEnabled) ) 

#define ITelemetryControllerV3_SetIsAntiExploitEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsAntiExploitEnabled(This,bEnabled) ) 

#define ITelemetryControllerV3_SetIsArwEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsArwEnabled(This,bEnabled) ) 

#define ITelemetryControllerV3_SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart)	\
    ( (This)->lpVtbl -> SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart) ) 

#define ITelemetryControllerV3_SetIsMwacEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsMwacEnabled(This,bEnabled) ) 

#define ITelemetryControllerV3_SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting)	\
    ( (This)->lpVtbl -> SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting) ) 

#define ITelemetryControllerV3_SetEndpointAgentInstalled(This,bEAInstalled)	\
    ( (This)->lpVtbl -> SetEndpointAgentInstalled(This,bEAInstalled) ) 

#define ITelemetryControllerV3_SetNebulaJWT(This,nebulaJWT)	\
    ( (This)->lpVtbl -> SetNebulaJWT(This,nebulaJWT) ) 

#define ITelemetryControllerV3_SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version)	\
    ( (This)->lpVtbl -> SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version) ) 

#define ITelemetryControllerV3_SendQuarantineAction(This,quarantineData,action)	\
    ( (This)->lpVtbl -> SendQuarantineAction(This,quarantineData,action) ) 

#define ITelemetryControllerV3_SendQuarantineRefresh(This,pQuarantineDataArray)	\
    ( (This)->lpVtbl -> SendQuarantineRefresh(This,pQuarantineDataArray) ) 


#define ITelemetryControllerV3_SendUIEvent(This,pEventType,pObjectName,pObjectType,pObjectId,pAction,pTimestamp)	\
    ( (This)->lpVtbl -> SendUIEvent(This,pEventType,pObjectName,pObjectType,pObjectId,pAction,pTimestamp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITelemetryControllerV3_INTERFACE_DEFINED__ */


#ifndef __ITelemetryControllerV4_INTERFACE_DEFINED__
#define __ITelemetryControllerV4_INTERFACE_DEFINED__

/* interface ITelemetryControllerV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ITelemetryControllerV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CC4D9C86-78F2-435F-8355-5328509E04F1")
    ITelemetryControllerV4 : public ITelemetryControllerV3
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableGameMode( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisableGameMode( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ITelemetryControllerV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITelemetryControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITelemetryControllerV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITelemetryControllerV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITelemetryControllerV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITelemetryControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITelemetryControllerV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *logController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ BSTR pAffiliateName,
            /* [in] */ BSTR pAffiliateID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ITelemetryControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReportMalware )( 
            ITelemetryControllerV4 * This,
            BSTR progName,
            BSTR buildName,
            BSTR callerName,
            BSTR triggerName,
            BSTR progVer,
            BSTR rulesVer,
            BSTR licenseState,
            SAFEARRAY * psaRules);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MalwareStream )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR malwareDetResFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendClientData )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bIsUserAdmin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendLicenseData )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR licenseKey,
            /* [in] */ int licenseState,
            /* [in] */ int seatCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendMwacData )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ SAFEARRAY * psaData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendOneMwacRecord )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateExploitRecord )( 
            ITelemetryControllerV4 * This,
            /* [out] */ IExploitRecord **ppExploitRec,
            /* [in] */ BSTR blockID,
            /* [in] */ BSTR pid,
            /* [in] */ BSTR process,
            /* [in] */ BSTR md5payload,
            /* [in] */ BSTR cmd,
            /* [in] */ BSTR detnType,
            /* [in] */ BSTR detnAPI);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendExploitData )( 
            ITelemetryControllerV4 * This,
            /* [in] */ IExploitRecord *pExploitRec,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ VARIANT_BOOL registered,
            /* [in] */ BSTR muid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUserInteractionData )( 
            ITelemetryControllerV4 * This,
            /* [in] */ long eventCode,
            /* [in] */ BSTR timeStamp,
            /* [in] */ long data1,
            /* [in] */ BSTR data2);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendRansomwareData )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            int pid,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR Disposition,
            /* [in] */ BSTR jsonfilename);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            ITelemetryControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            ITelemetryControllerV4 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowDataCollection )( 
            ITelemetryControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowDataCollection )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalScans )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMalwareDetections )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalArwDetections )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPupDetections )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPumDetections )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalRTPBlocks )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMwacBlocks )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalExploitsBlocked )( 
            ITelemetryControllerV4 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsRtpEnabled )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsAntiExploitEnabled )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsArwEnabled )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsSelfProtectionEnabled )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bEnabled,
            /* [in] */ VARIANT_BOOL bEarlyStart);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsMwacEnabled )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bArkEnabled,
            /* [in] */ VARIANT_BOOL bScanArchiveEnabled,
            /* [in] */ long pupSetting,
            /* [in] */ long pumSetting);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetEndpointAgentInstalled )( 
            ITelemetryControllerV4 * This,
            /* [in] */ VARIANT_BOOL bEAInstalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaJWT )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR nebulaJWT);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaAttributes )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR nebula_account_id,
            /* [in] */ BSTR nebula_machine_id,
            /* [in] */ BSTR nebula_machine_name,
            /* [in] */ BSTR nebula_origin,
            /* [in] */ BSTR nebula_group_id,
            /* [in] */ BSTR nebula_policy_id,
            /* [in] */ BSTR nebula_policy_etag,
            /* [in] */ BSTR nebula_ea_version,
            /* [in] */ BSTR nebula_ea_plugin_version);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineAction )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR quarantineData,
            /* [in] */ _TelemetryQuarantineAction action);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineRefresh )( 
            ITelemetryControllerV4 * This,
            /* [in] */ SAFEARRAY * pQuarantineDataArray);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUIEvent )( 
            ITelemetryControllerV4 * This,
            /* [in] */ BSTR pEventType,
            /* [in] */ BSTR pObjectName,
            /* [in] */ BSTR pObjectType,
            /* [in] */ BSTR pObjectId,
            /* [in] */ BSTR pAction,
            /* [in] */ BSTR pTimestamp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableGameMode )( 
            ITelemetryControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisableGameMode )( 
            ITelemetryControllerV4 * This);
        
        END_INTERFACE
    } ITelemetryControllerV4Vtbl;

    interface ITelemetryControllerV4
    {
        CONST_VTBL struct ITelemetryControllerV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITelemetryControllerV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITelemetryControllerV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITelemetryControllerV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITelemetryControllerV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITelemetryControllerV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITelemetryControllerV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITelemetryControllerV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITelemetryControllerV4_Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID) ) 

#define ITelemetryControllerV4_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ITelemetryControllerV4_ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules)	\
    ( (This)->lpVtbl -> ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules) ) 

#define ITelemetryControllerV4_MalwareStream(This,malwareDetResFilePath)	\
    ( (This)->lpVtbl -> MalwareStream(This,malwareDetResFilePath) ) 

#define ITelemetryControllerV4_SendClientData(This,bIsUserAdmin)	\
    ( (This)->lpVtbl -> SendClientData(This,bIsUserAdmin) ) 

#define ITelemetryControllerV4_SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount)	\
    ( (This)->lpVtbl -> SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount) ) 

#define ITelemetryControllerV4_SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData)	\
    ( (This)->lpVtbl -> SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData) ) 

#define ITelemetryControllerV4_SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition)	\
    ( (This)->lpVtbl -> SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition) ) 

#define ITelemetryControllerV4_CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI)	\
    ( (This)->lpVtbl -> CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI) ) 

#define ITelemetryControllerV4_SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid)	\
    ( (This)->lpVtbl -> SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid) ) 

#define ITelemetryControllerV4_SendUserInteractionData(This,eventCode,timeStamp,data1,data2)	\
    ( (This)->lpVtbl -> SendUserInteractionData(This,eventCode,timeStamp,data1,data2) ) 

#define ITelemetryControllerV4_SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename)	\
    ( (This)->lpVtbl -> SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename) ) 

#define ITelemetryControllerV4_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define ITelemetryControllerV4_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define ITelemetryControllerV4_get_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowDataCollection(This,pVal) ) 

#define ITelemetryControllerV4_put_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowDataCollection(This,pVal) ) 


#define ITelemetryControllerV4_SetTotalScans(This,numScans)	\
    ( (This)->lpVtbl -> SetTotalScans(This,numScans) ) 

#define ITelemetryControllerV4_SetTotalMalwareDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMalwareDetections(This,numDetections) ) 

#define ITelemetryControllerV4_SetTotalArwDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalArwDetections(This,numDetections) ) 

#define ITelemetryControllerV4_SetTotalPupDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPupDetections(This,numDetections) ) 

#define ITelemetryControllerV4_SetTotalPumDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPumDetections(This,numDetections) ) 

#define ITelemetryControllerV4_SetTotalRTPBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalRTPBlocks(This,numDetections) ) 

#define ITelemetryControllerV4_SetTotalMwacBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMwacBlocks(This,numDetections) ) 

#define ITelemetryControllerV4_SetTotalExploitsBlocked(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalExploitsBlocked(This,numDetections) ) 

#define ITelemetryControllerV4_SetIsRtpEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsRtpEnabled(This,bEnabled) ) 

#define ITelemetryControllerV4_SetIsAntiExploitEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsAntiExploitEnabled(This,bEnabled) ) 

#define ITelemetryControllerV4_SetIsArwEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsArwEnabled(This,bEnabled) ) 

#define ITelemetryControllerV4_SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart)	\
    ( (This)->lpVtbl -> SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart) ) 

#define ITelemetryControllerV4_SetIsMwacEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsMwacEnabled(This,bEnabled) ) 

#define ITelemetryControllerV4_SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting)	\
    ( (This)->lpVtbl -> SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting) ) 

#define ITelemetryControllerV4_SetEndpointAgentInstalled(This,bEAInstalled)	\
    ( (This)->lpVtbl -> SetEndpointAgentInstalled(This,bEAInstalled) ) 

#define ITelemetryControllerV4_SetNebulaJWT(This,nebulaJWT)	\
    ( (This)->lpVtbl -> SetNebulaJWT(This,nebulaJWT) ) 

#define ITelemetryControllerV4_SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version)	\
    ( (This)->lpVtbl -> SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version) ) 

#define ITelemetryControllerV4_SendQuarantineAction(This,quarantineData,action)	\
    ( (This)->lpVtbl -> SendQuarantineAction(This,quarantineData,action) ) 

#define ITelemetryControllerV4_SendQuarantineRefresh(This,pQuarantineDataArray)	\
    ( (This)->lpVtbl -> SendQuarantineRefresh(This,pQuarantineDataArray) ) 


#define ITelemetryControllerV4_SendUIEvent(This,pEventType,pObjectName,pObjectType,pObjectId,pAction,pTimestamp)	\
    ( (This)->lpVtbl -> SendUIEvent(This,pEventType,pObjectName,pObjectType,pObjectId,pAction,pTimestamp) ) 


#define ITelemetryControllerV4_EnableGameMode(This)	\
    ( (This)->lpVtbl -> EnableGameMode(This) ) 

#define ITelemetryControllerV4_DisableGameMode(This)	\
    ( (This)->lpVtbl -> DisableGameMode(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITelemetryControllerV4_INTERFACE_DEFINED__ */


#ifndef __ITelemetryControllerV5_INTERFACE_DEFINED__
#define __ITelemetryControllerV5_INTERFACE_DEFINED__

/* interface ITelemetryControllerV5 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ITelemetryControllerV5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2A153977-1A37-4EF7-9226-9E128FA51AE1")
    ITelemetryControllerV5 : public ITelemetryControllerV4
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SendOneMwacRecordV2( 
            /* [in] */ BSTR blockCategoryName,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition,
            /* [in] */ long ruleID,
            /* [in] */ BSTR threatName,
            /* [in] */ long whiteListDisposition,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR sha256Hash) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ITelemetryControllerV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITelemetryControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITelemetryControllerV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITelemetryControllerV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITelemetryControllerV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITelemetryControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITelemetryControllerV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *logController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ /* external definition not present */ IUpdateController *pUpdateController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild,
            /* [in] */ BSTR pAffiliateName,
            /* [in] */ BSTR pAffiliateID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ITelemetryControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReportMalware )( 
            ITelemetryControllerV5 * This,
            BSTR progName,
            BSTR buildName,
            BSTR callerName,
            BSTR triggerName,
            BSTR progVer,
            BSTR rulesVer,
            BSTR licenseState,
            SAFEARRAY * psaRules);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MalwareStream )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR malwareDetResFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendClientData )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bIsUserAdmin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendLicenseData )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR licenseKey,
            /* [in] */ int licenseState,
            /* [in] */ int seatCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendMwacData )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ SAFEARRAY * psaData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendOneMwacRecord )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR build,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateExploitRecord )( 
            ITelemetryControllerV5 * This,
            /* [out] */ IExploitRecord **ppExploitRec,
            /* [in] */ BSTR blockID,
            /* [in] */ BSTR pid,
            /* [in] */ BSTR process,
            /* [in] */ BSTR md5payload,
            /* [in] */ BSTR cmd,
            /* [in] */ BSTR detnType,
            /* [in] */ BSTR detnAPI);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendExploitData )( 
            ITelemetryControllerV5 * This,
            /* [in] */ IExploitRecord *pExploitRec,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            /* [in] */ BSTR programVersion,
            /* [in] */ VARIANT_BOOL registered,
            /* [in] */ BSTR muid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUserInteractionData )( 
            ITelemetryControllerV5 * This,
            /* [in] */ long eventCode,
            /* [in] */ BSTR timeStamp,
            /* [in] */ long data1,
            /* [in] */ BSTR data2);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendRansomwareData )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR programName,
            /* [in] */ BSTR progBuild,
            /* [in] */ BSTR programVersion,
            /* [in] */ BSTR callerName,
            /* [in] */ BSTR trigger,
            int pid,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR Disposition,
            /* [in] */ BSTR jsonfilename);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            ITelemetryControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            ITelemetryControllerV5 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowDataCollection )( 
            ITelemetryControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowDataCollection )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalScans )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numScans);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMalwareDetections )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalArwDetections )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPupDetections )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalPumDetections )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalRTPBlocks )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalMwacBlocks )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetTotalExploitsBlocked )( 
            ITelemetryControllerV5 * This,
            /* [in] */ UINT64 numDetections);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsRtpEnabled )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsAntiExploitEnabled )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsArwEnabled )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsSelfProtectionEnabled )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bEnabled,
            /* [in] */ VARIANT_BOOL bEarlyStart);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetIsMwacEnabled )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetScanConfig )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bArkEnabled,
            /* [in] */ VARIANT_BOOL bScanArchiveEnabled,
            /* [in] */ long pupSetting,
            /* [in] */ long pumSetting);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetEndpointAgentInstalled )( 
            ITelemetryControllerV5 * This,
            /* [in] */ VARIANT_BOOL bEAInstalled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaJWT )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR nebulaJWT);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetNebulaAttributes )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR nebula_account_id,
            /* [in] */ BSTR nebula_machine_id,
            /* [in] */ BSTR nebula_machine_name,
            /* [in] */ BSTR nebula_origin,
            /* [in] */ BSTR nebula_group_id,
            /* [in] */ BSTR nebula_policy_id,
            /* [in] */ BSTR nebula_policy_etag,
            /* [in] */ BSTR nebula_ea_version,
            /* [in] */ BSTR nebula_ea_plugin_version);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineAction )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR quarantineData,
            /* [in] */ _TelemetryQuarantineAction action);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendQuarantineRefresh )( 
            ITelemetryControllerV5 * This,
            /* [in] */ SAFEARRAY * pQuarantineDataArray);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendUIEvent )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR pEventType,
            /* [in] */ BSTR pObjectName,
            /* [in] */ BSTR pObjectType,
            /* [in] */ BSTR pObjectId,
            /* [in] */ BSTR pAction,
            /* [in] */ BSTR pTimestamp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableGameMode )( 
            ITelemetryControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisableGameMode )( 
            ITelemetryControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SendOneMwacRecordV2 )( 
            ITelemetryControllerV5 * This,
            /* [in] */ BSTR blockCategoryName,
            /* [in] */ BSTR blockListFile,
            /* [in] */ BSTR blockListName,
            /* [in] */ BSTR dbVersion,
            /* [in] */ BSTR NetDomain,
            /* [in] */ BSTR NetIPAddr,
            /* [in] */ long NetPort,
            /* [in] */ BSTR ProcessPath,
            /* [in] */ BSTR Direction,
            /* [in] */ BSTR Disposition,
            /* [in] */ long ruleID,
            /* [in] */ BSTR threatName,
            /* [in] */ long whiteListDisposition,
            /* [in] */ BSTR md5hash,
            /* [in] */ BSTR sha256Hash);
        
        END_INTERFACE
    } ITelemetryControllerV5Vtbl;

    interface ITelemetryControllerV5
    {
        CONST_VTBL struct ITelemetryControllerV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITelemetryControllerV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITelemetryControllerV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITelemetryControllerV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITelemetryControllerV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITelemetryControllerV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITelemetryControllerV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITelemetryControllerV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITelemetryControllerV5_Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,logController,pPoliciesController,pLicenseController,pUpdateController,pProductCode,pProductVersion,pProductBuild,pAffiliateName,pAffiliateID) ) 

#define ITelemetryControllerV5_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ITelemetryControllerV5_ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules)	\
    ( (This)->lpVtbl -> ReportMalware(This,progName,buildName,callerName,triggerName,progVer,rulesVer,licenseState,psaRules) ) 

#define ITelemetryControllerV5_MalwareStream(This,malwareDetResFilePath)	\
    ( (This)->lpVtbl -> MalwareStream(This,malwareDetResFilePath) ) 

#define ITelemetryControllerV5_SendClientData(This,bIsUserAdmin)	\
    ( (This)->lpVtbl -> SendClientData(This,bIsUserAdmin) ) 

#define ITelemetryControllerV5_SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount)	\
    ( (This)->lpVtbl -> SendLicenseData(This,callerName,trigger,programName,licenseKey,licenseState,seatCount) ) 

#define ITelemetryControllerV5_SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData)	\
    ( (This)->lpVtbl -> SendMwacData(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,psaData) ) 

#define ITelemetryControllerV5_SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition)	\
    ( (This)->lpVtbl -> SendOneMwacRecord(This,programName,build,callerName,trigger,programVersion,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition) ) 

#define ITelemetryControllerV5_CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI)	\
    ( (This)->lpVtbl -> CreateExploitRecord(This,ppExploitRec,blockID,pid,process,md5payload,cmd,detnType,detnAPI) ) 

#define ITelemetryControllerV5_SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid)	\
    ( (This)->lpVtbl -> SendExploitData(This,pExploitRec,programName,progBuild,callerName,trigger,programVersion,registered,muid) ) 

#define ITelemetryControllerV5_SendUserInteractionData(This,eventCode,timeStamp,data1,data2)	\
    ( (This)->lpVtbl -> SendUserInteractionData(This,eventCode,timeStamp,data1,data2) ) 

#define ITelemetryControllerV5_SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename)	\
    ( (This)->lpVtbl -> SendRansomwareData(This,programName,progBuild,programVersion,callerName,trigger,pid,ProcessPath,md5hash,Disposition,jsonfilename) ) 

#define ITelemetryControllerV5_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define ITelemetryControllerV5_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define ITelemetryControllerV5_get_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowDataCollection(This,pVal) ) 

#define ITelemetryControllerV5_put_AllowDataCollection(This,pVal)	\
    ( (This)->lpVtbl -> put_AllowDataCollection(This,pVal) ) 


#define ITelemetryControllerV5_SetTotalScans(This,numScans)	\
    ( (This)->lpVtbl -> SetTotalScans(This,numScans) ) 

#define ITelemetryControllerV5_SetTotalMalwareDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMalwareDetections(This,numDetections) ) 

#define ITelemetryControllerV5_SetTotalArwDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalArwDetections(This,numDetections) ) 

#define ITelemetryControllerV5_SetTotalPupDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPupDetections(This,numDetections) ) 

#define ITelemetryControllerV5_SetTotalPumDetections(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalPumDetections(This,numDetections) ) 

#define ITelemetryControllerV5_SetTotalRTPBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalRTPBlocks(This,numDetections) ) 

#define ITelemetryControllerV5_SetTotalMwacBlocks(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalMwacBlocks(This,numDetections) ) 

#define ITelemetryControllerV5_SetTotalExploitsBlocked(This,numDetections)	\
    ( (This)->lpVtbl -> SetTotalExploitsBlocked(This,numDetections) ) 

#define ITelemetryControllerV5_SetIsRtpEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsRtpEnabled(This,bEnabled) ) 

#define ITelemetryControllerV5_SetIsAntiExploitEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsAntiExploitEnabled(This,bEnabled) ) 

#define ITelemetryControllerV5_SetIsArwEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsArwEnabled(This,bEnabled) ) 

#define ITelemetryControllerV5_SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart)	\
    ( (This)->lpVtbl -> SetIsSelfProtectionEnabled(This,bEnabled,bEarlyStart) ) 

#define ITelemetryControllerV5_SetIsMwacEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> SetIsMwacEnabled(This,bEnabled) ) 

#define ITelemetryControllerV5_SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting)	\
    ( (This)->lpVtbl -> SetScanConfig(This,bArkEnabled,bScanArchiveEnabled,pupSetting,pumSetting) ) 

#define ITelemetryControllerV5_SetEndpointAgentInstalled(This,bEAInstalled)	\
    ( (This)->lpVtbl -> SetEndpointAgentInstalled(This,bEAInstalled) ) 

#define ITelemetryControllerV5_SetNebulaJWT(This,nebulaJWT)	\
    ( (This)->lpVtbl -> SetNebulaJWT(This,nebulaJWT) ) 

#define ITelemetryControllerV5_SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version)	\
    ( (This)->lpVtbl -> SetNebulaAttributes(This,nebula_account_id,nebula_machine_id,nebula_machine_name,nebula_origin,nebula_group_id,nebula_policy_id,nebula_policy_etag,nebula_ea_version,nebula_ea_plugin_version) ) 

#define ITelemetryControllerV5_SendQuarantineAction(This,quarantineData,action)	\
    ( (This)->lpVtbl -> SendQuarantineAction(This,quarantineData,action) ) 

#define ITelemetryControllerV5_SendQuarantineRefresh(This,pQuarantineDataArray)	\
    ( (This)->lpVtbl -> SendQuarantineRefresh(This,pQuarantineDataArray) ) 


#define ITelemetryControllerV5_SendUIEvent(This,pEventType,pObjectName,pObjectType,pObjectId,pAction,pTimestamp)	\
    ( (This)->lpVtbl -> SendUIEvent(This,pEventType,pObjectName,pObjectType,pObjectId,pAction,pTimestamp) ) 


#define ITelemetryControllerV5_EnableGameMode(This)	\
    ( (This)->lpVtbl -> EnableGameMode(This) ) 

#define ITelemetryControllerV5_DisableGameMode(This)	\
    ( (This)->lpVtbl -> DisableGameMode(This) ) 


#define ITelemetryControllerV5_SendOneMwacRecordV2(This,blockCategoryName,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition,ruleID,threatName,whiteListDisposition,md5hash,sha256Hash)	\
    ( (This)->lpVtbl -> SendOneMwacRecordV2(This,blockCategoryName,blockListFile,blockListName,dbVersion,NetDomain,NetIPAddr,NetPort,ProcessPath,Direction,Disposition,ruleID,threatName,whiteListDisposition,md5hash,sha256Hash) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITelemetryControllerV5_INTERFACE_DEFINED__ */


#ifndef __ITelemetryControllerEvents_INTERFACE_DEFINED__
#define __ITelemetryControllerEvents_INTERFACE_DEFINED__

/* interface ITelemetryControllerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_ITelemetryControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3DCF0F42-EF8F-4450-BA68-42B61F594B2F")
    ITelemetryControllerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE TelemetryConfigChanged( 
            /* [in] */ _TelemetryConfigOptionName configOptionName,
            /* [in] */ VARIANT value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ITelemetryControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITelemetryControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITelemetryControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITelemetryControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITelemetryControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITelemetryControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITelemetryControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITelemetryControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *TelemetryConfigChanged )( 
            ITelemetryControllerEvents * This,
            /* [in] */ _TelemetryConfigOptionName configOptionName,
            /* [in] */ VARIANT value);
        
        END_INTERFACE
    } ITelemetryControllerEventsVtbl;

    interface ITelemetryControllerEvents
    {
        CONST_VTBL struct ITelemetryControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITelemetryControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITelemetryControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITelemetryControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITelemetryControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITelemetryControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITelemetryControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITelemetryControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITelemetryControllerEvents_TelemetryConfigChanged(This,configOptionName,value)	\
    ( (This)->lpVtbl -> TelemetryConfigChanged(This,configOptionName,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITelemetryControllerEvents_INTERFACE_DEFINED__ */


#ifndef ___ITelemetryControllerEvents_DISPINTERFACE_DEFINED__
#define ___ITelemetryControllerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _ITelemetryControllerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__ITelemetryControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1E3F0FEC-3E40-4137-8C7D-090AFA9B6C5E")
    _ITelemetryControllerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _ITelemetryControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ITelemetryControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ITelemetryControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ITelemetryControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ITelemetryControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ITelemetryControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ITelemetryControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ITelemetryControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _ITelemetryControllerEventsVtbl;

    interface _ITelemetryControllerEvents
    {
        CONST_VTBL struct _ITelemetryControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ITelemetryControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ITelemetryControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ITelemetryControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ITelemetryControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ITelemetryControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ITelemetryControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ITelemetryControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___ITelemetryControllerEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ExploitRecord;

#ifdef __cplusplus

class DECLSPEC_UUID("F6D29500-933C-447C-9D88-9D814AF73808")
ExploitRecord;
#endif

EXTERN_C const CLSID CLSID_TelemetryController;

#ifdef __cplusplus

class DECLSPEC_UUID("DE03E614-112D-43E0-8E15-E7236CC32108")
TelemetryController;
#endif
#endif /* __TelemetryControllerCOMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


