

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 14:14:07 2038
 */
/* Compiler settings for C:\Users\User\source\repos\MBAMExploit\Typelibs\UpdateController.IDL:
    Oicf, W1, Zp8, env=Win64 (32b run), target_arch=AMD64 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#include "LicenseController.h"
#include "LogController.h"
#include "PoliciesController.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */


#ifndef __UpdateController_h__
#define __UpdateController_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IUpdateController_FWD_DEFINED__
#define __IUpdateController_FWD_DEFINED__
typedef interface IUpdateController IUpdateController;

#endif 	/* __IUpdateController_FWD_DEFINED__ */


#ifndef __IUpdateControllerEvents_FWD_DEFINED__
#define __IUpdateControllerEvents_FWD_DEFINED__
typedef interface IUpdateControllerEvents IUpdateControllerEvents;

#endif 	/* __IUpdateControllerEvents_FWD_DEFINED__ */


#ifndef ___IUpdateControllerEvents_FWD_DEFINED__
#define ___IUpdateControllerEvents_FWD_DEFINED__
typedef interface _IUpdateControllerEvents _IUpdateControllerEvents;

#endif 	/* ___IUpdateControllerEvents_FWD_DEFINED__ */


#ifndef __IUpdateControllerV2_FWD_DEFINED__
#define __IUpdateControllerV2_FWD_DEFINED__
typedef interface IUpdateControllerV2 IUpdateControllerV2;

#endif 	/* __IUpdateControllerV2_FWD_DEFINED__ */


#ifndef __IUpdateControllerV3_FWD_DEFINED__
#define __IUpdateControllerV3_FWD_DEFINED__
typedef interface IUpdateControllerV3 IUpdateControllerV3;

#endif 	/* __IUpdateControllerV3_FWD_DEFINED__ */


#ifndef __IUpdateControllerV4_FWD_DEFINED__
#define __IUpdateControllerV4_FWD_DEFINED__
typedef interface IUpdateControllerV4 IUpdateControllerV4;

#endif 	/* __IUpdateControllerV4_FWD_DEFINED__ */


#ifndef __IUpdateControllerV5_FWD_DEFINED__
#define __IUpdateControllerV5_FWD_DEFINED__
typedef interface IUpdateControllerV5 IUpdateControllerV5;

#endif 	/* __IUpdateControllerV5_FWD_DEFINED__ */


#ifndef __IUpdateControllerV6_FWD_DEFINED__
#define __IUpdateControllerV6_FWD_DEFINED__
typedef interface IUpdateControllerV6 IUpdateControllerV6;

#endif 	/* __IUpdateControllerV6_FWD_DEFINED__ */


#ifndef __IUpdateControllerV7_FWD_DEFINED__
#define __IUpdateControllerV7_FWD_DEFINED__
typedef interface IUpdateControllerV7 IUpdateControllerV7;

#endif 	/* __IUpdateControllerV7_FWD_DEFINED__ */


#ifndef __IUpdateControllerV8_FWD_DEFINED__
#define __IUpdateControllerV8_FWD_DEFINED__
typedef interface IUpdateControllerV8 IUpdateControllerV8;

#endif 	/* __IUpdateControllerV8_FWD_DEFINED__ */


#ifndef __IUpdateControllerV9_FWD_DEFINED__
#define __IUpdateControllerV9_FWD_DEFINED__
typedef interface IUpdateControllerV9 IUpdateControllerV9;

#endif 	/* __IUpdateControllerV9_FWD_DEFINED__ */


#ifndef __IUpdateControllerEventsV2_FWD_DEFINED__
#define __IUpdateControllerEventsV2_FWD_DEFINED__
typedef interface IUpdateControllerEventsV2 IUpdateControllerEventsV2;

#endif 	/* __IUpdateControllerEventsV2_FWD_DEFINED__ */


#ifndef ___IUpdateControllerEventsV2_FWD_DEFINED__
#define ___IUpdateControllerEventsV2_FWD_DEFINED__
typedef interface _IUpdateControllerEventsV2 _IUpdateControllerEventsV2;

#endif 	/* ___IUpdateControllerEventsV2_FWD_DEFINED__ */


#ifndef __UpdateController_FWD_DEFINED__
#define __UpdateController_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpdateController UpdateController;
#else
typedef struct UpdateController UpdateController;
#endif /* __cplusplus */

#endif 	/* __UpdateController_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __UpdateControllerCOMLib_LIBRARY_DEFINED__
#define __UpdateControllerCOMLib_LIBRARY_DEFINED__

/* library UpdateControllerCOMLib */
/* [custom][custom][custom][version][uuid] */ 














typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_UpdateController_0000_0000_0001
    {
        UCO_UpdateCheckInterval	= 1,
        UCO_MaxIncrementalDBUpdates	= 2,
        UCO_ForceFullDBUpdates	= 3,
        UCO_EnableAutoUpdateDBCLS	= 4,
        UCO_EnableAutoUpdateSDKCtlr	= 5,
        UCO_BetaChannelOptIn	= 6,
        UCO_MessageAdded	= 7,
        UCO_MessageUpdated	= 8,
        UCO_MessageRemoved	= 9
    } 	_UpdateConfigOptions;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_UpdateController_0000_0000_0002
    {
        AppInstaller	= 0,
        SdkControllers	= 1,
        DbClsEng	= 2,
        AE_dyn_config	= 3,
        AE_exclusions	= 4,
        MB_UI_components	= 5,
        MB_UI_langfiles	= 6,
        IRIS_Data	= 7,
        UPT_NA	= 99
    } 	_UpdatePackageType;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_UpdateController_0000_0000_0003
    {
        UpdatePhaseIdle	= 0,
        UpdatePhaseCheck	= 1,
        UpdatePhaseFoundUpdate	= 2,
        UpdatePhaseDownload	= 3,
        UpdatePhaseApply	= 4,
        UpdatePhaseComplete	= 5
    } 	_UpdatePhase;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_UpdateController_0000_0000_0004
    {
        UpdateControllerIdle	= 0,
        UpdateControllerStarted	= 1,
        UpdateControllerStopping	= 2,
        UpdateControllerOnline	= 3,
        UpdateControllerOffline	= 4
    } 	_UpdateControllerState;


EXTERN_C const IID LIBID_UpdateControllerCOMLib;

#ifndef __IUpdateController_INTERFACE_DEFINED__
#define __IUpdateController_INTERFACE_DEFINED__

/* interface IUpdateController */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateController;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E4EA13DC-F9D2-4DB9-A19F-2B462FFC81F3")
    IUpdateController : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Update( 
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdatePhase( 
            /* [retval][out] */ _UpdatePhase *pPhase) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IsInstallerUpdatePending( 
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSdkControllerUpdatePending( 
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetUpdateDetails( 
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE InstallUpdate( 
            /* [in] */ _UpdatePackageType updatePkgType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PrepareUpdate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FinishUpdate( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateComplete( 
            /* [in] */ _UpdatePackageType updatePkgType) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateCheckInterval( 
            /* [retval][out] */ unsigned long *minutes) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateCheckInterval( 
            /* [in] */ unsigned long minutes) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MaxIncrementalDBUpdates( 
            /* [retval][out] */ unsigned long *maxIncrUpdates) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_MaxIncrementalDBUpdates( 
            /* [in] */ unsigned long maxIncrUpdates) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceFullDBUpdate( 
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceFullDBUpdate( 
            /* [in] */ VARIANT_BOOL pForceFullUpdate) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ProgramVersion( 
            /* [retval][out] */ BSTR *pVersion) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ProgramVersion( 
            /* [in] */ BSTR pVersion) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ControllersVersion( 
            /* [retval][out] */ BSTR *pVersion) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ControllersVersion( 
            /* [in] */ BSTR pVersion) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DBClsPkgVersion( 
            /* [retval][out] */ BSTR *pVersion) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DBClsPkgVersion( 
            /* [in] */ BSTR pVersion) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DBVersion( 
            /* [retval][out] */ BSTR *pVersion) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DBPublicationDate( 
            /* [retval][out] */ INT64 *date) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoUpdateDbCls( 
            /* [retval][out] */ VARIANT_BOOL *pbValue) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoUpdateDbCls( 
            /* [in] */ VARIANT_BOOL pbValue) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoUpdateSdkCtlr( 
            /* [retval][out] */ VARIANT_BOOL *pbValue) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoUpdateSdkCtlr( 
            /* [in] */ VARIANT_BOOL pbValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetDBPublicationDate( 
            /* [in] */ BSTR pubDate) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateController * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateController * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateController * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateController * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateController * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateController * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateController * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateController * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateController * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateController * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateController * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateController * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateController * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateController * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateController * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateController * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateController * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateController * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateController * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateController * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateController * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateController * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateController * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateController * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateController * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateController * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateController * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateController * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateController * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateController * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateController * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateController * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateController * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateController * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateController * This,
            /* [in] */ BSTR pubDate);
        
        END_INTERFACE
    } IUpdateControllerVtbl;

    interface IUpdateController
    {
        CONST_VTBL struct IUpdateControllerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateController_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateController_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateController_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateController_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateController_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateController_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateController_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateController_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateController_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateController_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateController_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateController_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateController_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateController_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateController_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateController_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateController_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateController_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateController_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateController_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateController_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateController_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateController_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateController_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateController_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateController_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateController_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateController_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateController_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateController_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateController_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateController_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateController_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateController_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateController_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateController_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerEvents_INTERFACE_DEFINED__
#define __IUpdateControllerEvents_INTERFACE_DEFINED__

/* interface IUpdateControllerEvents */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C0D8223D-D594-4147-BAD8-1E2B54ED1990")
    IUpdateControllerEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ConfigurationChanged( 
            /* [in] */ _UpdateConfigOptions option,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateProgress( 
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ _UpdatePhase phase,
            /* [in] */ int stage,
            /* [in] */ int stageCount,
            /* [in] */ int errorCode) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ControllerState( 
            /* [in] */ _UpdateControllerState state) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateAvailable( 
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ VARIANT_BOOL pUpdateAvailable,
            /* [in] */ BSTR pNewVersion) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateDownloaded( 
            /* [in] */ BSTR pFilePath,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ BSTR pNewVersion,
            /* [in] */ VARIANT_BOOL downloadSuccessful) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateApplied( 
            /* [in] */ BSTR pFilePath,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ BSTR pNewVersion,
            /* [in] */ VARIANT_BOOL successful) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ConfigurationChanged )( 
            IUpdateControllerEvents * This,
            /* [in] */ _UpdateConfigOptions option,
            /* [in] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateProgress )( 
            IUpdateControllerEvents * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ _UpdatePhase phase,
            /* [in] */ int stage,
            /* [in] */ int stageCount,
            /* [in] */ int errorCode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ControllerState )( 
            IUpdateControllerEvents * This,
            /* [in] */ _UpdateControllerState state);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateAvailable )( 
            IUpdateControllerEvents * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ VARIANT_BOOL pUpdateAvailable,
            /* [in] */ BSTR pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateDownloaded )( 
            IUpdateControllerEvents * This,
            /* [in] */ BSTR pFilePath,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ BSTR pNewVersion,
            /* [in] */ VARIANT_BOOL downloadSuccessful);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateApplied )( 
            IUpdateControllerEvents * This,
            /* [in] */ BSTR pFilePath,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [in] */ BSTR pNewVersion,
            /* [in] */ VARIANT_BOOL successful);
        
        END_INTERFACE
    } IUpdateControllerEventsVtbl;

    interface IUpdateControllerEvents
    {
        CONST_VTBL struct IUpdateControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerEvents_ConfigurationChanged(This,option,value)	\
    ( (This)->lpVtbl -> ConfigurationChanged(This,option,value) ) 

#define IUpdateControllerEvents_UpdateProgress(This,updPkgType,phase,stage,stageCount,errorCode)	\
    ( (This)->lpVtbl -> UpdateProgress(This,updPkgType,phase,stage,stageCount,errorCode) ) 

#define IUpdateControllerEvents_ControllerState(This,state)	\
    ( (This)->lpVtbl -> ControllerState(This,state) ) 

#define IUpdateControllerEvents_UpdateAvailable(This,updPkgType,pUpdateAvailable,pNewVersion)	\
    ( (This)->lpVtbl -> UpdateAvailable(This,updPkgType,pUpdateAvailable,pNewVersion) ) 

#define IUpdateControllerEvents_UpdateDownloaded(This,pFilePath,updPkgType,pNewVersion,downloadSuccessful)	\
    ( (This)->lpVtbl -> UpdateDownloaded(This,pFilePath,updPkgType,pNewVersion,downloadSuccessful) ) 

#define IUpdateControllerEvents_UpdateApplied(This,pFilePath,updPkgType,pNewVersion,successful)	\
    ( (This)->lpVtbl -> UpdateApplied(This,pFilePath,updPkgType,pNewVersion,successful) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerEvents_INTERFACE_DEFINED__ */


#ifndef ___IUpdateControllerEvents_DISPINTERFACE_DEFINED__
#define ___IUpdateControllerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IUpdateControllerEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__IUpdateControllerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("638A43D2-5475-424B-87B8-042109D7768F")
    _IUpdateControllerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IUpdateControllerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IUpdateControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IUpdateControllerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IUpdateControllerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IUpdateControllerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IUpdateControllerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IUpdateControllerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IUpdateControllerEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IUpdateControllerEventsVtbl;

    interface _IUpdateControllerEvents
    {
        CONST_VTBL struct _IUpdateControllerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IUpdateControllerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IUpdateControllerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IUpdateControllerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IUpdateControllerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IUpdateControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IUpdateControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IUpdateControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IUpdateControllerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV2_INTERFACE_DEFINED__
#define __IUpdateControllerV2_INTERFACE_DEFINED__

/* interface IUpdateControllerV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2F14F58B-B908-4644-830F-5ACF8542D27F")
    IUpdateControllerV2 : public IUpdateController
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE HasCheckedForDbUpdate( 
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV2 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV2 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV2 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV2 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV2 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV2 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV2 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV2 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV2 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV2 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV2 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV2 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV2 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV2 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV2 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        END_INTERFACE
    } IUpdateControllerV2Vtbl;

    interface IUpdateControllerV2
    {
        CONST_VTBL struct IUpdateControllerV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV2_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV2_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV2_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV2_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV2_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV2_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV2_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV2_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV2_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV2_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV2_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV2_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV2_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV2_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV2_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV2_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV2_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV2_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV2_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV2_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV2_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV2_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV2_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV2_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV2_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV2_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV2_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV2_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV2_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV2_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV2_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV2_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV3_INTERFACE_DEFINED__
#define __IUpdateControllerV3_INTERFACE_DEFINED__

/* interface IUpdateControllerV3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E4BDE5F8-F8D4-4E50-937F-85E8382A9FEE")
    IUpdateControllerV3 : public IUpdateControllerV2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PowerSuspendNotification( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PowerResumeNotification( 
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BetaChannelUpdates( 
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BetaChannelUpdates( 
            /* [in] */ VARIANT_BOOL pvbBetaOptIn) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV3 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV3 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV3 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV3 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV3 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV3 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV3 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV3 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV3 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV3 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV3 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV3 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV3 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV3 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV3 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV3 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV3 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV3 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        END_INTERFACE
    } IUpdateControllerV3Vtbl;

    interface IUpdateControllerV3
    {
        CONST_VTBL struct IUpdateControllerV3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV3_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV3_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV3_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV3_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV3_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV3_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV3_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV3_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV3_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV3_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV3_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV3_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV3_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV3_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV3_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV3_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV3_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV3_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV3_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV3_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV3_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV3_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV3_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV3_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV3_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV3_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV3_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV3_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV3_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV3_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV3_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV3_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV3_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV3_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV3_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV3_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV4_INTERFACE_DEFINED__
#define __IUpdateControllerV4_INTERFACE_DEFINED__

/* interface IUpdateControllerV4 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A2D4A69C-14CA-4825-9376-5B4215AF5C5E")
    IUpdateControllerV4 : public IUpdateControllerV3
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ReplaceUI( 
            /* [in] */ unsigned long sessionId) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV4 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV4 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV4 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV4 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV4 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV4 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV4 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV4 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV4 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV4 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV4 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV4 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV4 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV4 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV4 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV4 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV4 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV4 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV4 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV4 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceUI )( 
            IUpdateControllerV4 * This,
            /* [in] */ unsigned long sessionId);
        
        END_INTERFACE
    } IUpdateControllerV4Vtbl;

    interface IUpdateControllerV4
    {
        CONST_VTBL struct IUpdateControllerV4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV4_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV4_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV4_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV4_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV4_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV4_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV4_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV4_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV4_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV4_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV4_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV4_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV4_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV4_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV4_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV4_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV4_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV4_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV4_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV4_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV4_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV4_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV4_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV4_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV4_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV4_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV4_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV4_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV4_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV4_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV4_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV4_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV4_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV4_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV4_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 


#define IUpdateControllerV4_ReplaceUI(This,sessionId)	\
    ( (This)->lpVtbl -> ReplaceUI(This,sessionId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV4_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV5_INTERFACE_DEFINED__
#define __IUpdateControllerV5_INTERFACE_DEFINED__

/* interface IUpdateControllerV5 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("79CAE9D0-99AA-4FEB-B6B1-1AC1A2D8F874")
    IUpdateControllerV5 : public IUpdateControllerV4
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetDORPending( 
            /* [in] */ VARIANT_BOOL vbDorIsPending) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV5 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV5 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV5 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV5 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV5 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV5 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV5 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV5 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV5 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV5 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV5 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV5 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV5 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV5 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV5 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV5 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV5 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceUI )( 
            IUpdateControllerV5 * This,
            /* [in] */ unsigned long sessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDORPending )( 
            IUpdateControllerV5 * This,
            /* [in] */ VARIANT_BOOL vbDorIsPending);
        
        END_INTERFACE
    } IUpdateControllerV5Vtbl;

    interface IUpdateControllerV5
    {
        CONST_VTBL struct IUpdateControllerV5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV5_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV5_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV5_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV5_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV5_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV5_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV5_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV5_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV5_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV5_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV5_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV5_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV5_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV5_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV5_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV5_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV5_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV5_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV5_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV5_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV5_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV5_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV5_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV5_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV5_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV5_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV5_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV5_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV5_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV5_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV5_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV5_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV5_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV5_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV5_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV5_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV5_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV5_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV5_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 


#define IUpdateControllerV5_ReplaceUI(This,sessionId)	\
    ( (This)->lpVtbl -> ReplaceUI(This,sessionId) ) 


#define IUpdateControllerV5_SetDORPending(This,vbDorIsPending)	\
    ( (This)->lpVtbl -> SetDORPending(This,vbDorIsPending) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV5_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV6_INTERFACE_DEFINED__
#define __IUpdateControllerV6_INTERFACE_DEFINED__

/* interface IUpdateControllerV6 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV6;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17A7CC72-3288-442A-ABE8-F8E049B3BE83")
    IUpdateControllerV6 : public IUpdateControllerV5
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetMessageIDList( 
            /* [retval][out] */ SAFEARRAY * *ppMessageIds) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetMessageDetails( 
            /* [in] */ long msgID,
            /* [out] */ long *target_id,
            /* [out] */ BSTR *content_type,
            /* [out] */ BSTR *download_url,
            /* [out] */ long *cohort_id,
            /* [out] */ BSTR *start_date,
            /* [out] */ BSTR *end_date,
            /* [out] */ unsigned long *display_time,
            /* [out] */ unsigned long *frequency,
            /* [out] */ unsigned long *display_count,
            /* [out] */ VARIANT_BOOL *allow_user_suppression) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetMinimumSupportedComponentPackageVersion( 
            /* [in] */ BSTR pMinSupportedCUVersion) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV6 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV6 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV6 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV6 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV6 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV6 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV6 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV6 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV6 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV6 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV6 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV6 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV6 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV6 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV6 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV6 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV6 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceUI )( 
            IUpdateControllerV6 * This,
            /* [in] */ unsigned long sessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDORPending )( 
            IUpdateControllerV6 * This,
            /* [in] */ VARIANT_BOOL vbDorIsPending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageIDList )( 
            IUpdateControllerV6 * This,
            /* [retval][out] */ SAFEARRAY * *ppMessageIds);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageDetails )( 
            IUpdateControllerV6 * This,
            /* [in] */ long msgID,
            /* [out] */ long *target_id,
            /* [out] */ BSTR *content_type,
            /* [out] */ BSTR *download_url,
            /* [out] */ long *cohort_id,
            /* [out] */ BSTR *start_date,
            /* [out] */ BSTR *end_date,
            /* [out] */ unsigned long *display_time,
            /* [out] */ unsigned long *frequency,
            /* [out] */ unsigned long *display_count,
            /* [out] */ VARIANT_BOOL *allow_user_suppression);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetMinimumSupportedComponentPackageVersion )( 
            IUpdateControllerV6 * This,
            /* [in] */ BSTR pMinSupportedCUVersion);
        
        END_INTERFACE
    } IUpdateControllerV6Vtbl;

    interface IUpdateControllerV6
    {
        CONST_VTBL struct IUpdateControllerV6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV6_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV6_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV6_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV6_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV6_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV6_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV6_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV6_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV6_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV6_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV6_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV6_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV6_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV6_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV6_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV6_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV6_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV6_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV6_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV6_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV6_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV6_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV6_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV6_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV6_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV6_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV6_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV6_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV6_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV6_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV6_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV6_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV6_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV6_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV6_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV6_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV6_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV6_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV6_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 


#define IUpdateControllerV6_ReplaceUI(This,sessionId)	\
    ( (This)->lpVtbl -> ReplaceUI(This,sessionId) ) 


#define IUpdateControllerV6_SetDORPending(This,vbDorIsPending)	\
    ( (This)->lpVtbl -> SetDORPending(This,vbDorIsPending) ) 


#define IUpdateControllerV6_GetMessageIDList(This,ppMessageIds)	\
    ( (This)->lpVtbl -> GetMessageIDList(This,ppMessageIds) ) 

#define IUpdateControllerV6_GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression)	\
    ( (This)->lpVtbl -> GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression) ) 

#define IUpdateControllerV6_SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion)	\
    ( (This)->lpVtbl -> SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV6_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV7_INTERFACE_DEFINED__
#define __IUpdateControllerV7_INTERFACE_DEFINED__

/* interface IUpdateControllerV7 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV7;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA484BC6-E101-4A87-AAF3-B468B3F2C6BB")
    IUpdateControllerV7 : public IUpdateControllerV6
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LastDbUpdateTimeStamp( 
            /* [retval][out] */ BSTR *pTimeStamp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetPackageAging( 
            /* [in] */ _UpdatePackageType pkgType,
            /* [in] */ long minAge) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV7Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV7 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV7 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV7 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV7 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV7 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV7 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV7 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV7 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV7 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV7 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV7 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV7 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV7 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV7 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV7 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV7 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV7 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV7 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV7 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceUI )( 
            IUpdateControllerV7 * This,
            /* [in] */ unsigned long sessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDORPending )( 
            IUpdateControllerV7 * This,
            /* [in] */ VARIANT_BOOL vbDorIsPending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageIDList )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ SAFEARRAY * *ppMessageIds);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageDetails )( 
            IUpdateControllerV7 * This,
            /* [in] */ long msgID,
            /* [out] */ long *target_id,
            /* [out] */ BSTR *content_type,
            /* [out] */ BSTR *download_url,
            /* [out] */ long *cohort_id,
            /* [out] */ BSTR *start_date,
            /* [out] */ BSTR *end_date,
            /* [out] */ unsigned long *display_time,
            /* [out] */ unsigned long *frequency,
            /* [out] */ unsigned long *display_count,
            /* [out] */ VARIANT_BOOL *allow_user_suppression);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetMinimumSupportedComponentPackageVersion )( 
            IUpdateControllerV7 * This,
            /* [in] */ BSTR pMinSupportedCUVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDbUpdateTimeStamp )( 
            IUpdateControllerV7 * This,
            /* [retval][out] */ BSTR *pTimeStamp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPackageAging )( 
            IUpdateControllerV7 * This,
            /* [in] */ _UpdatePackageType pkgType,
            /* [in] */ long minAge);
        
        END_INTERFACE
    } IUpdateControllerV7Vtbl;

    interface IUpdateControllerV7
    {
        CONST_VTBL struct IUpdateControllerV7Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV7_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV7_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV7_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV7_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV7_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV7_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV7_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV7_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV7_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV7_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV7_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV7_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV7_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV7_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV7_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV7_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV7_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV7_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV7_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV7_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV7_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV7_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV7_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV7_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV7_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV7_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV7_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV7_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV7_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV7_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV7_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV7_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV7_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV7_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV7_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV7_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV7_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV7_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV7_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV7_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV7_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV7_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 


#define IUpdateControllerV7_ReplaceUI(This,sessionId)	\
    ( (This)->lpVtbl -> ReplaceUI(This,sessionId) ) 


#define IUpdateControllerV7_SetDORPending(This,vbDorIsPending)	\
    ( (This)->lpVtbl -> SetDORPending(This,vbDorIsPending) ) 


#define IUpdateControllerV7_GetMessageIDList(This,ppMessageIds)	\
    ( (This)->lpVtbl -> GetMessageIDList(This,ppMessageIds) ) 

#define IUpdateControllerV7_GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression)	\
    ( (This)->lpVtbl -> GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression) ) 

#define IUpdateControllerV7_SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion)	\
    ( (This)->lpVtbl -> SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion) ) 


#define IUpdateControllerV7_get_LastDbUpdateTimeStamp(This,pTimeStamp)	\
    ( (This)->lpVtbl -> get_LastDbUpdateTimeStamp(This,pTimeStamp) ) 

#define IUpdateControllerV7_SetPackageAging(This,pkgType,minAge)	\
    ( (This)->lpVtbl -> SetPackageAging(This,pkgType,minAge) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV7_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV8_INTERFACE_DEFINED__
#define __IUpdateControllerV8_INTERFACE_DEFINED__

/* interface IUpdateControllerV8 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV8;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3A34647B-D9A8-40D9-B563-F9461E98030E")
    IUpdateControllerV8 : public IUpdateControllerV7
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SideLoadDatabase( 
            /* [in] */ BSTR pDBPackageFilePath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE UpdateCompleteV2( 
            /* [in] */ _UpdatePackageType updatePkgType,
            /* [in] */ long resultCode,
            /* [in] */ long auxCode) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV8Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV8 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV8 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV8 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV8 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV8 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV8 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV8 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV8 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV8 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV8 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV8 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV8 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV8 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV8 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceUI )( 
            IUpdateControllerV8 * This,
            /* [in] */ unsigned long sessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDORPending )( 
            IUpdateControllerV8 * This,
            /* [in] */ VARIANT_BOOL vbDorIsPending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageIDList )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ SAFEARRAY * *ppMessageIds);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageDetails )( 
            IUpdateControllerV8 * This,
            /* [in] */ long msgID,
            /* [out] */ long *target_id,
            /* [out] */ BSTR *content_type,
            /* [out] */ BSTR *download_url,
            /* [out] */ long *cohort_id,
            /* [out] */ BSTR *start_date,
            /* [out] */ BSTR *end_date,
            /* [out] */ unsigned long *display_time,
            /* [out] */ unsigned long *frequency,
            /* [out] */ unsigned long *display_count,
            /* [out] */ VARIANT_BOOL *allow_user_suppression);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetMinimumSupportedComponentPackageVersion )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pMinSupportedCUVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDbUpdateTimeStamp )( 
            IUpdateControllerV8 * This,
            /* [retval][out] */ BSTR *pTimeStamp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPackageAging )( 
            IUpdateControllerV8 * This,
            /* [in] */ _UpdatePackageType pkgType,
            /* [in] */ long minAge);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SideLoadDatabase )( 
            IUpdateControllerV8 * This,
            /* [in] */ BSTR pDBPackageFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateCompleteV2 )( 
            IUpdateControllerV8 * This,
            /* [in] */ _UpdatePackageType updatePkgType,
            /* [in] */ long resultCode,
            /* [in] */ long auxCode);
        
        END_INTERFACE
    } IUpdateControllerV8Vtbl;

    interface IUpdateControllerV8
    {
        CONST_VTBL struct IUpdateControllerV8Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV8_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV8_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV8_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV8_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV8_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV8_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV8_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV8_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV8_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV8_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV8_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV8_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV8_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV8_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV8_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV8_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV8_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV8_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV8_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV8_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV8_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV8_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV8_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV8_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV8_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV8_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV8_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV8_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV8_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV8_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV8_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV8_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV8_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV8_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV8_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV8_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV8_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV8_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV8_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV8_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV8_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV8_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 


#define IUpdateControllerV8_ReplaceUI(This,sessionId)	\
    ( (This)->lpVtbl -> ReplaceUI(This,sessionId) ) 


#define IUpdateControllerV8_SetDORPending(This,vbDorIsPending)	\
    ( (This)->lpVtbl -> SetDORPending(This,vbDorIsPending) ) 


#define IUpdateControllerV8_GetMessageIDList(This,ppMessageIds)	\
    ( (This)->lpVtbl -> GetMessageIDList(This,ppMessageIds) ) 

#define IUpdateControllerV8_GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression)	\
    ( (This)->lpVtbl -> GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression) ) 

#define IUpdateControllerV8_SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion)	\
    ( (This)->lpVtbl -> SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion) ) 


#define IUpdateControllerV8_get_LastDbUpdateTimeStamp(This,pTimeStamp)	\
    ( (This)->lpVtbl -> get_LastDbUpdateTimeStamp(This,pTimeStamp) ) 

#define IUpdateControllerV8_SetPackageAging(This,pkgType,minAge)	\
    ( (This)->lpVtbl -> SetPackageAging(This,pkgType,minAge) ) 


#define IUpdateControllerV8_SideLoadDatabase(This,pDBPackageFilePath)	\
    ( (This)->lpVtbl -> SideLoadDatabase(This,pDBPackageFilePath) ) 

#define IUpdateControllerV8_UpdateCompleteV2(This,updatePkgType,resultCode,auxCode)	\
    ( (This)->lpVtbl -> UpdateCompleteV2(This,updatePkgType,resultCode,auxCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV8_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerV9_INTERFACE_DEFINED__
#define __IUpdateControllerV9_INTERFACE_DEFINED__

/* interface IUpdateControllerV9 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerV9;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4215DAB-7574-44DE-8BE9-78CC62597C95")
    IUpdateControllerV9 : public IUpdateControllerV8
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableGameMode( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisableGameMode( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetIrisData( 
            /* [retval][out] */ BSTR *pIrisData) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerV9Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerV9 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerV9 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerV9 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerV9 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerV9 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerV9 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerV9 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pImplDLLPath,
            /* [in] */ BSTR pDataPath,
            /* [in] */ /* external definition not present */ ILogController *pLogController,
            /* [in] */ /* external definition not present */ IPoliciesController *pPoliciesController,
            /* [in] */ /* external definition not present */ ILicenseController *pLicenseController,
            /* [in] */ BSTR pProductCode,
            /* [in] */ BSTR pProductVersion,
            /* [in] */ BSTR pProductBuild);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IUpdateControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL chkInstaller,
            /* [in] */ VARIANT_BOOL chkSdkCtlr,
            /* [in] */ VARIANT_BOOL chkDbClsEng,
            /* [in] */ VARIANT_BOOL autoApply,
            /* [out] */ unsigned long *pStatus);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePhase )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ _UpdatePhase *pPhase);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInstallerUpdatePending )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSdkControllerUpdatePending )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pUpdatePending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUpdateDetails )( 
            IUpdateControllerV9 * This,
            /* [in] */ _UpdatePackageType updPkgType,
            /* [out] */ VARIANT_BOOL *pUpdatePending,
            /* [out] */ BSTR *filePath,
            /* [out] */ BSTR *pNewVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InstallUpdate )( 
            IUpdateControllerV9 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrepareUpdate )( 
            IUpdateControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FinishUpdate )( 
            IUpdateControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateComplete )( 
            IUpdateControllerV9 * This,
            /* [in] */ _UpdatePackageType updatePkgType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateCheckInterval )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ unsigned long *minutes);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateCheckInterval )( 
            IUpdateControllerV9 * This,
            /* [in] */ unsigned long minutes);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxIncrementalDBUpdates )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ unsigned long *maxIncrUpdates);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxIncrementalDBUpdates )( 
            IUpdateControllerV9 * This,
            /* [in] */ unsigned long maxIncrUpdates);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFullDBUpdate )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pForceFullUpdate);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFullDBUpdate )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL pForceFullUpdate);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgramVersion )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProgramVersion )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControllersVersion )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControllersVersion )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBClsPkgVersion )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DBClsPkgVersion )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBVersion )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ BSTR *pVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DBPublicationDate )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ INT64 *date);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateDbCls )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateDbCls )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateSdkCtlr )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateSdkCtlr )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL pbValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDBPublicationDate )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pubDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *HasCheckedForDbUpdate )( 
            IUpdateControllerV9 * This,
            /* [out] */ VARIANT_BOOL *pHasCheckedForDbUpdate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerSuspendNotification )( 
            IUpdateControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PowerResumeNotification )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL wasPowerSuspendCalled);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BetaChannelUpdates )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbBetaOptIn);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BetaChannelUpdates )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL pvbBetaOptIn);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceUI )( 
            IUpdateControllerV9 * This,
            /* [in] */ unsigned long sessionId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDORPending )( 
            IUpdateControllerV9 * This,
            /* [in] */ VARIANT_BOOL vbDorIsPending);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageIDList )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ SAFEARRAY * *ppMessageIds);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMessageDetails )( 
            IUpdateControllerV9 * This,
            /* [in] */ long msgID,
            /* [out] */ long *target_id,
            /* [out] */ BSTR *content_type,
            /* [out] */ BSTR *download_url,
            /* [out] */ long *cohort_id,
            /* [out] */ BSTR *start_date,
            /* [out] */ BSTR *end_date,
            /* [out] */ unsigned long *display_time,
            /* [out] */ unsigned long *frequency,
            /* [out] */ unsigned long *display_count,
            /* [out] */ VARIANT_BOOL *allow_user_suppression);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetMinimumSupportedComponentPackageVersion )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pMinSupportedCUVersion);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastDbUpdateTimeStamp )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ BSTR *pTimeStamp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPackageAging )( 
            IUpdateControllerV9 * This,
            /* [in] */ _UpdatePackageType pkgType,
            /* [in] */ long minAge);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SideLoadDatabase )( 
            IUpdateControllerV9 * This,
            /* [in] */ BSTR pDBPackageFilePath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *UpdateCompleteV2 )( 
            IUpdateControllerV9 * This,
            /* [in] */ _UpdatePackageType updatePkgType,
            /* [in] */ long resultCode,
            /* [in] */ long auxCode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableGameMode )( 
            IUpdateControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisableGameMode )( 
            IUpdateControllerV9 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetIrisData )( 
            IUpdateControllerV9 * This,
            /* [retval][out] */ BSTR *pIrisData);
        
        END_INTERFACE
    } IUpdateControllerV9Vtbl;

    interface IUpdateControllerV9
    {
        CONST_VTBL struct IUpdateControllerV9Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerV9_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerV9_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerV9_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerV9_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerV9_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerV9_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerV9_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerV9_Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild)	\
    ( (This)->lpVtbl -> Start(This,pImplDLLPath,pDataPath,pLogController,pPoliciesController,pLicenseController,pProductCode,pProductVersion,pProductBuild) ) 

#define IUpdateControllerV9_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IUpdateControllerV9_Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus)	\
    ( (This)->lpVtbl -> Update(This,chkInstaller,chkSdkCtlr,chkDbClsEng,autoApply,pStatus) ) 

#define IUpdateControllerV9_get_UpdatePhase(This,pPhase)	\
    ( (This)->lpVtbl -> get_UpdatePhase(This,pPhase) ) 

#define IUpdateControllerV9_get_IsInstallerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsInstallerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV9_get_IsSdkControllerUpdatePending(This,pUpdatePending)	\
    ( (This)->lpVtbl -> get_IsSdkControllerUpdatePending(This,pUpdatePending) ) 

#define IUpdateControllerV9_GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion)	\
    ( (This)->lpVtbl -> GetUpdateDetails(This,updPkgType,pUpdatePending,filePath,pNewVersion) ) 

#define IUpdateControllerV9_InstallUpdate(This,updatePkgType)	\
    ( (This)->lpVtbl -> InstallUpdate(This,updatePkgType) ) 

#define IUpdateControllerV9_PrepareUpdate(This)	\
    ( (This)->lpVtbl -> PrepareUpdate(This) ) 

#define IUpdateControllerV9_FinishUpdate(This)	\
    ( (This)->lpVtbl -> FinishUpdate(This) ) 

#define IUpdateControllerV9_UpdateComplete(This,updatePkgType)	\
    ( (This)->lpVtbl -> UpdateComplete(This,updatePkgType) ) 

#define IUpdateControllerV9_get_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> get_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV9_put_UpdateCheckInterval(This,minutes)	\
    ( (This)->lpVtbl -> put_UpdateCheckInterval(This,minutes) ) 

#define IUpdateControllerV9_get_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> get_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV9_put_MaxIncrementalDBUpdates(This,maxIncrUpdates)	\
    ( (This)->lpVtbl -> put_MaxIncrementalDBUpdates(This,maxIncrUpdates) ) 

#define IUpdateControllerV9_get_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> get_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV9_put_ForceFullDBUpdate(This,pForceFullUpdate)	\
    ( (This)->lpVtbl -> put_ForceFullDBUpdate(This,pForceFullUpdate) ) 

#define IUpdateControllerV9_get_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV9_put_ProgramVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ProgramVersion(This,pVersion) ) 

#define IUpdateControllerV9_get_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV9_put_ControllersVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_ControllersVersion(This,pVersion) ) 

#define IUpdateControllerV9_get_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV9_put_DBClsPkgVersion(This,pVersion)	\
    ( (This)->lpVtbl -> put_DBClsPkgVersion(This,pVersion) ) 

#define IUpdateControllerV9_get_DBVersion(This,pVersion)	\
    ( (This)->lpVtbl -> get_DBVersion(This,pVersion) ) 

#define IUpdateControllerV9_get_DBPublicationDate(This,date)	\
    ( (This)->lpVtbl -> get_DBPublicationDate(This,date) ) 

#define IUpdateControllerV9_get_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV9_put_AutoUpdateDbCls(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateDbCls(This,pbValue) ) 

#define IUpdateControllerV9_get_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> get_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV9_put_AutoUpdateSdkCtlr(This,pbValue)	\
    ( (This)->lpVtbl -> put_AutoUpdateSdkCtlr(This,pbValue) ) 

#define IUpdateControllerV9_SetDBPublicationDate(This,pubDate)	\
    ( (This)->lpVtbl -> SetDBPublicationDate(This,pubDate) ) 


#define IUpdateControllerV9_HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate)	\
    ( (This)->lpVtbl -> HasCheckedForDbUpdate(This,pHasCheckedForDbUpdate) ) 


#define IUpdateControllerV9_PowerSuspendNotification(This)	\
    ( (This)->lpVtbl -> PowerSuspendNotification(This) ) 

#define IUpdateControllerV9_PowerResumeNotification(This,wasPowerSuspendCalled)	\
    ( (This)->lpVtbl -> PowerResumeNotification(This,wasPowerSuspendCalled) ) 

#define IUpdateControllerV9_get_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> get_BetaChannelUpdates(This,pvbBetaOptIn) ) 

#define IUpdateControllerV9_put_BetaChannelUpdates(This,pvbBetaOptIn)	\
    ( (This)->lpVtbl -> put_BetaChannelUpdates(This,pvbBetaOptIn) ) 


#define IUpdateControllerV9_ReplaceUI(This,sessionId)	\
    ( (This)->lpVtbl -> ReplaceUI(This,sessionId) ) 


#define IUpdateControllerV9_SetDORPending(This,vbDorIsPending)	\
    ( (This)->lpVtbl -> SetDORPending(This,vbDorIsPending) ) 


#define IUpdateControllerV9_GetMessageIDList(This,ppMessageIds)	\
    ( (This)->lpVtbl -> GetMessageIDList(This,ppMessageIds) ) 

#define IUpdateControllerV9_GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression)	\
    ( (This)->lpVtbl -> GetMessageDetails(This,msgID,target_id,content_type,download_url,cohort_id,start_date,end_date,display_time,frequency,display_count,allow_user_suppression) ) 

#define IUpdateControllerV9_SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion)	\
    ( (This)->lpVtbl -> SetMinimumSupportedComponentPackageVersion(This,pMinSupportedCUVersion) ) 


#define IUpdateControllerV9_get_LastDbUpdateTimeStamp(This,pTimeStamp)	\
    ( (This)->lpVtbl -> get_LastDbUpdateTimeStamp(This,pTimeStamp) ) 

#define IUpdateControllerV9_SetPackageAging(This,pkgType,minAge)	\
    ( (This)->lpVtbl -> SetPackageAging(This,pkgType,minAge) ) 


#define IUpdateControllerV9_SideLoadDatabase(This,pDBPackageFilePath)	\
    ( (This)->lpVtbl -> SideLoadDatabase(This,pDBPackageFilePath) ) 

#define IUpdateControllerV9_UpdateCompleteV2(This,updatePkgType,resultCode,auxCode)	\
    ( (This)->lpVtbl -> UpdateCompleteV2(This,updatePkgType,resultCode,auxCode) ) 


#define IUpdateControllerV9_EnableGameMode(This)	\
    ( (This)->lpVtbl -> EnableGameMode(This) ) 

#define IUpdateControllerV9_DisableGameMode(This)	\
    ( (This)->lpVtbl -> DisableGameMode(This) ) 

#define IUpdateControllerV9_GetIrisData(This,pIrisData)	\
    ( (This)->lpVtbl -> GetIrisData(This,pIrisData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerV9_INTERFACE_DEFINED__ */


#ifndef __IUpdateControllerEventsV2_INTERFACE_DEFINED__
#define __IUpdateControllerEventsV2_INTERFACE_DEFINED__

/* interface IUpdateControllerEventsV2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IUpdateControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D2D1C2BC-3427-478E-A903-ADFBCF5711CD")
    IUpdateControllerEventsV2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ShutdownUI( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RestartUI( 
            /* [in] */ unsigned long sessionId) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IUpdateControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUpdateControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUpdateControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUpdateControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUpdateControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUpdateControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUpdateControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUpdateControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ShutdownUI )( 
            IUpdateControllerEventsV2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RestartUI )( 
            IUpdateControllerEventsV2 * This,
            /* [in] */ unsigned long sessionId);
        
        END_INTERFACE
    } IUpdateControllerEventsV2Vtbl;

    interface IUpdateControllerEventsV2
    {
        CONST_VTBL struct IUpdateControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUpdateControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUpdateControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUpdateControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUpdateControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUpdateControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUpdateControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUpdateControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUpdateControllerEventsV2_ShutdownUI(This)	\
    ( (This)->lpVtbl -> ShutdownUI(This) ) 

#define IUpdateControllerEventsV2_RestartUI(This,sessionId)	\
    ( (This)->lpVtbl -> RestartUI(This,sessionId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUpdateControllerEventsV2_INTERFACE_DEFINED__ */


#ifndef ___IUpdateControllerEventsV2_DISPINTERFACE_DEFINED__
#define ___IUpdateControllerEventsV2_DISPINTERFACE_DEFINED__

/* dispinterface _IUpdateControllerEventsV2 */
/* [uuid] */ 


EXTERN_C const IID DIID__IUpdateControllerEventsV2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("620A01DD-16D2-4A83-B02C-E29BE38B3029")
    _IUpdateControllerEventsV2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IUpdateControllerEventsV2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IUpdateControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IUpdateControllerEventsV2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IUpdateControllerEventsV2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IUpdateControllerEventsV2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IUpdateControllerEventsV2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IUpdateControllerEventsV2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IUpdateControllerEventsV2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        END_INTERFACE
    } _IUpdateControllerEventsV2Vtbl;

    interface _IUpdateControllerEventsV2
    {
        CONST_VTBL struct _IUpdateControllerEventsV2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IUpdateControllerEventsV2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IUpdateControllerEventsV2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IUpdateControllerEventsV2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IUpdateControllerEventsV2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _IUpdateControllerEventsV2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _IUpdateControllerEventsV2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _IUpdateControllerEventsV2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IUpdateControllerEventsV2_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_UpdateController;

#ifdef __cplusplus

class DECLSPEC_UUID("376BE474-56D4-4177-BB4E-5610156F36C8")
UpdateController;
#endif
#endif /* __UpdateControllerCOMLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


